
AutoTrackingLDR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000092c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000063a  00800060  0000092c  000009c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080069a  0080069a  00000ffa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ffa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028ed  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b29  00000000  00000000  00003aad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cc1  00000000  00000000  000045d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  00005298  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000668  00000000  00000000  000054f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090c  00000000  00000000  00005b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000646c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	16 e0       	ldi	r17, 0x06	; 6
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e2       	ldi	r30, 0x2C	; 44
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 39       	cpi	r26, 0x9A	; 154
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	26 e0       	ldi	r18, 0x06	; 6
  78:	aa e9       	ldi	r26, 0x9A	; 154
  7a:	b6 e0       	ldi	r27, 0x06	; 6
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3a       	cpi	r26, 0xAE	; 174
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b7 02 	call	0x56e	; 0x56e <main>
  8a:	0c 94 94 04 	jmp	0x928	; 0x928 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:

#include <avr/io.h>

void ADC_init(void)
{
	DDRA = 0x00;
  92:	1a ba       	out	0x1a, r1	; 26
	// AREF = AVcc
	ADMUX = (1<<REFS0);
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	87 b9       	out	0x07, r24	; 7
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  98:	87 e8       	ldi	r24, 0x87	; 135
  9a:	86 b9       	out	0x06, r24	; 6
  9c:	08 95       	ret

0000009e <ADC_get_value>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
  9e:	97 b1       	in	r25, 0x07	; 7
  a0:	98 7f       	andi	r25, 0xF8	; 248
  a2:	87 70       	andi	r24, 0x07	; 7
  a4:	89 2b       	or	r24, r25
  a6:	87 b9       	out	0x07, r24	; 7
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
  a8:	36 9a       	sbi	0x06, 6	; 6
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
  aa:	36 99       	sbic	0x06, 6	; 6
  ac:	fe cf       	rjmp	.-4      	; 0xaa <ADC_get_value+0xc>
	
	return (ADC);
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	95 b1       	in	r25, 0x05	; 5
  b2:	08 95       	ret

000000b4 <display_title>:

#include "hx1230.h"

void display_title(void)
{
	hx_set_coordinates(0, 0);
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 c8 01 	call	0x390	; 0x390 <hx_set_coordinates>
	hx_write_string("AutoTracking LDR");
  bc:	80 e6       	ldi	r24, 0x60	; 96
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 27 02 	call	0x44e	; 0x44e <hx_write_string>
	hx_set_coordinates(0, 1);
  c4:	61 e0       	ldi	r22, 0x01	; 1
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 c8 01 	call	0x390	; 0x390 <hx_set_coordinates>
	hx_write_string("  ScorpionIPX");
  cc:	81 e7       	ldi	r24, 0x71	; 113
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 27 02 	call	0x44e	; 0x44e <hx_write_string>
  d4:	08 95       	ret

000000d6 <display_data_menu>:
	hx_write_string("A: n/a");
	hx_set_coordinates(HX_MAX_COL / 2, 7);
	hx_write_string("B: n/a");
	*/
	
	hx_set_coordinates(0, 3);
  d6:	63 e0       	ldi	r22, 0x03	; 3
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 c8 01 	call	0x390	; 0x390 <hx_set_coordinates>
	hx_write_string("       ||");
  de:	8f e7       	ldi	r24, 0x7F	; 127
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 27 02 	call	0x44e	; 0x44e <hx_write_string>
	hx_set_coordinates(0, 4);
  e6:	64 e0       	ldi	r22, 0x04	; 4
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 c8 01 	call	0x390	; 0x390 <hx_set_coordinates>
	hx_write_string("================");
  ee:	89 e8       	ldi	r24, 0x89	; 137
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 27 02 	call	0x44e	; 0x44e <hx_write_string>
	hx_set_coordinates(0, 5);
  f6:	65 e0       	ldi	r22, 0x05	; 5
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 c8 01 	call	0x390	; 0x390 <hx_set_coordinates>
	hx_write_string("       ||");
  fe:	8f e7       	ldi	r24, 0x7F	; 127
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 27 02 	call	0x44e	; 0x44e <hx_write_string>
 106:	08 95       	ret

00000108 <display_light_sensor_data>:
}

void display_light_sensor_data(uint8_t sensor, int data)
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	eb 01       	movw	r28, r22
	//hx_set_coordinates(60, 3 + sensor);
	hx_set_coordinates(24 + 36 * (sensor & 1), 3 + 2 * (sensor >> 1));
 10e:	68 2f       	mov	r22, r24
 110:	6e 7f       	andi	r22, 0xFE	; 254
 112:	6d 5f       	subi	r22, 0xFD	; 253
 114:	81 70       	andi	r24, 0x01	; 1
 116:	94 e2       	ldi	r25, 0x24	; 36
 118:	89 9f       	mul	r24, r25
 11a:	80 2d       	mov	r24, r0
 11c:	11 24       	eor	r1, r1
 11e:	88 5e       	subi	r24, 0xE8	; 232
 120:	0e 94 c8 01 	call	0x390	; 0x390 <hx_set_coordinates>
	
	// hx_write_char('0' + ((data / 100) % 10));
	hx_write_char('0' + ((data / 10) % 10));
 124:	2a e0       	ldi	r18, 0x0A	; 10
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	ce 01       	movw	r24, r28
 12a:	b9 01       	movw	r22, r18
 12c:	0e 94 15 04 	call	0x82a	; 0x82a <__divmodhi4>
 130:	c8 2f       	mov	r28, r24
 132:	cb 01       	movw	r24, r22
 134:	b9 01       	movw	r22, r18
 136:	0e 94 15 04 	call	0x82a	; 0x82a <__divmodhi4>
 13a:	80 5d       	subi	r24, 0xD0	; 208
 13c:	0e 94 03 02 	call	0x406	; 0x406 <hx_write_char>
	hx_write_char('0' + (data % 10));
 140:	80 e3       	ldi	r24, 0x30	; 48
 142:	8c 0f       	add	r24, r28
 144:	0e 94 03 02 	call	0x406	; 0x406 <hx_write_char>
	
	hx_set_coordinates(18, 7);
 148:	67 e0       	ldi	r22, 0x07	; 7
 14a:	82 e1       	ldi	r24, 0x12	; 18
 14c:	0e 94 c8 01 	call	0x390	; 0x390 <hx_set_coordinates>
	hx_write_char('0' + OCR1A / 100);
 150:	2a b5       	in	r18, 0x2a	; 42
 152:	3b b5       	in	r19, 0x2b	; 43
 154:	36 95       	lsr	r19
 156:	27 95       	ror	r18
 158:	36 95       	lsr	r19
 15a:	27 95       	ror	r18
 15c:	ab e7       	ldi	r26, 0x7B	; 123
 15e:	b4 e1       	ldi	r27, 0x14	; 20
 160:	0e 94 48 04 	call	0x890	; 0x890 <__umulhisi3>
 164:	96 95       	lsr	r25
 166:	87 95       	ror	r24
 168:	80 5d       	subi	r24, 0xD0	; 208
 16a:	0e 94 03 02 	call	0x406	; 0x406 <hx_write_char>
	hx_write_char('0' + (OCR1A / 10) % 10);
 16e:	2a b5       	in	r18, 0x2a	; 42
 170:	3b b5       	in	r19, 0x2b	; 43
 172:	ad ec       	ldi	r26, 0xCD	; 205
 174:	bc ec       	ldi	r27, 0xCC	; 204
 176:	0e 94 48 04 	call	0x890	; 0x890 <__umulhisi3>
 17a:	ac 01       	movw	r20, r24
 17c:	56 95       	lsr	r21
 17e:	47 95       	ror	r20
 180:	56 95       	lsr	r21
 182:	47 95       	ror	r20
 184:	56 95       	lsr	r21
 186:	47 95       	ror	r20
 188:	9a 01       	movw	r18, r20
 18a:	0e 94 48 04 	call	0x890	; 0x890 <__umulhisi3>
 18e:	96 95       	lsr	r25
 190:	87 95       	ror	r24
 192:	96 95       	lsr	r25
 194:	87 95       	ror	r24
 196:	96 95       	lsr	r25
 198:	87 95       	ror	r24
 19a:	9c 01       	movw	r18, r24
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	82 0f       	add	r24, r18
 1ae:	93 1f       	adc	r25, r19
 1b0:	9a 01       	movw	r18, r20
 1b2:	28 1b       	sub	r18, r24
 1b4:	39 0b       	sbc	r19, r25
 1b6:	c9 01       	movw	r24, r18
 1b8:	80 5d       	subi	r24, 0xD0	; 208
 1ba:	0e 94 03 02 	call	0x406	; 0x406 <hx_write_char>
	hx_write_char('0' + OCR1A % 10);
 1be:	4a b5       	in	r20, 0x2a	; 42
 1c0:	5b b5       	in	r21, 0x2b	; 43
 1c2:	9a 01       	movw	r18, r20
 1c4:	ad ec       	ldi	r26, 0xCD	; 205
 1c6:	bc ec       	ldi	r27, 0xCC	; 204
 1c8:	0e 94 48 04 	call	0x890	; 0x890 <__umulhisi3>
 1cc:	96 95       	lsr	r25
 1ce:	87 95       	ror	r24
 1d0:	96 95       	lsr	r25
 1d2:	87 95       	ror	r24
 1d4:	96 95       	lsr	r25
 1d6:	87 95       	ror	r24
 1d8:	9c 01       	movw	r18, r24
 1da:	22 0f       	add	r18, r18
 1dc:	33 1f       	adc	r19, r19
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	82 0f       	add	r24, r18
 1ec:	93 1f       	adc	r25, r19
 1ee:	9a 01       	movw	r18, r20
 1f0:	28 1b       	sub	r18, r24
 1f2:	39 0b       	sbc	r19, r25
 1f4:	c9 01       	movw	r24, r18
 1f6:	80 5d       	subi	r24, 0xD0	; 208
 1f8:	0e 94 03 02 	call	0x406	; 0x406 <hx_write_char>
	
	hx_set_coordinates(66, 7);
 1fc:	67 e0       	ldi	r22, 0x07	; 7
 1fe:	82 e4       	ldi	r24, 0x42	; 66
 200:	0e 94 c8 01 	call	0x390	; 0x390 <hx_set_coordinates>
	hx_write_char('0' + OCR1B / 100);
 204:	28 b5       	in	r18, 0x28	; 40
 206:	39 b5       	in	r19, 0x29	; 41
 208:	36 95       	lsr	r19
 20a:	27 95       	ror	r18
 20c:	36 95       	lsr	r19
 20e:	27 95       	ror	r18
 210:	ab e7       	ldi	r26, 0x7B	; 123
 212:	b4 e1       	ldi	r27, 0x14	; 20
 214:	0e 94 48 04 	call	0x890	; 0x890 <__umulhisi3>
 218:	96 95       	lsr	r25
 21a:	87 95       	ror	r24
 21c:	80 5d       	subi	r24, 0xD0	; 208
 21e:	0e 94 03 02 	call	0x406	; 0x406 <hx_write_char>
	hx_write_char('0' + (OCR1B / 10) % 10);
 222:	28 b5       	in	r18, 0x28	; 40
 224:	39 b5       	in	r19, 0x29	; 41
 226:	ad ec       	ldi	r26, 0xCD	; 205
 228:	bc ec       	ldi	r27, 0xCC	; 204
 22a:	0e 94 48 04 	call	0x890	; 0x890 <__umulhisi3>
 22e:	ac 01       	movw	r20, r24
 230:	56 95       	lsr	r21
 232:	47 95       	ror	r20
 234:	56 95       	lsr	r21
 236:	47 95       	ror	r20
 238:	56 95       	lsr	r21
 23a:	47 95       	ror	r20
 23c:	9a 01       	movw	r18, r20
 23e:	0e 94 48 04 	call	0x890	; 0x890 <__umulhisi3>
 242:	96 95       	lsr	r25
 244:	87 95       	ror	r24
 246:	96 95       	lsr	r25
 248:	87 95       	ror	r24
 24a:	96 95       	lsr	r25
 24c:	87 95       	ror	r24
 24e:	9c 01       	movw	r18, r24
 250:	22 0f       	add	r18, r18
 252:	33 1f       	adc	r19, r19
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	82 0f       	add	r24, r18
 262:	93 1f       	adc	r25, r19
 264:	9a 01       	movw	r18, r20
 266:	28 1b       	sub	r18, r24
 268:	39 0b       	sbc	r19, r25
 26a:	c9 01       	movw	r24, r18
 26c:	80 5d       	subi	r24, 0xD0	; 208
 26e:	0e 94 03 02 	call	0x406	; 0x406 <hx_write_char>
	hx_write_char('0' + OCR1B % 10);
 272:	48 b5       	in	r20, 0x28	; 40
 274:	59 b5       	in	r21, 0x29	; 41
 276:	9a 01       	movw	r18, r20
 278:	ad ec       	ldi	r26, 0xCD	; 205
 27a:	bc ec       	ldi	r27, 0xCC	; 204
 27c:	0e 94 48 04 	call	0x890	; 0x890 <__umulhisi3>
 280:	96 95       	lsr	r25
 282:	87 95       	ror	r24
 284:	96 95       	lsr	r25
 286:	87 95       	ror	r24
 288:	96 95       	lsr	r25
 28a:	87 95       	ror	r24
 28c:	9c 01       	movw	r18, r24
 28e:	22 0f       	add	r18, r18
 290:	33 1f       	adc	r19, r19
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	82 0f       	add	r24, r18
 2a0:	93 1f       	adc	r25, r19
 2a2:	9a 01       	movw	r18, r20
 2a4:	28 1b       	sub	r18, r24
 2a6:	39 0b       	sbc	r19, r25
 2a8:	c9 01       	movw	r24, r18
 2aa:	80 5d       	subi	r24, 0xD0	; 208
 2ac:	0e 94 03 02 	call	0x406	; 0x406 <hx_write_char>
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <hx_send_data>:
}

void hx_send_data(unsigned char _data)
{
	// activate hx1230
	CLEAR_HX_CE;
 2b6:	a9 98       	cbi	0x15, 1	; 21
	
	// configure communication for data transfer
	SET_HX_DIN;
 2b8:	aa 9a       	sbi	0x15, 2	; 21
	
	// toggle clock
	SET_HX_CLK;
 2ba:	ab 9a       	sbi	0x15, 3	; 21
	CLEAR_HX_CLK;
 2bc:	ab 98       	cbi	0x15, 3	; 21
	
	// send the actual data, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
 2be:	27 e0       	ldi	r18, 0x07	; 7
 2c0:	30 e0       	ldi	r19, 0x00	; 0
	{
		// calculate bit to be send
		if(((_data >> bit_position) & 1) == 1)
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	ac 01       	movw	r20, r24
 2c6:	02 2e       	mov	r0, r18
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <hx_send_data+0x18>
 2ca:	55 95       	asr	r21
 2cc:	47 95       	ror	r20
 2ce:	0a 94       	dec	r0
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <hx_send_data+0x14>
 2d2:	40 ff       	sbrs	r20, 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <hx_send_data+0x24>
		{
			SET_HX_DIN;
 2d6:	aa 9a       	sbi	0x15, 2	; 21
 2d8:	01 c0       	rjmp	.+2      	; 0x2dc <hx_send_data+0x26>
		}
		else
		{
			CLEAR_HX_DIN;
 2da:	aa 98       	cbi	0x15, 2	; 21
		}
		
		// toggle clock
		SET_HX_CLK;
 2dc:	ab 9a       	sbi	0x15, 3	; 21
		CLEAR_HX_CLK;
 2de:	ab 98       	cbi	0x15, 3	; 21
	// toggle clock
	SET_HX_CLK;
	CLEAR_HX_CLK;
	
	// send the actual data, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
 2e0:	21 50       	subi	r18, 0x01	; 1
 2e2:	31 09       	sbc	r19, r1
 2e4:	78 f7       	brcc	.-34     	; 0x2c4 <hx_send_data+0xe>
		SET_HX_CLK;
		CLEAR_HX_CLK;
	}
	
	// deactivate hx1230
	SET_HX_CE;
 2e6:	a9 9a       	sbi	0x15, 1	; 21
 2e8:	08 95       	ret

000002ea <hx_send_command>:
}

void hx_send_command(unsigned char _command)
{
	// activate hx1230
	CLEAR_HX_CE;
 2ea:	a9 98       	cbi	0x15, 1	; 21
	
	// configure communication for command transfer
	CLEAR_HX_DIN;
 2ec:	aa 98       	cbi	0x15, 2	; 21
	
	// toggle clock
	SET_HX_CLK;
 2ee:	ab 9a       	sbi	0x15, 3	; 21
	CLEAR_HX_CLK;
 2f0:	ab 98       	cbi	0x15, 3	; 21
	
	// send the actual command, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
 2f2:	27 e0       	ldi	r18, 0x07	; 7
 2f4:	30 e0       	ldi	r19, 0x00	; 0
	{
		// calculate bit to be send
		if(((_command >> bit_position) & 1) == 1)
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	ac 01       	movw	r20, r24
 2fa:	02 2e       	mov	r0, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <hx_send_command+0x18>
 2fe:	55 95       	asr	r21
 300:	47 95       	ror	r20
 302:	0a 94       	dec	r0
 304:	e2 f7       	brpl	.-8      	; 0x2fe <hx_send_command+0x14>
 306:	40 ff       	sbrs	r20, 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <hx_send_command+0x24>
		{
			SET_HX_DIN;
 30a:	aa 9a       	sbi	0x15, 2	; 21
 30c:	01 c0       	rjmp	.+2      	; 0x310 <hx_send_command+0x26>
		}
		else
		{
			CLEAR_HX_DIN;
 30e:	aa 98       	cbi	0x15, 2	; 21
		}
		
		// toggle clock
		SET_HX_CLK;
 310:	ab 9a       	sbi	0x15, 3	; 21
		CLEAR_HX_CLK;
 312:	ab 98       	cbi	0x15, 3	; 21
	// toggle clock
	SET_HX_CLK;
	CLEAR_HX_CLK;
	
	// send the actual command, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
 314:	21 50       	subi	r18, 0x01	; 1
 316:	31 09       	sbc	r19, r1
 318:	78 f7       	brcc	.-34     	; 0x2f8 <hx_send_command+0xe>
		SET_HX_CLK;
		CLEAR_HX_CLK;
	}
	
	// deactivate hx1230
	SET_HX_CE;
 31a:	a9 9a       	sbi	0x15, 1	; 21
 31c:	08 95       	ret

0000031e <init_hx1230_control>:


void init_hx1230_control(void)
{
	// set required pins as output
	HX1230_DDR |= ((1 << HX_RST) | (1 << HX_CE) | (1 << HX_DIN) | (1 << HX_CLK));
 31e:	84 b3       	in	r24, 0x14	; 20
 320:	8f 60       	ori	r24, 0x0F	; 15
 322:	84 bb       	out	0x14, r24	; 20
	
	// set idle state
	CLEAR_HX_CLK;
 324:	ab 98       	cbi	0x15, 3	; 21
	CLEAR_HX_RST;
 326:	a8 98       	cbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 328:	2f ef       	ldi	r18, 0xFF	; 255
 32a:	80 e7       	ldi	r24, 0x70	; 112
 32c:	92 e0       	ldi	r25, 0x02	; 2
 32e:	21 50       	subi	r18, 0x01	; 1
 330:	80 40       	sbci	r24, 0x00	; 0
 332:	90 40       	sbci	r25, 0x00	; 0
 334:	e1 f7       	brne	.-8      	; 0x32e <init_hx1230_control+0x10>
 336:	00 c0       	rjmp	.+0      	; 0x338 <init_hx1230_control+0x1a>
 338:	00 00       	nop
	_delay_ms(50);
	SET_HX_RST;
 33a:	a8 9a       	sbi	0x15, 0	; 21
	CLEAR_HX_CE;
 33c:	a9 98       	cbi	0x15, 1	; 21
 33e:	8f e9       	ldi	r24, 0x9F	; 159
 340:	9f e0       	ldi	r25, 0x0F	; 15
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <init_hx1230_control+0x24>
 346:	00 c0       	rjmp	.+0      	; 0x348 <init_hx1230_control+0x2a>
 348:	00 00       	nop
	_delay_ms(1);
	SET_HX_CE;
 34a:	a9 9a       	sbi	0x15, 1	; 21
 34c:	8f e9       	ldi	r24, 0x9F	; 159
 34e:	9f e0       	ldi	r25, 0x0F	; 15
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <init_hx1230_control+0x32>
 354:	00 c0       	rjmp	.+0      	; 0x356 <init_hx1230_control+0x38>
 356:	00 00       	nop
	_delay_ms(1);
	
	// commands needed to initialize hx1230 display
	// found within a chinese data sheet
	
	hx_send_command(0x2f);
 358:	8f e2       	ldi	r24, 0x2F	; 47
 35a:	0e 94 75 01 	call	0x2ea	; 0x2ea <hx_send_command>
	hx_send_command(0x90);
 35e:	80 e9       	ldi	r24, 0x90	; 144
 360:	0e 94 75 01 	call	0x2ea	; 0x2ea <hx_send_command>
	hx_send_command(0xa6);
 364:	86 ea       	ldi	r24, 0xA6	; 166
 366:	0e 94 75 01 	call	0x2ea	; 0x2ea <hx_send_command>
	hx_send_command(0xa4);
 36a:	84 ea       	ldi	r24, 0xA4	; 164
 36c:	0e 94 75 01 	call	0x2ea	; 0x2ea <hx_send_command>
	hx_send_command(0xaf);
 370:	8f ea       	ldi	r24, 0xAF	; 175
 372:	0e 94 75 01 	call	0x2ea	; 0x2ea <hx_send_command>
	
	hx_send_command(0x40);
 376:	80 e4       	ldi	r24, 0x40	; 64
 378:	0e 94 75 01 	call	0x2ea	; 0x2ea <hx_send_command>
	hx_send_command(0xb0);
 37c:	80 eb       	ldi	r24, 0xB0	; 176
 37e:	0e 94 75 01 	call	0x2ea	; 0x2ea <hx_send_command>
	hx_send_command(0x10);
 382:	80 e1       	ldi	r24, 0x10	; 16
 384:	0e 94 75 01 	call	0x2ea	; 0x2ea <hx_send_command>
	hx_send_command(0x00);
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 75 01 	call	0x2ea	; 0x2ea <hx_send_command>
 38e:	08 95       	ret

00000390 <hx_set_coordinates>:
	// deactivate hx1230
	SET_HX_CE;
}

void hx_set_coordinates(unsigned char _x, unsigned char _y)
{
 390:	cf 93       	push	r28
 392:	c8 2f       	mov	r28, r24
	// 0, 0 is the upper left corner
	
	hx_send_command(0xB0 + _y);
 394:	80 eb       	ldi	r24, 0xB0	; 176
 396:	86 0f       	add	r24, r22
 398:	0e 94 75 01 	call	0x2ea	; 0x2ea <hx_send_command>
	hx_send_command(0x10 | ((_x & 0x7F) >> 4));
 39c:	8c 2f       	mov	r24, r28
 39e:	8f 77       	andi	r24, 0x7F	; 127
 3a0:	82 95       	swap	r24
 3a2:	8f 70       	andi	r24, 0x0F	; 15
 3a4:	80 61       	ori	r24, 0x10	; 16
 3a6:	0e 94 75 01 	call	0x2ea	; 0x2ea <hx_send_command>
	hx_send_command(0x0F & _x);
 3aa:	8c 2f       	mov	r24, r28
 3ac:	8f 70       	andi	r24, 0x0F	; 15
 3ae:	0e 94 75 01 	call	0x2ea	; 0x2ea <hx_send_command>
}
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <hx_clear_screen>:

void hx_clear_screen(void)
{
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 c8 01 	call	0x390	; 0x390 <hx_set_coordinates>
 3c2:	d9 e0       	ldi	r29, 0x09	; 9
 3c4:	07 c0       	rjmp	.+14     	; 0x3d4 <hx_clear_screen+0x1e>
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
	{
		for(col = 0; col <= HX_MAX_COL; col ++)
		{
			hx_send_data(0x00);
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <hx_send_data>
 3cc:	c1 50       	subi	r28, 0x01	; 1
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
	{
		for(col = 0; col <= HX_MAX_COL; col ++)
 3ce:	d9 f7       	brne	.-10     	; 0x3c6 <hx_clear_screen+0x10>
 3d0:	d1 50       	subi	r29, 0x01	; 1
{
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
 3d2:	11 f0       	breq	.+4      	; 0x3d8 <hx_clear_screen+0x22>
	hx_send_command(0x10 | ((_x & 0x7F) >> 4));
	hx_send_command(0x0F & _x);
}

void hx_clear_screen(void)
{
 3d4:	c1 e6       	ldi	r28, 0x61	; 97
 3d6:	f7 cf       	rjmp	.-18     	; 0x3c6 <hx_clear_screen+0x10>
		for(col = 0; col <= HX_MAX_COL; col ++)
		{
			hx_send_data(0x00);
		}
	}
}
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <hx_fill_screen>:

void hx_fill_screen(void)
{
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	0e 94 c8 01 	call	0x390	; 0x390 <hx_set_coordinates>
 3ea:	d9 e0       	ldi	r29, 0x09	; 9
 3ec:	07 c0       	rjmp	.+14     	; 0x3fc <hx_fill_screen+0x1e>
	
	for(row = 0; row < 9; row ++)
	{
		for(col = 0; col < 96; col ++)
		{
			hx_send_data(0xFF);
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
 3f0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <hx_send_data>
 3f4:	c1 50       	subi	r28, 0x01	; 1
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row < 9; row ++)
	{
		for(col = 0; col < 96; col ++)
 3f6:	d9 f7       	brne	.-10     	; 0x3ee <hx_fill_screen+0x10>
 3f8:	d1 50       	subi	r29, 0x01	; 1
{
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row < 9; row ++)
 3fa:	11 f0       	breq	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
		}
	}
}

void hx_fill_screen(void)
{
 3fc:	c0 e6       	ldi	r28, 0x60	; 96
 3fe:	f7 cf       	rjmp	.-18     	; 0x3ee <hx_fill_screen+0x10>
		for(col = 0; col < 96; col ++)
		{
			hx_send_data(0xFF);
		}
	}
}
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <hx_write_char>:

void hx_write_char(const unsigned char _character)
{
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	ec 01       	movw	r28, r24
 412:	cc 0f       	add	r28, r28
 414:	dd 1f       	adc	r29, r29
 416:	c8 0f       	add	r28, r24
 418:	d9 1f       	adc	r29, r25
 41a:	cc 0f       	add	r28, r28
 41c:	dd 1f       	adc	r29, r29
 41e:	c6 56       	subi	r28, 0x66	; 102
 420:	df 4f       	sbci	r29, 0xFF	; 255
 422:	01 96       	adiw	r24, 0x01	; 1
 424:	8c 01       	movw	r16, r24
 426:	00 0f       	add	r16, r16
 428:	11 1f       	adc	r17, r17
 42a:	80 0f       	add	r24, r16
 42c:	91 1f       	adc	r25, r17
 42e:	8c 01       	movw	r16, r24
 430:	00 0f       	add	r16, r16
 432:	11 1f       	adc	r17, r17
 434:	06 56       	subi	r16, 0x66	; 102
 436:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(int row_index = 0; row_index < 6; row_index ++)
	{
		hx_send_data(HX_character[_character][row_index]);
 438:	89 91       	ld	r24, Y+
 43a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <hx_send_data>
}

void hx_write_char(const unsigned char _character)
{
	
	for(int row_index = 0; row_index < 6; row_index ++)
 43e:	c0 17       	cp	r28, r16
 440:	d1 07       	cpc	r29, r17
 442:	d1 f7       	brne	.-12     	; 0x438 <hx_write_char+0x32>
	{
		hx_send_data(HX_character[_character][row_index]);
	}
}
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	1f 91       	pop	r17
 44a:	0f 91       	pop	r16
 44c:	08 95       	ret

0000044e <hx_write_string>:

void hx_write_string(const char *_characters_array)
{
 44e:	0f 93       	push	r16
 450:	1f 93       	push	r17
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
	int string_length = strlen(_characters_array);
 456:	fc 01       	movw	r30, r24
 458:	01 90       	ld	r0, Z+
 45a:	00 20       	and	r0, r0
 45c:	e9 f7       	brne	.-6      	; 0x458 <hx_write_string+0xa>
 45e:	31 97       	sbiw	r30, 0x01	; 1
 460:	e8 1b       	sub	r30, r24
 462:	f9 0b       	sbc	r31, r25
	for(int char_index = 0; char_index < string_length; char_index++)
 464:	1e 16       	cp	r1, r30
 466:	1f 06       	cpc	r1, r31
 468:	54 f4       	brge	.+20     	; 0x47e <hx_write_string+0x30>
 46a:	ec 01       	movw	r28, r24
 46c:	8c 01       	movw	r16, r24
 46e:	0e 0f       	add	r16, r30
 470:	1f 1f       	adc	r17, r31
	{
		hx_write_char((const unsigned char)(_characters_array[char_index]));
 472:	89 91       	ld	r24, Y+
 474:	0e 94 03 02 	call	0x406	; 0x406 <hx_write_char>
}

void hx_write_string(const char *_characters_array)
{
	int string_length = strlen(_characters_array);
	for(int char_index = 0; char_index < string_length; char_index++)
 478:	c0 17       	cp	r28, r16
 47a:	d1 07       	cpc	r29, r17
 47c:	d1 f7       	brne	.-12     	; 0x472 <hx_write_string+0x24>
	{
		hx_write_char((const unsigned char)(_characters_array[char_index]));
	}
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	1f 91       	pop	r17
 484:	0f 91       	pop	r16
 486:	08 95       	ret

00000488 <get_filtered_light_intensity>:
	adc_value = percentage_value(adc_value);
	return adc_value;
}

int get_filtered_light_intensity(uint8_t sensor)
{
 488:	0f 93       	push	r16
 48a:	1f 93       	push	r17
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	d8 2f       	mov	r29, r24
 492:	cf e0       	ldi	r28, 0x0F	; 15
	uint16_t adc_value = 0;
 494:	00 e0       	ldi	r16, 0x00	; 0
 496:	10 e0       	ldi	r17, 0x00	; 0
	for(char i = 0; i < FILTLER_RANK; i++)
	{
		adc_value += ADC_get_value(sensor);
 498:	8d 2f       	mov	r24, r29
 49a:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_get_value>
 49e:	08 0f       	add	r16, r24
 4a0:	19 1f       	adc	r17, r25
 4a2:	c1 50       	subi	r28, 0x01	; 1
}

int get_filtered_light_intensity(uint8_t sensor)
{
	uint16_t adc_value = 0;
	for(char i = 0; i < FILTLER_RANK; i++)
 4a4:	c9 f7       	brne	.-14     	; 0x498 <get_filtered_light_intensity+0x10>
	return adc_value;
}

int percentage_value(int raw_value)
{
	raw_value = raw_value*((long)100)/1023;
 4a6:	98 01       	movw	r18, r16
 4a8:	a9 e8       	ldi	r26, 0x89	; 137
 4aa:	b8 e8       	ldi	r27, 0x88	; 136
 4ac:	0e 94 48 04 	call	0x890	; 0x890 <__umulhisi3>
 4b0:	dc 01       	movw	r26, r24
 4b2:	b6 95       	lsr	r27
 4b4:	a7 95       	ror	r26
 4b6:	b6 95       	lsr	r27
 4b8:	a7 95       	ror	r26
 4ba:	b6 95       	lsr	r27
 4bc:	a7 95       	ror	r26
 4be:	24 e6       	ldi	r18, 0x64	; 100
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	0e 94 57 04 	call	0x8ae	; 0x8ae <__usmulhisi3>
 4c6:	2f ef       	ldi	r18, 0xFF	; 255
 4c8:	33 e0       	ldi	r19, 0x03	; 3
 4ca:	40 e0       	ldi	r20, 0x00	; 0
 4cc:	50 e0       	ldi	r21, 0x00	; 0
 4ce:	0e 94 29 04 	call	0x852	; 0x852 <__divmodsi4>
		adc_value += ADC_get_value(sensor);
	}
	adc_value /= FILTLER_RANK;
	adc_value = percentage_value(adc_value);
	return adc_value;
}
 4d2:	84 e6       	ldi	r24, 0x64	; 100
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	82 1b       	sub	r24, r18
 4d8:	93 0b       	sbc	r25, r19
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	1f 91       	pop	r17
 4e0:	0f 91       	pop	r16
 4e2:	08 95       	ret

000004e4 <uC_init>:
 4e4:	2f ef       	ldi	r18, 0xFF	; 255
 4e6:	81 ee       	ldi	r24, 0xE1	; 225
 4e8:	94 e0       	ldi	r25, 0x04	; 4
 4ea:	21 50       	subi	r18, 0x01	; 1
 4ec:	80 40       	sbci	r24, 0x00	; 0
 4ee:	90 40       	sbci	r25, 0x00	; 0
 4f0:	e1 f7       	brne	.-8      	; 0x4ea <uC_init+0x6>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <uC_init+0x10>
 4f4:	00 00       	nop
{
	// Wait for system to get fully powered up
	_delay_ms(100);
	
	// initialize required modules
	ADC_init();
 4f6:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
 4fa:	2f ef       	ldi	r18, 0xFF	; 255
 4fc:	80 e7       	ldi	r24, 0x70	; 112
 4fe:	92 e0       	ldi	r25, 0x02	; 2
 500:	21 50       	subi	r18, 0x01	; 1
 502:	80 40       	sbci	r24, 0x00	; 0
 504:	90 40       	sbci	r25, 0x00	; 0
 506:	e1 f7       	brne	.-8      	; 0x500 <uC_init+0x1c>
 508:	00 c0       	rjmp	.+0      	; 0x50a <uC_init+0x26>
 50a:	00 00       	nop
	_delay_ms(50);
	
	init_pwm_channels();
 50c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <init_pwm_channels>
 510:	2f ef       	ldi	r18, 0xFF	; 255
 512:	80 e7       	ldi	r24, 0x70	; 112
 514:	92 e0       	ldi	r25, 0x02	; 2
 516:	21 50       	subi	r18, 0x01	; 1
 518:	80 40       	sbci	r24, 0x00	; 0
 51a:	90 40       	sbci	r25, 0x00	; 0
 51c:	e1 f7       	brne	.-8      	; 0x516 <uC_init+0x32>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <uC_init+0x3c>
 520:	00 00       	nop
	_delay_ms(50);
	
	init_hx1230_control();
 522:	0e 94 8f 01 	call	0x31e	; 0x31e <init_hx1230_control>
 526:	2f ef       	ldi	r18, 0xFF	; 255
 528:	80 e7       	ldi	r24, 0x70	; 112
 52a:	92 e0       	ldi	r25, 0x02	; 2
 52c:	21 50       	subi	r18, 0x01	; 1
 52e:	80 40       	sbci	r24, 0x00	; 0
 530:	90 40       	sbci	r25, 0x00	; 0
 532:	e1 f7       	brne	.-8      	; 0x52c <uC_init+0x48>
 534:	00 c0       	rjmp	.+0      	; 0x536 <uC_init+0x52>
 536:	00 00       	nop
	_delay_ms(50);
	hx_fill_screen();
 538:	0e 94 ef 01 	call	0x3de	; 0x3de <hx_fill_screen>
 53c:	2f ef       	ldi	r18, 0xFF	; 255
 53e:	89 e6       	ldi	r24, 0x69	; 105
 540:	98 e1       	ldi	r25, 0x18	; 24
 542:	21 50       	subi	r18, 0x01	; 1
 544:	80 40       	sbci	r24, 0x00	; 0
 546:	90 40       	sbci	r25, 0x00	; 0
 548:	e1 f7       	brne	.-8      	; 0x542 <uC_init+0x5e>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <uC_init+0x68>
 54c:	00 00       	nop
	_delay_ms(500);
	hx_clear_screen();
 54e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <hx_clear_screen>
 552:	2f ef       	ldi	r18, 0xFF	; 255
 554:	82 e5       	ldi	r24, 0x52	; 82
 556:	97 e0       	ldi	r25, 0x07	; 7
 558:	21 50       	subi	r18, 0x01	; 1
 55a:	80 40       	sbci	r24, 0x00	; 0
 55c:	90 40       	sbci	r25, 0x00	; 0
 55e:	e1 f7       	brne	.-8      	; 0x558 <uC_init+0x74>
 560:	00 c0       	rjmp	.+0      	; 0x562 <uC_init+0x7e>
 562:	00 00       	nop
	_delay_ms(150);
	
	display_title();
 564:	0e 94 5a 00 	call	0xb4	; 0xb4 <display_title>
	display_data_menu();
 568:	0e 94 6b 00 	call	0xd6	; 0xd6 <display_data_menu>
 56c:	08 95       	ret

0000056e <main>:

void uC_init(void);

int main(void)
{
	uC_init();
 56e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <uC_init>
	
	turn_on_pwm_channels();
 572:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <turn_on_pwm_channels>
	OCR1A = 32;
 576:	80 e2       	ldi	r24, 0x20	; 32
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	9b bd       	out	0x2b, r25	; 43
 57c:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 32;
 57e:	99 bd       	out	0x29, r25	; 41
 580:	88 bd       	out	0x28, r24	; 40
	
	DDRB = 0x00;
 582:	17 ba       	out	0x17, r1	; 23
	PORTB = 0xFF;
 584:	8f ef       	ldi	r24, 0xFF	; 255
 586:	88 bb       	out	0x18, r24	; 24
 588:	2f ef       	ldi	r18, 0xFF	; 255
 58a:	82 e5       	ldi	r24, 0x52	; 82
 58c:	97 e0       	ldi	r25, 0x07	; 7
 58e:	21 50       	subi	r18, 0x01	; 1
 590:	80 40       	sbci	r24, 0x00	; 0
 592:	90 40       	sbci	r25, 0x00	; 0
 594:	e1 f7       	brne	.-8      	; 0x58e <main+0x20>
 596:	00 c0       	rjmp	.+0      	; 0x598 <main+0x2a>
 598:	00 00       	nop
	
    while (1) 
    {
		_delay_ms(150);
		track();
 59a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <track>
 59e:	f4 cf       	rjmp	.-24     	; 0x588 <main+0x1a>

000005a0 <init_pwm_channels>:
#include "global.h"
#include <avr/io.h>

void init_pwm_channels(void)
{
	DDRD |= (1 << DDD4)|(1 << DDD5);
 5a0:	81 b3       	in	r24, 0x11	; 17
 5a2:	80 63       	ori	r24, 0x30	; 48
 5a4:	81 bb       	out	0x11, r24	; 17
	// PB1 and PB2 is now an output
	
	 ICR1 = 1249;
 5a6:	81 ee       	ldi	r24, 0xE1	; 225
 5a8:	94 e0       	ldi	r25, 0x04	; 4
 5aa:	97 bd       	out	0x27, r25	; 39
 5ac:	86 bd       	out	0x26, r24	; 38
	 // set TOP to count 20ms @ 16its

	 OCR1A = 00;
 5ae:	1b bc       	out	0x2b, r1	; 43
 5b0:	1a bc       	out	0x2a, r1	; 42
	 // set PWM for 0% duty cycle @ 16bits

	 OCR1B = 00;
 5b2:	19 bc       	out	0x29, r1	; 41
 5b4:	18 bc       	out	0x28, r1	; 40
	 // set PWM for 0% duty cycle @ 16bits

	 TCCR1A &= ~((1 << COM1A1)|(1 << COM1B1));
 5b6:	8f b5       	in	r24, 0x2f	; 47
 5b8:	8f 75       	andi	r24, 0x5F	; 95
 5ba:	8f bd       	out	0x2f, r24	; 47
	 // make sure PWM signal is off

	TCCR1B |= (1 << CS12);
 5bc:	8e b5       	in	r24, 0x2e	; 46
 5be:	84 60       	ori	r24, 0x04	; 4
 5c0:	8e bd       	out	0x2e, r24	; 46
	// START the timer with 256 prescaler

	 TCCR1A |= (1 << WGM11);
 5c2:	8f b5       	in	r24, 0x2f	; 47
 5c4:	82 60       	ori	r24, 0x02	; 2
 5c6:	8f bd       	out	0x2f, r24	; 47
	 TCCR1B |= (1 << WGM12)|(1 << WGM13);
 5c8:	8e b5       	in	r24, 0x2e	; 46
 5ca:	88 61       	ori	r24, 0x18	; 24
 5cc:	8e bd       	out	0x2e, r24	; 46
 5ce:	08 95       	ret

000005d0 <turn_on_pwm_channels>:
	 // set Fast PWM mode using ICR1 as TOP
}

void turn_on_pwm_channels(void)
{
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1);
 5d0:	8f b5       	in	r24, 0x2f	; 47
 5d2:	80 6a       	ori	r24, 0xA0	; 160
 5d4:	8f bd       	out	0x2f, r24	; 47
 5d6:	08 95       	ret

000005d8 <track>:

int up_down_movement_gradient_request;
int left_right_movement_gradient_request;

void track(void)
{
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
	light_up_left = get_filtered_light_intensity(LS_UP_LEFT);
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	0e 94 44 02 	call	0x488	; 0x488 <get_filtered_light_intensity>
 5e2:	90 93 ad 06 	sts	0x06AD, r25	; 0x8006ad <light_up_left+0x1>
 5e6:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <light_up_left>
	light_up_right = get_filtered_light_intensity(LS_UP_RIGHT);
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	0e 94 44 02 	call	0x488	; 0x488 <get_filtered_light_intensity>
 5f0:	90 93 9f 06 	sts	0x069F, r25	; 0x80069f <light_up_right+0x1>
 5f4:	80 93 9e 06 	sts	0x069E, r24	; 0x80069e <light_up_right>
	light_down_left = get_filtered_light_intensity(LS_DOWN_LEFT);
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	0e 94 44 02 	call	0x488	; 0x488 <get_filtered_light_intensity>
 5fe:	90 93 a9 06 	sts	0x06A9, r25	; 0x8006a9 <light_down_left+0x1>
 602:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <light_down_left>
	light_down_right = get_filtered_light_intensity(LS_DOWN_RIGHT);
 606:	83 e0       	ldi	r24, 0x03	; 3
 608:	0e 94 44 02 	call	0x488	; 0x488 <get_filtered_light_intensity>
 60c:	90 93 a1 06 	sts	0x06A1, r25	; 0x8006a1 <light_down_right+0x1>
 610:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <light_down_right>
	
	display_light_sensor_data(LS_UP_LEFT, light_up_left);
 614:	60 91 ac 06 	lds	r22, 0x06AC	; 0x8006ac <light_up_left>
 618:	70 91 ad 06 	lds	r23, 0x06AD	; 0x8006ad <light_up_left+0x1>
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	0e 94 84 00 	call	0x108	; 0x108 <display_light_sensor_data>
	display_light_sensor_data(LS_UP_RIGHT, light_up_right);
 622:	60 91 9e 06 	lds	r22, 0x069E	; 0x80069e <light_up_right>
 626:	70 91 9f 06 	lds	r23, 0x069F	; 0x80069f <light_up_right+0x1>
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	0e 94 84 00 	call	0x108	; 0x108 <display_light_sensor_data>
	display_light_sensor_data(LS_DOWN_LEFT, light_down_left);
 630:	60 91 a8 06 	lds	r22, 0x06A8	; 0x8006a8 <light_down_left>
 634:	70 91 a9 06 	lds	r23, 0x06A9	; 0x8006a9 <light_down_left+0x1>
 638:	82 e0       	ldi	r24, 0x02	; 2
 63a:	0e 94 84 00 	call	0x108	; 0x108 <display_light_sensor_data>
	display_light_sensor_data(LS_DOWN_RIGHT, light_down_right);
 63e:	60 91 a0 06 	lds	r22, 0x06A0	; 0x8006a0 <light_down_right>
 642:	70 91 a1 06 	lds	r23, 0x06A1	; 0x8006a1 <light_down_right+0x1>
 646:	83 e0       	ldi	r24, 0x03	; 3
 648:	0e 94 84 00 	call	0x108	; 0x108 <display_light_sensor_data>
	
	up_intensity_average = light_up_left + light_up_right;
 64c:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <light_up_left>
 650:	f0 91 ad 06 	lds	r31, 0x06AD	; 0x8006ad <light_up_left+0x1>
 654:	60 91 9e 06 	lds	r22, 0x069E	; 0x80069e <light_up_right>
 658:	70 91 9f 06 	lds	r23, 0x069F	; 0x80069f <light_up_right+0x1>
	up_intensity_average >>= 1;
 65c:	af 01       	movw	r20, r30
 65e:	46 0f       	add	r20, r22
 660:	57 1f       	adc	r21, r23
 662:	55 95       	asr	r21
 664:	47 95       	ror	r20
 666:	50 93 ab 06 	sts	0x06AB, r21	; 0x8006ab <up_intensity_average+0x1>
 66a:	40 93 aa 06 	sts	0x06AA, r20	; 0x8006aa <up_intensity_average>
	
	down_intensity_average = light_down_left + light_down_right;
 66e:	20 91 a8 06 	lds	r18, 0x06A8	; 0x8006a8 <light_down_left>
 672:	30 91 a9 06 	lds	r19, 0x06A9	; 0x8006a9 <light_down_left+0x1>
 676:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <light_down_right>
 67a:	90 91 a1 06 	lds	r25, 0x06A1	; 0x8006a1 <light_down_right+0x1>
	down_intensity_average >>= 1;
 67e:	a9 01       	movw	r20, r18
 680:	48 0f       	add	r20, r24
 682:	59 1f       	adc	r21, r25
 684:	55 95       	asr	r21
 686:	47 95       	ror	r20
 688:	50 93 9b 06 	sts	0x069B, r21	; 0x80069b <__data_end+0x1>
 68c:	40 93 9a 06 	sts	0x069A, r20	; 0x80069a <__data_end>
	
	left_intensity_average = light_up_left + light_down_left;
	left_intensity_average >>= 1;
 690:	2e 0f       	add	r18, r30
 692:	3f 1f       	adc	r19, r31
 694:	35 95       	asr	r19
 696:	27 95       	ror	r18
 698:	30 93 9d 06 	sts	0x069D, r19	; 0x80069d <left_intensity_average+0x1>
 69c:	20 93 9c 06 	sts	0x069C, r18	; 0x80069c <left_intensity_average>
	
	right_intensity_average = light_up_right + light_down_right;
	right_intensity_average >>= 1;
 6a0:	86 0f       	add	r24, r22
 6a2:	97 1f       	adc	r25, r23
 6a4:	95 95       	asr	r25
 6a6:	87 95       	ror	r24
 6a8:	90 93 a7 06 	sts	0x06A7, r25	; 0x8006a7 <right_intensity_average+0x1>
 6ac:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <right_intensity_average>
	
	hx_set_coordinates(42, 2);
 6b0:	62 e0       	ldi	r22, 0x02	; 2
 6b2:	8a e2       	ldi	r24, 0x2A	; 42
 6b4:	0e 94 c8 01 	call	0x390	; 0x390 <hx_set_coordinates>
	hx_write_char('0' + (up_intensity_average / 10) % 10);
 6b8:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <up_intensity_average>
 6bc:	90 91 ab 06 	lds	r25, 0x06AB	; 0x8006ab <up_intensity_average+0x1>
 6c0:	ca e0       	ldi	r28, 0x0A	; 10
 6c2:	d0 e0       	ldi	r29, 0x00	; 0
 6c4:	be 01       	movw	r22, r28
 6c6:	0e 94 15 04 	call	0x82a	; 0x82a <__divmodhi4>
 6ca:	cb 01       	movw	r24, r22
 6cc:	be 01       	movw	r22, r28
 6ce:	0e 94 15 04 	call	0x82a	; 0x82a <__divmodhi4>
 6d2:	80 5d       	subi	r24, 0xD0	; 208
 6d4:	0e 94 03 02 	call	0x406	; 0x406 <hx_write_char>
	hx_write_char('0' + up_intensity_average % 10);
 6d8:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <up_intensity_average>
 6dc:	90 91 ab 06 	lds	r25, 0x06AB	; 0x8006ab <up_intensity_average+0x1>
 6e0:	be 01       	movw	r22, r28
 6e2:	0e 94 15 04 	call	0x82a	; 0x82a <__divmodhi4>
 6e6:	80 5d       	subi	r24, 0xD0	; 208
 6e8:	0e 94 03 02 	call	0x406	; 0x406 <hx_write_char>
	
	hx_set_coordinates(42, 6);
 6ec:	66 e0       	ldi	r22, 0x06	; 6
 6ee:	8a e2       	ldi	r24, 0x2A	; 42
 6f0:	0e 94 c8 01 	call	0x390	; 0x390 <hx_set_coordinates>
	hx_write_char('0' + (down_intensity_average / 10) % 10);
 6f4:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <__data_end>
 6f8:	90 91 9b 06 	lds	r25, 0x069B	; 0x80069b <__data_end+0x1>
 6fc:	be 01       	movw	r22, r28
 6fe:	0e 94 15 04 	call	0x82a	; 0x82a <__divmodhi4>
 702:	cb 01       	movw	r24, r22
 704:	be 01       	movw	r22, r28
 706:	0e 94 15 04 	call	0x82a	; 0x82a <__divmodhi4>
 70a:	80 5d       	subi	r24, 0xD0	; 208
 70c:	0e 94 03 02 	call	0x406	; 0x406 <hx_write_char>
	hx_write_char('0' + down_intensity_average % 10);
 710:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <__data_end>
 714:	90 91 9b 06 	lds	r25, 0x069B	; 0x80069b <__data_end+0x1>
 718:	be 01       	movw	r22, r28
 71a:	0e 94 15 04 	call	0x82a	; 0x82a <__divmodhi4>
 71e:	80 5d       	subi	r24, 0xD0	; 208
 720:	0e 94 03 02 	call	0x406	; 0x406 <hx_write_char>
	
	hx_set_coordinates(6, 4);
 724:	64 e0       	ldi	r22, 0x04	; 4
 726:	86 e0       	ldi	r24, 0x06	; 6
 728:	0e 94 c8 01 	call	0x390	; 0x390 <hx_set_coordinates>
	hx_write_char('0' + (left_intensity_average / 10) % 10);
 72c:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <left_intensity_average>
 730:	90 91 9d 06 	lds	r25, 0x069D	; 0x80069d <left_intensity_average+0x1>
 734:	be 01       	movw	r22, r28
 736:	0e 94 15 04 	call	0x82a	; 0x82a <__divmodhi4>
 73a:	cb 01       	movw	r24, r22
 73c:	be 01       	movw	r22, r28
 73e:	0e 94 15 04 	call	0x82a	; 0x82a <__divmodhi4>
 742:	80 5d       	subi	r24, 0xD0	; 208
 744:	0e 94 03 02 	call	0x406	; 0x406 <hx_write_char>
	hx_write_char('0' + left_intensity_average % 10);
 748:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <left_intensity_average>
 74c:	90 91 9d 06 	lds	r25, 0x069D	; 0x80069d <left_intensity_average+0x1>
 750:	be 01       	movw	r22, r28
 752:	0e 94 15 04 	call	0x82a	; 0x82a <__divmodhi4>
 756:	80 5d       	subi	r24, 0xD0	; 208
 758:	0e 94 03 02 	call	0x406	; 0x406 <hx_write_char>
	
	hx_set_coordinates(66, 4);
 75c:	64 e0       	ldi	r22, 0x04	; 4
 75e:	82 e4       	ldi	r24, 0x42	; 66
 760:	0e 94 c8 01 	call	0x390	; 0x390 <hx_set_coordinates>
	hx_write_char('0' + (right_intensity_average / 10) % 10);
 764:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <right_intensity_average>
 768:	90 91 a7 06 	lds	r25, 0x06A7	; 0x8006a7 <right_intensity_average+0x1>
 76c:	be 01       	movw	r22, r28
 76e:	0e 94 15 04 	call	0x82a	; 0x82a <__divmodhi4>
 772:	cb 01       	movw	r24, r22
 774:	be 01       	movw	r22, r28
 776:	0e 94 15 04 	call	0x82a	; 0x82a <__divmodhi4>
 77a:	80 5d       	subi	r24, 0xD0	; 208
 77c:	0e 94 03 02 	call	0x406	; 0x406 <hx_write_char>
	hx_write_char('0' + right_intensity_average % 10);
 780:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <right_intensity_average>
 784:	90 91 a7 06 	lds	r25, 0x06A7	; 0x8006a7 <right_intensity_average+0x1>
 788:	be 01       	movw	r22, r28
 78a:	0e 94 15 04 	call	0x82a	; 0x82a <__divmodhi4>
 78e:	80 5d       	subi	r24, 0xD0	; 208
 790:	0e 94 03 02 	call	0x406	; 0x406 <hx_write_char>
	
	up_down_movement_gradient_request = up_intensity_average - down_intensity_average;
 794:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <up_intensity_average>
 798:	90 91 ab 06 	lds	r25, 0x06AB	; 0x8006ab <up_intensity_average+0x1>
 79c:	20 91 9a 06 	lds	r18, 0x069A	; 0x80069a <__data_end>
 7a0:	30 91 9b 06 	lds	r19, 0x069B	; 0x80069b <__data_end+0x1>
 7a4:	82 1b       	sub	r24, r18
 7a6:	93 0b       	sbc	r25, r19
 7a8:	90 93 a3 06 	sts	0x06A3, r25	; 0x8006a3 <up_down_movement_gradient_request+0x1>
 7ac:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <up_down_movement_gradient_request>
	left_right_movement_gradient_request = left_intensity_average - right_intensity_average;
 7b0:	20 91 9c 06 	lds	r18, 0x069C	; 0x80069c <left_intensity_average>
 7b4:	30 91 9d 06 	lds	r19, 0x069D	; 0x80069d <left_intensity_average+0x1>
 7b8:	40 91 a6 06 	lds	r20, 0x06A6	; 0x8006a6 <right_intensity_average>
 7bc:	50 91 a7 06 	lds	r21, 0x06A7	; 0x8006a7 <right_intensity_average+0x1>
 7c0:	24 1b       	sub	r18, r20
 7c2:	35 0b       	sbc	r19, r21
 7c4:	30 93 a5 06 	sts	0x06A5, r19	; 0x8006a5 <left_right_movement_gradient_request+0x1>
 7c8:	20 93 a4 06 	sts	0x06A4, r18	; 0x8006a4 <left_right_movement_gradient_request>
	
	if(abs(up_down_movement_gradient_request) > TRACKING_TOLERANCE)
 7cc:	9c 01       	movw	r18, r24
 7ce:	99 23       	and	r25, r25
 7d0:	24 f4       	brge	.+8      	; 0x7da <track+0x202>
 7d2:	22 27       	eor	r18, r18
 7d4:	33 27       	eor	r19, r19
 7d6:	28 1b       	sub	r18, r24
 7d8:	39 0b       	sbc	r19, r25
 7da:	22 30       	cpi	r18, 0x02	; 2
 7dc:	31 05       	cpc	r19, r1
 7de:	54 f0       	brlt	.+20     	; 0x7f4 <track+0x21c>
	{
		OCR1B -= up_down_movement_gradient_request / 5;
 7e0:	28 b5       	in	r18, 0x28	; 40
 7e2:	39 b5       	in	r19, 0x29	; 41
 7e4:	65 e0       	ldi	r22, 0x05	; 5
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	0e 94 15 04 	call	0x82a	; 0x82a <__divmodhi4>
 7ec:	26 1b       	sub	r18, r22
 7ee:	37 0b       	sbc	r19, r23
 7f0:	39 bd       	out	0x29, r19	; 41
 7f2:	28 bd       	out	0x28, r18	; 40
	}
	
	if(abs(left_right_movement_gradient_request) > TRACKING_TOLERANCE)
 7f4:	80 91 a4 06 	lds	r24, 0x06A4	; 0x8006a4 <left_right_movement_gradient_request>
 7f8:	90 91 a5 06 	lds	r25, 0x06A5	; 0x8006a5 <left_right_movement_gradient_request+0x1>
 7fc:	9c 01       	movw	r18, r24
 7fe:	99 23       	and	r25, r25
 800:	24 f4       	brge	.+8      	; 0x80a <track+0x232>
 802:	22 27       	eor	r18, r18
 804:	33 27       	eor	r19, r19
 806:	28 1b       	sub	r18, r24
 808:	39 0b       	sbc	r19, r25
 80a:	22 30       	cpi	r18, 0x02	; 2
 80c:	31 05       	cpc	r19, r1
 80e:	54 f0       	brlt	.+20     	; 0x824 <track+0x24c>
	{
		OCR1A -= left_right_movement_gradient_request / 5;
 810:	2a b5       	in	r18, 0x2a	; 42
 812:	3b b5       	in	r19, 0x2b	; 43
 814:	65 e0       	ldi	r22, 0x05	; 5
 816:	70 e0       	ldi	r23, 0x00	; 0
 818:	0e 94 15 04 	call	0x82a	; 0x82a <__divmodhi4>
 81c:	26 1b       	sub	r18, r22
 81e:	37 0b       	sbc	r19, r23
 820:	3b bd       	out	0x2b, r19	; 43
 822:	2a bd       	out	0x2a, r18	; 42
	}
 824:	df 91       	pop	r29
 826:	cf 91       	pop	r28
 828:	08 95       	ret

0000082a <__divmodhi4>:
 82a:	97 fb       	bst	r25, 7
 82c:	07 2e       	mov	r0, r23
 82e:	16 f4       	brtc	.+4      	; 0x834 <__divmodhi4+0xa>
 830:	00 94       	com	r0
 832:	07 d0       	rcall	.+14     	; 0x842 <__divmodhi4_neg1>
 834:	77 fd       	sbrc	r23, 7
 836:	09 d0       	rcall	.+18     	; 0x84a <__divmodhi4_neg2>
 838:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__udivmodhi4>
 83c:	07 fc       	sbrc	r0, 7
 83e:	05 d0       	rcall	.+10     	; 0x84a <__divmodhi4_neg2>
 840:	3e f4       	brtc	.+14     	; 0x850 <__divmodhi4_exit>

00000842 <__divmodhi4_neg1>:
 842:	90 95       	com	r25
 844:	81 95       	neg	r24
 846:	9f 4f       	sbci	r25, 0xFF	; 255
 848:	08 95       	ret

0000084a <__divmodhi4_neg2>:
 84a:	70 95       	com	r23
 84c:	61 95       	neg	r22
 84e:	7f 4f       	sbci	r23, 0xFF	; 255

00000850 <__divmodhi4_exit>:
 850:	08 95       	ret

00000852 <__divmodsi4>:
 852:	05 2e       	mov	r0, r21
 854:	97 fb       	bst	r25, 7
 856:	1e f4       	brtc	.+6      	; 0x85e <__divmodsi4+0xc>
 858:	00 94       	com	r0
 85a:	0e 94 40 04 	call	0x880	; 0x880 <__negsi2>
 85e:	57 fd       	sbrc	r21, 7
 860:	07 d0       	rcall	.+14     	; 0x870 <__divmodsi4_neg2>
 862:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__udivmodsi4>
 866:	07 fc       	sbrc	r0, 7
 868:	03 d0       	rcall	.+6      	; 0x870 <__divmodsi4_neg2>
 86a:	4e f4       	brtc	.+18     	; 0x87e <__divmodsi4_exit>
 86c:	0c 94 40 04 	jmp	0x880	; 0x880 <__negsi2>

00000870 <__divmodsi4_neg2>:
 870:	50 95       	com	r21
 872:	40 95       	com	r20
 874:	30 95       	com	r19
 876:	21 95       	neg	r18
 878:	3f 4f       	sbci	r19, 0xFF	; 255
 87a:	4f 4f       	sbci	r20, 0xFF	; 255
 87c:	5f 4f       	sbci	r21, 0xFF	; 255

0000087e <__divmodsi4_exit>:
 87e:	08 95       	ret

00000880 <__negsi2>:
 880:	90 95       	com	r25
 882:	80 95       	com	r24
 884:	70 95       	com	r23
 886:	61 95       	neg	r22
 888:	7f 4f       	sbci	r23, 0xFF	; 255
 88a:	8f 4f       	sbci	r24, 0xFF	; 255
 88c:	9f 4f       	sbci	r25, 0xFF	; 255
 88e:	08 95       	ret

00000890 <__umulhisi3>:
 890:	a2 9f       	mul	r26, r18
 892:	b0 01       	movw	r22, r0
 894:	b3 9f       	mul	r27, r19
 896:	c0 01       	movw	r24, r0
 898:	a3 9f       	mul	r26, r19
 89a:	70 0d       	add	r23, r0
 89c:	81 1d       	adc	r24, r1
 89e:	11 24       	eor	r1, r1
 8a0:	91 1d       	adc	r25, r1
 8a2:	b2 9f       	mul	r27, r18
 8a4:	70 0d       	add	r23, r0
 8a6:	81 1d       	adc	r24, r1
 8a8:	11 24       	eor	r1, r1
 8aa:	91 1d       	adc	r25, r1
 8ac:	08 95       	ret

000008ae <__usmulhisi3>:
 8ae:	0e 94 48 04 	call	0x890	; 0x890 <__umulhisi3>

000008b2 <__usmulhisi3_tail>:
 8b2:	b7 ff       	sbrs	r27, 7
 8b4:	08 95       	ret
 8b6:	82 1b       	sub	r24, r18
 8b8:	93 0b       	sbc	r25, r19
 8ba:	08 95       	ret

000008bc <__udivmodhi4>:
 8bc:	aa 1b       	sub	r26, r26
 8be:	bb 1b       	sub	r27, r27
 8c0:	51 e1       	ldi	r21, 0x11	; 17
 8c2:	07 c0       	rjmp	.+14     	; 0x8d2 <__udivmodhi4_ep>

000008c4 <__udivmodhi4_loop>:
 8c4:	aa 1f       	adc	r26, r26
 8c6:	bb 1f       	adc	r27, r27
 8c8:	a6 17       	cp	r26, r22
 8ca:	b7 07       	cpc	r27, r23
 8cc:	10 f0       	brcs	.+4      	; 0x8d2 <__udivmodhi4_ep>
 8ce:	a6 1b       	sub	r26, r22
 8d0:	b7 0b       	sbc	r27, r23

000008d2 <__udivmodhi4_ep>:
 8d2:	88 1f       	adc	r24, r24
 8d4:	99 1f       	adc	r25, r25
 8d6:	5a 95       	dec	r21
 8d8:	a9 f7       	brne	.-22     	; 0x8c4 <__udivmodhi4_loop>
 8da:	80 95       	com	r24
 8dc:	90 95       	com	r25
 8de:	bc 01       	movw	r22, r24
 8e0:	cd 01       	movw	r24, r26
 8e2:	08 95       	ret

000008e4 <__udivmodsi4>:
 8e4:	a1 e2       	ldi	r26, 0x21	; 33
 8e6:	1a 2e       	mov	r1, r26
 8e8:	aa 1b       	sub	r26, r26
 8ea:	bb 1b       	sub	r27, r27
 8ec:	fd 01       	movw	r30, r26
 8ee:	0d c0       	rjmp	.+26     	; 0x90a <__udivmodsi4_ep>

000008f0 <__udivmodsi4_loop>:
 8f0:	aa 1f       	adc	r26, r26
 8f2:	bb 1f       	adc	r27, r27
 8f4:	ee 1f       	adc	r30, r30
 8f6:	ff 1f       	adc	r31, r31
 8f8:	a2 17       	cp	r26, r18
 8fa:	b3 07       	cpc	r27, r19
 8fc:	e4 07       	cpc	r30, r20
 8fe:	f5 07       	cpc	r31, r21
 900:	20 f0       	brcs	.+8      	; 0x90a <__udivmodsi4_ep>
 902:	a2 1b       	sub	r26, r18
 904:	b3 0b       	sbc	r27, r19
 906:	e4 0b       	sbc	r30, r20
 908:	f5 0b       	sbc	r31, r21

0000090a <__udivmodsi4_ep>:
 90a:	66 1f       	adc	r22, r22
 90c:	77 1f       	adc	r23, r23
 90e:	88 1f       	adc	r24, r24
 910:	99 1f       	adc	r25, r25
 912:	1a 94       	dec	r1
 914:	69 f7       	brne	.-38     	; 0x8f0 <__udivmodsi4_loop>
 916:	60 95       	com	r22
 918:	70 95       	com	r23
 91a:	80 95       	com	r24
 91c:	90 95       	com	r25
 91e:	9b 01       	movw	r18, r22
 920:	ac 01       	movw	r20, r24
 922:	bd 01       	movw	r22, r26
 924:	cf 01       	movw	r24, r30
 926:	08 95       	ret

00000928 <_exit>:
 928:	f8 94       	cli

0000092a <__stop_program>:
 92a:	ff cf       	rjmp	.-2      	; 0x92a <__stop_program>
