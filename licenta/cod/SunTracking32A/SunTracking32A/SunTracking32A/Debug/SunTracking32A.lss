
SunTracking32A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001632  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000069c  00800060  00001632  000016c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  008006fc  008006fc  00001d62  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004310  00000000  00000000  00002070  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001208  00000000  00000000  00006380  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001af6  00000000  00000000  00007588  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c0  00000000  00000000  00009080  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ff  00000000  00000000  00009540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011cc  00000000  00000000  00009e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  0000b00b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	16 e0       	ldi	r17, 0x06	; 6
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b6 e0       	ldi	r27, 0x06	; 6
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 31       	cpi	r26, 0x13	; 19
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 57 07 	call	0xeae	; 0xeae <main>
      8a:	0c 94 17 0b 	jmp	0x162e	; 0x162e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:

#include <avr/io.h>

void ADC_init(void)
{
	DDRC = 0x00;
      92:	14 ba       	out	0x14, r1	; 20
	// AREF = AVcc
	ADMUX = (1<<REFS0);
      94:	80 e4       	ldi	r24, 0x40	; 64
      96:	87 b9       	out	0x07, r24	; 7
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
      98:	87 e8       	ldi	r24, 0x87	; 135
      9a:	86 b9       	out	0x06, r24	; 6
      9c:	08 95       	ret

0000009e <ADC_get_value>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
      9e:	97 b1       	in	r25, 0x07	; 7
      a0:	98 7f       	andi	r25, 0xF8	; 248
      a2:	87 70       	andi	r24, 0x07	; 7
      a4:	89 2b       	or	r24, r25
      a6:	87 b9       	out	0x07, r24	; 7
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
      a8:	36 9a       	sbi	0x06, 6	; 6
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
      aa:	36 99       	sbic	0x06, 6	; 6
      ac:	fe cf       	rjmp	.-4      	; 0xaa <ADC_get_value+0xc>
	
	return (ADC);
      ae:	84 b1       	in	r24, 0x04	; 4
      b0:	95 b1       	in	r25, 0x05	; 5
      b2:	08 95       	ret

000000b4 <get_battery_voltage>:
#include "charge_driver.h"
#include "adc_driver.h"

unsigned int get_battery_voltage(void)
{
	unsigned int battery_voltage = ADC_get_value(BATTERY_ADC_CHANNEL);
      b4:	86 e0       	ldi	r24, 0x06	; 6
      b6:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_get_value>
	battery_voltage = battery_voltage*((long)BATTERY_MAX_MV) / ADC_MAX;
	battery_voltage = battery_voltage*((long) V_BAT_GAIN) / 1000;
      ba:	9c 01       	movw	r18, r24
      bc:	a0 e2       	ldi	r26, 0x20	; 32
      be:	be e4       	ldi	r27, 0x4E	; 78
      c0:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
      c4:	2f ef       	ldi	r18, 0xFF	; 255
      c6:	33 e0       	ldi	r19, 0x03	; 3
      c8:	40 e0       	ldi	r20, 0x00	; 0
      ca:	50 e0       	ldi	r21, 0x00	; 0
      cc:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__divmodsi4>
      d0:	44 27       	eor	r20, r20
      d2:	55 27       	eor	r21, r21
      d4:	af ec       	ldi	r26, 0xCF	; 207
      d6:	b3 e0       	ldi	r27, 0x03	; 3
      d8:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__muluhisi3>
      dc:	28 ee       	ldi	r18, 0xE8	; 232
      de:	33 e0       	ldi	r19, 0x03	; 3
      e0:	40 e0       	ldi	r20, 0x00	; 0
      e2:	50 e0       	ldi	r21, 0x00	; 0
      e4:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__divmodsi4>
	return battery_voltage;
}
      e8:	c9 01       	movw	r24, r18
      ea:	08 95       	ret

000000ec <get_converter_voltage>:

unsigned int get_converter_voltage(void)
{
	unsigned int battery_voltage = ADC_get_value(CONVERTER_ADC_CHANNEL);
      ec:	87 e0       	ldi	r24, 0x07	; 7
      ee:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_get_value>
	battery_voltage = battery_voltage*((long)CONVERTER_MAX_MV)/ADC_MAX;
	battery_voltage = battery_voltage*((long) V_CHR_GAIL) / 1000;
      f2:	9c 01       	movw	r18, r24
      f4:	a0 e2       	ldi	r26, 0x20	; 32
      f6:	be e4       	ldi	r27, 0x4E	; 78
      f8:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
      fc:	2f ef       	ldi	r18, 0xFF	; 255
      fe:	33 e0       	ldi	r19, 0x03	; 3
     100:	40 e0       	ldi	r20, 0x00	; 0
     102:	50 e0       	ldi	r21, 0x00	; 0
     104:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__divmodsi4>
     108:	44 27       	eor	r20, r20
     10a:	55 27       	eor	r21, r21
     10c:	af ec       	ldi	r26, 0xCF	; 207
     10e:	b3 e0       	ldi	r27, 0x03	; 3
     110:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__muluhisi3>
     114:	28 ee       	ldi	r18, 0xE8	; 232
     116:	33 e0       	ldi	r19, 0x03	; 3
     118:	40 e0       	ldi	r20, 0x00	; 0
     11a:	50 e0       	ldi	r21, 0x00	; 0
     11c:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__divmodsi4>
	return battery_voltage;
     120:	c9 01       	movw	r24, r18
     122:	08 95       	ret

00000124 <display_title>:
#include "sg90_driver.h"
#include <stdlib.h>

void display_title(void)
{
	hx_set_coordinates(0, 0);
     124:	60 e0       	ldi	r22, 0x00	; 0
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_string("AutoTracking LDR");
     12c:	80 e6       	ldi	r24, 0x60	; 96
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 54 06 	call	0xca8	; 0xca8 <hx_write_string>
	hx_set_coordinates(0, 1);
     134:	61 e0       	ldi	r22, 0x01	; 1
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_string("  ScorpionIPX");
     13c:	81 e7       	ldi	r24, 0x71	; 113
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0e 94 54 06 	call	0xca8	; 0xca8 <hx_write_string>
     144:	08 95       	ret

00000146 <display_data_menu>:
}

void display_data_menu(void)
{
	hx_set_coordinates(0, 3);
     146:	63 e0       	ldi	r22, 0x03	; 3
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_string("       ||");
     14e:	8f e7       	ldi	r24, 0x7F	; 127
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	0e 94 54 06 	call	0xca8	; 0xca8 <hx_write_string>
	hx_set_coordinates(0, 4);
     156:	64 e0       	ldi	r22, 0x04	; 4
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_string("================");
     15e:	89 e8       	ldi	r24, 0x89	; 137
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0e 94 54 06 	call	0xca8	; 0xca8 <hx_write_string>
	hx_set_coordinates(0, 5);
     166:	65 e0       	ldi	r22, 0x05	; 5
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_string("       ||");
     16e:	8f e7       	ldi	r24, 0x7F	; 127
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	0e 94 54 06 	call	0xca8	; 0xca8 <hx_write_string>
     176:	08 95       	ret

00000178 <display_light_sensor_data>:
}

void display_light_sensor_data(uint8_t sensor, int data)
{
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	eb 01       	movw	r28, r22
	//hx_set_coordinates(60, 3 + sensor);
	hx_set_coordinates(24 + 36 * (sensor & 1), 3 + 2 * (sensor >> 1));
     17e:	68 2f       	mov	r22, r24
     180:	6e 7f       	andi	r22, 0xFE	; 254
     182:	6d 5f       	subi	r22, 0xFD	; 253
     184:	81 70       	andi	r24, 0x01	; 1
     186:	94 e2       	ldi	r25, 0x24	; 36
     188:	89 9f       	mul	r24, r25
     18a:	80 2d       	mov	r24, r0
     18c:	11 24       	eor	r1, r1
     18e:	88 5e       	subi	r24, 0xE8	; 232
     190:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	
	// hx_write_char('0' + ((data / 100) % 10));
	hx_write_char('0' + ((data / 10) % 10));
     194:	2a e0       	ldi	r18, 0x0A	; 10
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	ce 01       	movw	r24, r28
     19a:	b9 01       	movw	r22, r18
     19c:	0e 94 8d 0a 	call	0x151a	; 0x151a <__divmodhi4>
     1a0:	c8 2f       	mov	r28, r24
     1a2:	cb 01       	movw	r24, r22
     1a4:	b9 01       	movw	r22, r18
     1a6:	0e 94 8d 0a 	call	0x151a	; 0x151a <__divmodhi4>
     1aa:	80 5d       	subi	r24, 0xD0	; 208
     1ac:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + (data % 10));
     1b0:	80 e3       	ldi	r24, 0x30	; 48
     1b2:	8c 0f       	add	r24, r28
     1b4:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	
	hx_set_coordinates(18, 7);
     1b8:	67 e0       	ldi	r22, 0x07	; 7
     1ba:	82 e1       	ldi	r24, 0x12	; 18
     1bc:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_char('0' + OCR1A / 100);
     1c0:	2a b5       	in	r18, 0x2a	; 42
     1c2:	3b b5       	in	r19, 0x2b	; 43
     1c4:	36 95       	lsr	r19
     1c6:	27 95       	ror	r18
     1c8:	36 95       	lsr	r19
     1ca:	27 95       	ror	r18
     1cc:	ab e7       	ldi	r26, 0x7B	; 123
     1ce:	b4 e1       	ldi	r27, 0x14	; 20
     1d0:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     1d4:	96 95       	lsr	r25
     1d6:	87 95       	ror	r24
     1d8:	80 5d       	subi	r24, 0xD0	; 208
     1da:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + (OCR1A / 10) % 10);
     1de:	2a b5       	in	r18, 0x2a	; 42
     1e0:	3b b5       	in	r19, 0x2b	; 43
     1e2:	ad ec       	ldi	r26, 0xCD	; 205
     1e4:	bc ec       	ldi	r27, 0xCC	; 204
     1e6:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     1ea:	ac 01       	movw	r20, r24
     1ec:	56 95       	lsr	r21
     1ee:	47 95       	ror	r20
     1f0:	56 95       	lsr	r21
     1f2:	47 95       	ror	r20
     1f4:	56 95       	lsr	r21
     1f6:	47 95       	ror	r20
     1f8:	9a 01       	movw	r18, r20
     1fa:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     1fe:	96 95       	lsr	r25
     200:	87 95       	ror	r24
     202:	96 95       	lsr	r25
     204:	87 95       	ror	r24
     206:	96 95       	lsr	r25
     208:	87 95       	ror	r24
     20a:	9c 01       	movw	r18, r24
     20c:	22 0f       	add	r18, r18
     20e:	33 1f       	adc	r19, r19
     210:	88 0f       	add	r24, r24
     212:	99 1f       	adc	r25, r25
     214:	88 0f       	add	r24, r24
     216:	99 1f       	adc	r25, r25
     218:	88 0f       	add	r24, r24
     21a:	99 1f       	adc	r25, r25
     21c:	82 0f       	add	r24, r18
     21e:	93 1f       	adc	r25, r19
     220:	9a 01       	movw	r18, r20
     222:	28 1b       	sub	r18, r24
     224:	39 0b       	sbc	r19, r25
     226:	c9 01       	movw	r24, r18
     228:	80 5d       	subi	r24, 0xD0	; 208
     22a:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + OCR1A % 10);
     22e:	4a b5       	in	r20, 0x2a	; 42
     230:	5b b5       	in	r21, 0x2b	; 43
     232:	9a 01       	movw	r18, r20
     234:	ad ec       	ldi	r26, 0xCD	; 205
     236:	bc ec       	ldi	r27, 0xCC	; 204
     238:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     23c:	96 95       	lsr	r25
     23e:	87 95       	ror	r24
     240:	96 95       	lsr	r25
     242:	87 95       	ror	r24
     244:	96 95       	lsr	r25
     246:	87 95       	ror	r24
     248:	9c 01       	movw	r18, r24
     24a:	22 0f       	add	r18, r18
     24c:	33 1f       	adc	r19, r19
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	88 0f       	add	r24, r24
     254:	99 1f       	adc	r25, r25
     256:	88 0f       	add	r24, r24
     258:	99 1f       	adc	r25, r25
     25a:	82 0f       	add	r24, r18
     25c:	93 1f       	adc	r25, r19
     25e:	9a 01       	movw	r18, r20
     260:	28 1b       	sub	r18, r24
     262:	39 0b       	sbc	r19, r25
     264:	c9 01       	movw	r24, r18
     266:	80 5d       	subi	r24, 0xD0	; 208
     268:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	
	hx_set_coordinates(66, 7);
     26c:	67 e0       	ldi	r22, 0x07	; 7
     26e:	82 e4       	ldi	r24, 0x42	; 66
     270:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_char('0' + OCR1B / 100);
     274:	28 b5       	in	r18, 0x28	; 40
     276:	39 b5       	in	r19, 0x29	; 41
     278:	36 95       	lsr	r19
     27a:	27 95       	ror	r18
     27c:	36 95       	lsr	r19
     27e:	27 95       	ror	r18
     280:	ab e7       	ldi	r26, 0x7B	; 123
     282:	b4 e1       	ldi	r27, 0x14	; 20
     284:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     288:	96 95       	lsr	r25
     28a:	87 95       	ror	r24
     28c:	80 5d       	subi	r24, 0xD0	; 208
     28e:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + (OCR1B / 10) % 10);
     292:	28 b5       	in	r18, 0x28	; 40
     294:	39 b5       	in	r19, 0x29	; 41
     296:	ad ec       	ldi	r26, 0xCD	; 205
     298:	bc ec       	ldi	r27, 0xCC	; 204
     29a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     29e:	ac 01       	movw	r20, r24
     2a0:	56 95       	lsr	r21
     2a2:	47 95       	ror	r20
     2a4:	56 95       	lsr	r21
     2a6:	47 95       	ror	r20
     2a8:	56 95       	lsr	r21
     2aa:	47 95       	ror	r20
     2ac:	9a 01       	movw	r18, r20
     2ae:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     2b2:	96 95       	lsr	r25
     2b4:	87 95       	ror	r24
     2b6:	96 95       	lsr	r25
     2b8:	87 95       	ror	r24
     2ba:	96 95       	lsr	r25
     2bc:	87 95       	ror	r24
     2be:	9c 01       	movw	r18, r24
     2c0:	22 0f       	add	r18, r18
     2c2:	33 1f       	adc	r19, r19
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	88 0f       	add	r24, r24
     2ca:	99 1f       	adc	r25, r25
     2cc:	88 0f       	add	r24, r24
     2ce:	99 1f       	adc	r25, r25
     2d0:	82 0f       	add	r24, r18
     2d2:	93 1f       	adc	r25, r19
     2d4:	9a 01       	movw	r18, r20
     2d6:	28 1b       	sub	r18, r24
     2d8:	39 0b       	sbc	r19, r25
     2da:	c9 01       	movw	r24, r18
     2dc:	80 5d       	subi	r24, 0xD0	; 208
     2de:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + OCR1B % 10);
     2e2:	48 b5       	in	r20, 0x28	; 40
     2e4:	59 b5       	in	r21, 0x29	; 41
     2e6:	9a 01       	movw	r18, r20
     2e8:	ad ec       	ldi	r26, 0xCD	; 205
     2ea:	bc ec       	ldi	r27, 0xCC	; 204
     2ec:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     2f0:	96 95       	lsr	r25
     2f2:	87 95       	ror	r24
     2f4:	96 95       	lsr	r25
     2f6:	87 95       	ror	r24
     2f8:	96 95       	lsr	r25
     2fa:	87 95       	ror	r24
     2fc:	9c 01       	movw	r18, r24
     2fe:	22 0f       	add	r18, r18
     300:	33 1f       	adc	r19, r19
     302:	88 0f       	add	r24, r24
     304:	99 1f       	adc	r25, r25
     306:	88 0f       	add	r24, r24
     308:	99 1f       	adc	r25, r25
     30a:	88 0f       	add	r24, r24
     30c:	99 1f       	adc	r25, r25
     30e:	82 0f       	add	r24, r18
     310:	93 1f       	adc	r25, r19
     312:	9a 01       	movw	r18, r20
     314:	28 1b       	sub	r18, r24
     316:	39 0b       	sbc	r19, r25
     318:	c9 01       	movw	r24, r18
     31a:	80 5d       	subi	r24, 0xD0	; 208
     31c:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
}
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <display_idle_state_message>:

void display_idle_state_message(void)
{
	hx_set_coordinates(0, 3);
     326:	63 e0       	ldi	r22, 0x03	; 3
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_string("- system is in ");
     32e:	8a e9       	ldi	r24, 0x9A	; 154
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0e 94 54 06 	call	0xca8	; 0xca8 <hx_write_string>
	hx_set_coordinates(0, 4);
     336:	64 e0       	ldi	r22, 0x04	; 4
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_string("IDLE mode");
     33e:	8a ea       	ldi	r24, 0xAA	; 170
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 54 06 	call	0xca8	; 0xca8 <hx_write_string>
	hx_set_coordinates(0, 6);
     346:	66 e0       	ldi	r22, 0x06	; 6
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_string("going to sleep");
     34e:	84 eb       	ldi	r24, 0xB4	; 180
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 54 06 	call	0xca8	; 0xca8 <hx_write_string>
     356:	08 95       	ret

00000358 <display_manual_state_message>:
}


void display_manual_state_message(void)
{
	hx_set_coordinates(0, 3);
     358:	63 e0       	ldi	r22, 0x03	; 3
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_string("- system is in ");
     360:	8a e9       	ldi	r24, 0x9A	; 154
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 54 06 	call	0xca8	; 0xca8 <hx_write_string>
	hx_set_coordinates(0, 4);
     368:	64 e0       	ldi	r22, 0x04	; 4
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_string("MANUAL mode");
     370:	83 ec       	ldi	r24, 0xC3	; 195
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 54 06 	call	0xca8	; 0xca8 <hx_write_string>
	
	hx_set_coordinates(0, 6);
     378:	66 e0       	ldi	r22, 0x06	; 6
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_string("JX:");
     380:	8f ec       	ldi	r24, 0xCF	; 207
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0e 94 54 06 	call	0xca8	; 0xca8 <hx_write_string>
	hx_set_coordinates(54, 6);
     388:	66 e0       	ldi	r22, 0x06	; 6
     38a:	86 e3       	ldi	r24, 0x36	; 54
     38c:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_string("B:");
     390:	83 ed       	ldi	r24, 0xD3	; 211
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 54 06 	call	0xca8	; 0xca8 <hx_write_string>
	
	hx_set_coordinates(0, 7);
     398:	67 e0       	ldi	r22, 0x07	; 7
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_string("JY:");
     3a0:	86 ed       	ldi	r24, 0xD6	; 214
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 54 06 	call	0xca8	; 0xca8 <hx_write_string>
	hx_set_coordinates(54, 7);
     3a8:	67 e0       	ldi	r22, 0x07	; 7
     3aa:	86 e3       	ldi	r24, 0x36	; 54
     3ac:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_string("A:");
     3b0:	8a ed       	ldi	r24, 0xDA	; 218
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0e 94 54 06 	call	0xca8	; 0xca8 <hx_write_string>
     3b8:	08 95       	ret

000003ba <display_joystick_data>:
}

void display_joystick_data(unsigned int x, unsigned int y)
{	 
     3ba:	ef 92       	push	r14
     3bc:	ff 92       	push	r15
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	7c 01       	movw	r14, r24
     3c8:	8b 01       	movw	r16, r22
	hx_set_coordinates(24, 6);
     3ca:	66 e0       	ldi	r22, 0x06	; 6
     3cc:	88 e1       	ldi	r24, 0x18	; 24
     3ce:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	
	hx_write_char('0' + x / 1000);
     3d2:	97 01       	movw	r18, r14
     3d4:	36 95       	lsr	r19
     3d6:	27 95       	ror	r18
     3d8:	36 95       	lsr	r19
     3da:	27 95       	ror	r18
     3dc:	36 95       	lsr	r19
     3de:	27 95       	ror	r18
     3e0:	a5 ec       	ldi	r26, 0xC5	; 197
     3e2:	b0 e2       	ldi	r27, 0x20	; 32
     3e4:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     3e8:	92 95       	swap	r25
     3ea:	82 95       	swap	r24
     3ec:	8f 70       	andi	r24, 0x0F	; 15
     3ee:	89 27       	eor	r24, r25
     3f0:	9f 70       	andi	r25, 0x0F	; 15
     3f2:	89 27       	eor	r24, r25
     3f4:	80 5d       	subi	r24, 0xD0	; 208
     3f6:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + (x / 100) % 10);
     3fa:	97 01       	movw	r18, r14
     3fc:	36 95       	lsr	r19
     3fe:	27 95       	ror	r18
     400:	36 95       	lsr	r19
     402:	27 95       	ror	r18
     404:	ab e7       	ldi	r26, 0x7B	; 123
     406:	b4 e1       	ldi	r27, 0x14	; 20
     408:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     40c:	ac 01       	movw	r20, r24
     40e:	56 95       	lsr	r21
     410:	47 95       	ror	r20
     412:	9a 01       	movw	r18, r20
     414:	ad ec       	ldi	r26, 0xCD	; 205
     416:	bc ec       	ldi	r27, 0xCC	; 204
     418:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     41c:	96 95       	lsr	r25
     41e:	87 95       	ror	r24
     420:	96 95       	lsr	r25
     422:	87 95       	ror	r24
     424:	96 95       	lsr	r25
     426:	87 95       	ror	r24
     428:	9c 01       	movw	r18, r24
     42a:	22 0f       	add	r18, r18
     42c:	33 1f       	adc	r19, r19
     42e:	88 0f       	add	r24, r24
     430:	99 1f       	adc	r25, r25
     432:	88 0f       	add	r24, r24
     434:	99 1f       	adc	r25, r25
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	82 0f       	add	r24, r18
     43c:	93 1f       	adc	r25, r19
     43e:	9a 01       	movw	r18, r20
     440:	28 1b       	sub	r18, r24
     442:	39 0b       	sbc	r19, r25
     444:	c9 01       	movw	r24, r18
     446:	80 5d       	subi	r24, 0xD0	; 208
     448:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + (x / 10) % 10);
     44c:	97 01       	movw	r18, r14
     44e:	ad ec       	ldi	r26, 0xCD	; 205
     450:	bc ec       	ldi	r27, 0xCC	; 204
     452:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     456:	ec 01       	movw	r28, r24
     458:	d6 95       	lsr	r29
     45a:	c7 95       	ror	r28
     45c:	d6 95       	lsr	r29
     45e:	c7 95       	ror	r28
     460:	d6 95       	lsr	r29
     462:	c7 95       	ror	r28
     464:	9e 01       	movw	r18, r28
     466:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     46a:	96 95       	lsr	r25
     46c:	87 95       	ror	r24
     46e:	96 95       	lsr	r25
     470:	87 95       	ror	r24
     472:	96 95       	lsr	r25
     474:	87 95       	ror	r24
     476:	9c 01       	movw	r18, r24
     478:	22 0f       	add	r18, r18
     47a:	33 1f       	adc	r19, r19
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	88 0f       	add	r24, r24
     482:	99 1f       	adc	r25, r25
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	82 0f       	add	r24, r18
     48a:	93 1f       	adc	r25, r19
     48c:	9e 01       	movw	r18, r28
     48e:	28 1b       	sub	r18, r24
     490:	39 0b       	sbc	r19, r25
     492:	c9 01       	movw	r24, r18
     494:	80 5d       	subi	r24, 0xD0	; 208
     496:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + x % 10);
     49a:	ce 01       	movw	r24, r28
     49c:	88 0f       	add	r24, r24
     49e:	99 1f       	adc	r25, r25
     4a0:	cc 0f       	add	r28, r28
     4a2:	dd 1f       	adc	r29, r29
     4a4:	cc 0f       	add	r28, r28
     4a6:	dd 1f       	adc	r29, r29
     4a8:	cc 0f       	add	r28, r28
     4aa:	dd 1f       	adc	r29, r29
     4ac:	c8 0f       	add	r28, r24
     4ae:	d9 1f       	adc	r29, r25
     4b0:	c7 01       	movw	r24, r14
     4b2:	8c 1b       	sub	r24, r28
     4b4:	9d 0b       	sbc	r25, r29
     4b6:	80 5d       	subi	r24, 0xD0	; 208
     4b8:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	
	hx_set_coordinates(72, 6);
     4bc:	66 e0       	ldi	r22, 0x06	; 6
     4be:	88 e4       	ldi	r24, 0x48	; 72
     4c0:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	
	hx_write_char('0' + SG90_ROTATE_DUTY_CYCLE_REGISTER / 1000);
     4c4:	28 b5       	in	r18, 0x28	; 40
     4c6:	39 b5       	in	r19, 0x29	; 41
     4c8:	36 95       	lsr	r19
     4ca:	27 95       	ror	r18
     4cc:	36 95       	lsr	r19
     4ce:	27 95       	ror	r18
     4d0:	36 95       	lsr	r19
     4d2:	27 95       	ror	r18
     4d4:	a5 ec       	ldi	r26, 0xC5	; 197
     4d6:	b0 e2       	ldi	r27, 0x20	; 32
     4d8:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     4dc:	92 95       	swap	r25
     4de:	82 95       	swap	r24
     4e0:	8f 70       	andi	r24, 0x0F	; 15
     4e2:	89 27       	eor	r24, r25
     4e4:	9f 70       	andi	r25, 0x0F	; 15
     4e6:	89 27       	eor	r24, r25
     4e8:	80 5d       	subi	r24, 0xD0	; 208
     4ea:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + (SG90_ROTATE_DUTY_CYCLE_REGISTER / 100) % 10);
     4ee:	28 b5       	in	r18, 0x28	; 40
     4f0:	39 b5       	in	r19, 0x29	; 41
     4f2:	36 95       	lsr	r19
     4f4:	27 95       	ror	r18
     4f6:	36 95       	lsr	r19
     4f8:	27 95       	ror	r18
     4fa:	ab e7       	ldi	r26, 0x7B	; 123
     4fc:	b4 e1       	ldi	r27, 0x14	; 20
     4fe:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     502:	ac 01       	movw	r20, r24
     504:	56 95       	lsr	r21
     506:	47 95       	ror	r20
     508:	9a 01       	movw	r18, r20
     50a:	ad ec       	ldi	r26, 0xCD	; 205
     50c:	bc ec       	ldi	r27, 0xCC	; 204
     50e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     512:	96 95       	lsr	r25
     514:	87 95       	ror	r24
     516:	96 95       	lsr	r25
     518:	87 95       	ror	r24
     51a:	96 95       	lsr	r25
     51c:	87 95       	ror	r24
     51e:	9c 01       	movw	r18, r24
     520:	22 0f       	add	r18, r18
     522:	33 1f       	adc	r19, r19
     524:	88 0f       	add	r24, r24
     526:	99 1f       	adc	r25, r25
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	88 0f       	add	r24, r24
     52e:	99 1f       	adc	r25, r25
     530:	82 0f       	add	r24, r18
     532:	93 1f       	adc	r25, r19
     534:	9a 01       	movw	r18, r20
     536:	28 1b       	sub	r18, r24
     538:	39 0b       	sbc	r19, r25
     53a:	c9 01       	movw	r24, r18
     53c:	80 5d       	subi	r24, 0xD0	; 208
     53e:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + (SG90_ROTATE_DUTY_CYCLE_REGISTER / 10) % 10);
     542:	28 b5       	in	r18, 0x28	; 40
     544:	39 b5       	in	r19, 0x29	; 41
     546:	ad ec       	ldi	r26, 0xCD	; 205
     548:	bc ec       	ldi	r27, 0xCC	; 204
     54a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     54e:	ac 01       	movw	r20, r24
     550:	56 95       	lsr	r21
     552:	47 95       	ror	r20
     554:	56 95       	lsr	r21
     556:	47 95       	ror	r20
     558:	56 95       	lsr	r21
     55a:	47 95       	ror	r20
     55c:	9a 01       	movw	r18, r20
     55e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     562:	96 95       	lsr	r25
     564:	87 95       	ror	r24
     566:	96 95       	lsr	r25
     568:	87 95       	ror	r24
     56a:	96 95       	lsr	r25
     56c:	87 95       	ror	r24
     56e:	9c 01       	movw	r18, r24
     570:	22 0f       	add	r18, r18
     572:	33 1f       	adc	r19, r19
     574:	88 0f       	add	r24, r24
     576:	99 1f       	adc	r25, r25
     578:	88 0f       	add	r24, r24
     57a:	99 1f       	adc	r25, r25
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	82 0f       	add	r24, r18
     582:	93 1f       	adc	r25, r19
     584:	9a 01       	movw	r18, r20
     586:	28 1b       	sub	r18, r24
     588:	39 0b       	sbc	r19, r25
     58a:	c9 01       	movw	r24, r18
     58c:	80 5d       	subi	r24, 0xD0	; 208
     58e:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + SG90_ROTATE_DUTY_CYCLE_REGISTER % 10);
     592:	48 b5       	in	r20, 0x28	; 40
     594:	59 b5       	in	r21, 0x29	; 41
     596:	9a 01       	movw	r18, r20
     598:	ad ec       	ldi	r26, 0xCD	; 205
     59a:	bc ec       	ldi	r27, 0xCC	; 204
     59c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     5a0:	96 95       	lsr	r25
     5a2:	87 95       	ror	r24
     5a4:	96 95       	lsr	r25
     5a6:	87 95       	ror	r24
     5a8:	96 95       	lsr	r25
     5aa:	87 95       	ror	r24
     5ac:	9c 01       	movw	r18, r24
     5ae:	22 0f       	add	r18, r18
     5b0:	33 1f       	adc	r19, r19
     5b2:	88 0f       	add	r24, r24
     5b4:	99 1f       	adc	r25, r25
     5b6:	88 0f       	add	r24, r24
     5b8:	99 1f       	adc	r25, r25
     5ba:	88 0f       	add	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	82 0f       	add	r24, r18
     5c0:	93 1f       	adc	r25, r19
     5c2:	9a 01       	movw	r18, r20
     5c4:	28 1b       	sub	r18, r24
     5c6:	39 0b       	sbc	r19, r25
     5c8:	c9 01       	movw	r24, r18
     5ca:	80 5d       	subi	r24, 0xD0	; 208
     5cc:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	
	hx_set_coordinates(24, 7);
     5d0:	67 e0       	ldi	r22, 0x07	; 7
     5d2:	88 e1       	ldi	r24, 0x18	; 24
     5d4:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	
	hx_write_char('0' + y / 1000);
     5d8:	98 01       	movw	r18, r16
     5da:	36 95       	lsr	r19
     5dc:	27 95       	ror	r18
     5de:	36 95       	lsr	r19
     5e0:	27 95       	ror	r18
     5e2:	36 95       	lsr	r19
     5e4:	27 95       	ror	r18
     5e6:	a5 ec       	ldi	r26, 0xC5	; 197
     5e8:	b0 e2       	ldi	r27, 0x20	; 32
     5ea:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     5ee:	92 95       	swap	r25
     5f0:	82 95       	swap	r24
     5f2:	8f 70       	andi	r24, 0x0F	; 15
     5f4:	89 27       	eor	r24, r25
     5f6:	9f 70       	andi	r25, 0x0F	; 15
     5f8:	89 27       	eor	r24, r25
     5fa:	80 5d       	subi	r24, 0xD0	; 208
     5fc:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + (y / 100) % 10);
     600:	98 01       	movw	r18, r16
     602:	36 95       	lsr	r19
     604:	27 95       	ror	r18
     606:	36 95       	lsr	r19
     608:	27 95       	ror	r18
     60a:	ab e7       	ldi	r26, 0x7B	; 123
     60c:	b4 e1       	ldi	r27, 0x14	; 20
     60e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     612:	ac 01       	movw	r20, r24
     614:	56 95       	lsr	r21
     616:	47 95       	ror	r20
     618:	9a 01       	movw	r18, r20
     61a:	ad ec       	ldi	r26, 0xCD	; 205
     61c:	bc ec       	ldi	r27, 0xCC	; 204
     61e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     622:	96 95       	lsr	r25
     624:	87 95       	ror	r24
     626:	96 95       	lsr	r25
     628:	87 95       	ror	r24
     62a:	96 95       	lsr	r25
     62c:	87 95       	ror	r24
     62e:	9c 01       	movw	r18, r24
     630:	22 0f       	add	r18, r18
     632:	33 1f       	adc	r19, r19
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	82 0f       	add	r24, r18
     642:	93 1f       	adc	r25, r19
     644:	9a 01       	movw	r18, r20
     646:	28 1b       	sub	r18, r24
     648:	39 0b       	sbc	r19, r25
     64a:	c9 01       	movw	r24, r18
     64c:	80 5d       	subi	r24, 0xD0	; 208
     64e:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + (y / 10) % 10);
     652:	98 01       	movw	r18, r16
     654:	ad ec       	ldi	r26, 0xCD	; 205
     656:	bc ec       	ldi	r27, 0xCC	; 204
     658:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     65c:	ec 01       	movw	r28, r24
     65e:	d6 95       	lsr	r29
     660:	c7 95       	ror	r28
     662:	d6 95       	lsr	r29
     664:	c7 95       	ror	r28
     666:	d6 95       	lsr	r29
     668:	c7 95       	ror	r28
     66a:	9e 01       	movw	r18, r28
     66c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     670:	96 95       	lsr	r25
     672:	87 95       	ror	r24
     674:	96 95       	lsr	r25
     676:	87 95       	ror	r24
     678:	96 95       	lsr	r25
     67a:	87 95       	ror	r24
     67c:	9c 01       	movw	r18, r24
     67e:	22 0f       	add	r18, r18
     680:	33 1f       	adc	r19, r19
     682:	88 0f       	add	r24, r24
     684:	99 1f       	adc	r25, r25
     686:	88 0f       	add	r24, r24
     688:	99 1f       	adc	r25, r25
     68a:	88 0f       	add	r24, r24
     68c:	99 1f       	adc	r25, r25
     68e:	82 0f       	add	r24, r18
     690:	93 1f       	adc	r25, r19
     692:	9e 01       	movw	r18, r28
     694:	28 1b       	sub	r18, r24
     696:	39 0b       	sbc	r19, r25
     698:	c9 01       	movw	r24, r18
     69a:	80 5d       	subi	r24, 0xD0	; 208
     69c:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + y % 10);
     6a0:	ce 01       	movw	r24, r28
     6a2:	88 0f       	add	r24, r24
     6a4:	99 1f       	adc	r25, r25
     6a6:	cc 0f       	add	r28, r28
     6a8:	dd 1f       	adc	r29, r29
     6aa:	cc 0f       	add	r28, r28
     6ac:	dd 1f       	adc	r29, r29
     6ae:	cc 0f       	add	r28, r28
     6b0:	dd 1f       	adc	r29, r29
     6b2:	c8 0f       	add	r28, r24
     6b4:	d9 1f       	adc	r29, r25
     6b6:	c8 01       	movw	r24, r16
     6b8:	8c 1b       	sub	r24, r28
     6ba:	9d 0b       	sbc	r25, r29
     6bc:	80 5d       	subi	r24, 0xD0	; 208
     6be:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	
	hx_set_coordinates(72, 7);
     6c2:	67 e0       	ldi	r22, 0x07	; 7
     6c4:	88 e4       	ldi	r24, 0x48	; 72
     6c6:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	
	hx_write_char('0' + SG90_INCLINE_DUTY_CYCLE_REGISTER / 1000);
     6ca:	2a b5       	in	r18, 0x2a	; 42
     6cc:	3b b5       	in	r19, 0x2b	; 43
     6ce:	36 95       	lsr	r19
     6d0:	27 95       	ror	r18
     6d2:	36 95       	lsr	r19
     6d4:	27 95       	ror	r18
     6d6:	36 95       	lsr	r19
     6d8:	27 95       	ror	r18
     6da:	a5 ec       	ldi	r26, 0xC5	; 197
     6dc:	b0 e2       	ldi	r27, 0x20	; 32
     6de:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     6e2:	92 95       	swap	r25
     6e4:	82 95       	swap	r24
     6e6:	8f 70       	andi	r24, 0x0F	; 15
     6e8:	89 27       	eor	r24, r25
     6ea:	9f 70       	andi	r25, 0x0F	; 15
     6ec:	89 27       	eor	r24, r25
     6ee:	80 5d       	subi	r24, 0xD0	; 208
     6f0:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + (SG90_INCLINE_DUTY_CYCLE_REGISTER / 100) % 10);
     6f4:	2a b5       	in	r18, 0x2a	; 42
     6f6:	3b b5       	in	r19, 0x2b	; 43
     6f8:	36 95       	lsr	r19
     6fa:	27 95       	ror	r18
     6fc:	36 95       	lsr	r19
     6fe:	27 95       	ror	r18
     700:	ab e7       	ldi	r26, 0x7B	; 123
     702:	b4 e1       	ldi	r27, 0x14	; 20
     704:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     708:	ac 01       	movw	r20, r24
     70a:	56 95       	lsr	r21
     70c:	47 95       	ror	r20
     70e:	9a 01       	movw	r18, r20
     710:	ad ec       	ldi	r26, 0xCD	; 205
     712:	bc ec       	ldi	r27, 0xCC	; 204
     714:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     718:	96 95       	lsr	r25
     71a:	87 95       	ror	r24
     71c:	96 95       	lsr	r25
     71e:	87 95       	ror	r24
     720:	96 95       	lsr	r25
     722:	87 95       	ror	r24
     724:	9c 01       	movw	r18, r24
     726:	22 0f       	add	r18, r18
     728:	33 1f       	adc	r19, r19
     72a:	88 0f       	add	r24, r24
     72c:	99 1f       	adc	r25, r25
     72e:	88 0f       	add	r24, r24
     730:	99 1f       	adc	r25, r25
     732:	88 0f       	add	r24, r24
     734:	99 1f       	adc	r25, r25
     736:	82 0f       	add	r24, r18
     738:	93 1f       	adc	r25, r19
     73a:	9a 01       	movw	r18, r20
     73c:	28 1b       	sub	r18, r24
     73e:	39 0b       	sbc	r19, r25
     740:	c9 01       	movw	r24, r18
     742:	80 5d       	subi	r24, 0xD0	; 208
     744:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + (SG90_INCLINE_DUTY_CYCLE_REGISTER / 10) % 10);
     748:	2a b5       	in	r18, 0x2a	; 42
     74a:	3b b5       	in	r19, 0x2b	; 43
     74c:	ad ec       	ldi	r26, 0xCD	; 205
     74e:	bc ec       	ldi	r27, 0xCC	; 204
     750:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     754:	ac 01       	movw	r20, r24
     756:	56 95       	lsr	r21
     758:	47 95       	ror	r20
     75a:	56 95       	lsr	r21
     75c:	47 95       	ror	r20
     75e:	56 95       	lsr	r21
     760:	47 95       	ror	r20
     762:	9a 01       	movw	r18, r20
     764:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     768:	96 95       	lsr	r25
     76a:	87 95       	ror	r24
     76c:	96 95       	lsr	r25
     76e:	87 95       	ror	r24
     770:	96 95       	lsr	r25
     772:	87 95       	ror	r24
     774:	9c 01       	movw	r18, r24
     776:	22 0f       	add	r18, r18
     778:	33 1f       	adc	r19, r19
     77a:	88 0f       	add	r24, r24
     77c:	99 1f       	adc	r25, r25
     77e:	88 0f       	add	r24, r24
     780:	99 1f       	adc	r25, r25
     782:	88 0f       	add	r24, r24
     784:	99 1f       	adc	r25, r25
     786:	82 0f       	add	r24, r18
     788:	93 1f       	adc	r25, r19
     78a:	9a 01       	movw	r18, r20
     78c:	28 1b       	sub	r18, r24
     78e:	39 0b       	sbc	r19, r25
     790:	c9 01       	movw	r24, r18
     792:	80 5d       	subi	r24, 0xD0	; 208
     794:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + SG90_INCLINE_DUTY_CYCLE_REGISTER % 10);
     798:	4a b5       	in	r20, 0x2a	; 42
     79a:	5b b5       	in	r21, 0x2b	; 43
     79c:	9a 01       	movw	r18, r20
     79e:	ad ec       	ldi	r26, 0xCD	; 205
     7a0:	bc ec       	ldi	r27, 0xCC	; 204
     7a2:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     7a6:	96 95       	lsr	r25
     7a8:	87 95       	ror	r24
     7aa:	96 95       	lsr	r25
     7ac:	87 95       	ror	r24
     7ae:	96 95       	lsr	r25
     7b0:	87 95       	ror	r24
     7b2:	9c 01       	movw	r18, r24
     7b4:	22 0f       	add	r18, r18
     7b6:	33 1f       	adc	r19, r19
     7b8:	88 0f       	add	r24, r24
     7ba:	99 1f       	adc	r25, r25
     7bc:	88 0f       	add	r24, r24
     7be:	99 1f       	adc	r25, r25
     7c0:	88 0f       	add	r24, r24
     7c2:	99 1f       	adc	r25, r25
     7c4:	82 0f       	add	r24, r18
     7c6:	93 1f       	adc	r25, r19
     7c8:	9a 01       	movw	r18, r20
     7ca:	28 1b       	sub	r18, r24
     7cc:	39 0b       	sbc	r19, r25
     7ce:	c9 01       	movw	r24, r18
     7d0:	80 5d       	subi	r24, 0xD0	; 208
     7d2:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	
	
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	ff 90       	pop	r15
     7e0:	ef 90       	pop	r14
     7e2:	08 95       	ret

000007e4 <display_monitoring_message>:

void display_monitoring_message(void)
{
	hx_set_coordinates(0, 3);
     7e4:	63 e0       	ldi	r22, 0x03	; 3
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_string("- system is in ");
     7ec:	8a e9       	ldi	r24, 0x9A	; 154
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 54 06 	call	0xca8	; 0xca8 <hx_write_string>
	hx_set_coordinates(0, 4);
     7f4:	64 e0       	ldi	r22, 0x04	; 4
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_string("MONITORING mode");
     7fc:	8d ed       	ldi	r24, 0xDD	; 221
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 54 06 	call	0xca8	; 0xca8 <hx_write_string>
	
	hx_set_coordinates(0, 6);
     804:	66 e0       	ldi	r22, 0x06	; 6
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_string("Vbat:");
     80c:	8d ee       	ldi	r24, 0xED	; 237
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 54 06 	call	0xca8	; 0xca8 <hx_write_string>
	hx_set_coordinates(80, 6);
     814:	66 e0       	ldi	r22, 0x06	; 6
     816:	80 e5       	ldi	r24, 0x50	; 80
     818:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_string("V");
     81c:	83 ef       	ldi	r24, 0xF3	; 243
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 54 06 	call	0xca8	; 0xca8 <hx_write_string>
	
	hx_set_coordinates(0, 7);
     824:	67 e0       	ldi	r22, 0x07	; 7
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_string("Vchr:");
     82c:	85 ef       	ldi	r24, 0xF5	; 245
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	0e 94 54 06 	call	0xca8	; 0xca8 <hx_write_string>
	hx_set_coordinates(80, 7);
     834:	67 e0       	ldi	r22, 0x07	; 7
     836:	80 e5       	ldi	r24, 0x50	; 80
     838:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_string("V");
     83c:	83 ef       	ldi	r24, 0xF3	; 243
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	0e 94 54 06 	call	0xca8	; 0xca8 <hx_write_string>
     844:	08 95       	ret

00000846 <display_monitoring_data>:
}

void display_monitoring_data(unsigned int v_bat, unsigned int v_chr)
{
     846:	ef 92       	push	r14
     848:	ff 92       	push	r15
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	7c 01       	movw	r14, r24
     854:	8b 01       	movw	r16, r22
	hx_set_coordinates(42, 6);
     856:	66 e0       	ldi	r22, 0x06	; 6
     858:	8a e2       	ldi	r24, 0x2A	; 42
     85a:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	
	hx_write_char('0' + v_bat / 10000);
     85e:	97 01       	movw	r18, r14
     860:	32 95       	swap	r19
     862:	22 95       	swap	r18
     864:	2f 70       	andi	r18, 0x0F	; 15
     866:	23 27       	eor	r18, r19
     868:	3f 70       	andi	r19, 0x0F	; 15
     86a:	23 27       	eor	r18, r19
     86c:	a7 e4       	ldi	r26, 0x47	; 71
     86e:	b3 e0       	ldi	r27, 0x03	; 3
     870:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     874:	96 95       	lsr	r25
     876:	87 95       	ror	r24
     878:	96 95       	lsr	r25
     87a:	87 95       	ror	r24
     87c:	96 95       	lsr	r25
     87e:	87 95       	ror	r24
     880:	80 5d       	subi	r24, 0xD0	; 208
     882:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + (v_bat / 1000) % 10);
     886:	97 01       	movw	r18, r14
     888:	36 95       	lsr	r19
     88a:	27 95       	ror	r18
     88c:	36 95       	lsr	r19
     88e:	27 95       	ror	r18
     890:	36 95       	lsr	r19
     892:	27 95       	ror	r18
     894:	a5 ec       	ldi	r26, 0xC5	; 197
     896:	b0 e2       	ldi	r27, 0x20	; 32
     898:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     89c:	ac 01       	movw	r20, r24
     89e:	52 95       	swap	r21
     8a0:	42 95       	swap	r20
     8a2:	4f 70       	andi	r20, 0x0F	; 15
     8a4:	45 27       	eor	r20, r21
     8a6:	5f 70       	andi	r21, 0x0F	; 15
     8a8:	45 27       	eor	r20, r21
     8aa:	9a 01       	movw	r18, r20
     8ac:	ad ec       	ldi	r26, 0xCD	; 205
     8ae:	bc ec       	ldi	r27, 0xCC	; 204
     8b0:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     8b4:	96 95       	lsr	r25
     8b6:	87 95       	ror	r24
     8b8:	96 95       	lsr	r25
     8ba:	87 95       	ror	r24
     8bc:	96 95       	lsr	r25
     8be:	87 95       	ror	r24
     8c0:	9c 01       	movw	r18, r24
     8c2:	22 0f       	add	r18, r18
     8c4:	33 1f       	adc	r19, r19
     8c6:	88 0f       	add	r24, r24
     8c8:	99 1f       	adc	r25, r25
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	82 0f       	add	r24, r18
     8d4:	93 1f       	adc	r25, r19
     8d6:	9a 01       	movw	r18, r20
     8d8:	28 1b       	sub	r18, r24
     8da:	39 0b       	sbc	r19, r25
     8dc:	c9 01       	movw	r24, r18
     8de:	80 5d       	subi	r24, 0xD0	; 208
     8e0:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('.');
     8e4:	8e e2       	ldi	r24, 0x2E	; 46
     8e6:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + (v_bat / 100) % 10);
     8ea:	97 01       	movw	r18, r14
     8ec:	36 95       	lsr	r19
     8ee:	27 95       	ror	r18
     8f0:	36 95       	lsr	r19
     8f2:	27 95       	ror	r18
     8f4:	ab e7       	ldi	r26, 0x7B	; 123
     8f6:	b4 e1       	ldi	r27, 0x14	; 20
     8f8:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     8fc:	ac 01       	movw	r20, r24
     8fe:	56 95       	lsr	r21
     900:	47 95       	ror	r20
     902:	9a 01       	movw	r18, r20
     904:	ad ec       	ldi	r26, 0xCD	; 205
     906:	bc ec       	ldi	r27, 0xCC	; 204
     908:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     90c:	96 95       	lsr	r25
     90e:	87 95       	ror	r24
     910:	96 95       	lsr	r25
     912:	87 95       	ror	r24
     914:	96 95       	lsr	r25
     916:	87 95       	ror	r24
     918:	9c 01       	movw	r18, r24
     91a:	22 0f       	add	r18, r18
     91c:	33 1f       	adc	r19, r19
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	88 0f       	add	r24, r24
     924:	99 1f       	adc	r25, r25
     926:	88 0f       	add	r24, r24
     928:	99 1f       	adc	r25, r25
     92a:	82 0f       	add	r24, r18
     92c:	93 1f       	adc	r25, r19
     92e:	9a 01       	movw	r18, r20
     930:	28 1b       	sub	r18, r24
     932:	39 0b       	sbc	r19, r25
     934:	c9 01       	movw	r24, r18
     936:	80 5d       	subi	r24, 0xD0	; 208
     938:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + (v_bat / 10) % 10);
     93c:	97 01       	movw	r18, r14
     93e:	ad ec       	ldi	r26, 0xCD	; 205
     940:	bc ec       	ldi	r27, 0xCC	; 204
     942:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     946:	ec 01       	movw	r28, r24
     948:	d6 95       	lsr	r29
     94a:	c7 95       	ror	r28
     94c:	d6 95       	lsr	r29
     94e:	c7 95       	ror	r28
     950:	d6 95       	lsr	r29
     952:	c7 95       	ror	r28
     954:	9e 01       	movw	r18, r28
     956:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     95a:	96 95       	lsr	r25
     95c:	87 95       	ror	r24
     95e:	96 95       	lsr	r25
     960:	87 95       	ror	r24
     962:	96 95       	lsr	r25
     964:	87 95       	ror	r24
     966:	9c 01       	movw	r18, r24
     968:	22 0f       	add	r18, r18
     96a:	33 1f       	adc	r19, r19
     96c:	88 0f       	add	r24, r24
     96e:	99 1f       	adc	r25, r25
     970:	88 0f       	add	r24, r24
     972:	99 1f       	adc	r25, r25
     974:	88 0f       	add	r24, r24
     976:	99 1f       	adc	r25, r25
     978:	82 0f       	add	r24, r18
     97a:	93 1f       	adc	r25, r19
     97c:	9e 01       	movw	r18, r28
     97e:	28 1b       	sub	r18, r24
     980:	39 0b       	sbc	r19, r25
     982:	c9 01       	movw	r24, r18
     984:	80 5d       	subi	r24, 0xD0	; 208
     986:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + v_bat % 10);
     98a:	ce 01       	movw	r24, r28
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	cc 0f       	add	r28, r28
     992:	dd 1f       	adc	r29, r29
     994:	cc 0f       	add	r28, r28
     996:	dd 1f       	adc	r29, r29
     998:	cc 0f       	add	r28, r28
     99a:	dd 1f       	adc	r29, r29
     99c:	c8 0f       	add	r28, r24
     99e:	d9 1f       	adc	r29, r25
     9a0:	c7 01       	movw	r24, r14
     9a2:	8c 1b       	sub	r24, r28
     9a4:	9d 0b       	sbc	r25, r29
     9a6:	80 5d       	subi	r24, 0xD0	; 208
     9a8:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	
	hx_set_coordinates(42, 7);
     9ac:	67 e0       	ldi	r22, 0x07	; 7
     9ae:	8a e2       	ldi	r24, 0x2A	; 42
     9b0:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	
	hx_write_char('0' + v_chr / 10000);
     9b4:	98 01       	movw	r18, r16
     9b6:	32 95       	swap	r19
     9b8:	22 95       	swap	r18
     9ba:	2f 70       	andi	r18, 0x0F	; 15
     9bc:	23 27       	eor	r18, r19
     9be:	3f 70       	andi	r19, 0x0F	; 15
     9c0:	23 27       	eor	r18, r19
     9c2:	a7 e4       	ldi	r26, 0x47	; 71
     9c4:	b3 e0       	ldi	r27, 0x03	; 3
     9c6:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     9ca:	96 95       	lsr	r25
     9cc:	87 95       	ror	r24
     9ce:	96 95       	lsr	r25
     9d0:	87 95       	ror	r24
     9d2:	96 95       	lsr	r25
     9d4:	87 95       	ror	r24
     9d6:	80 5d       	subi	r24, 0xD0	; 208
     9d8:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + (v_chr / 1000) % 10);
     9dc:	98 01       	movw	r18, r16
     9de:	36 95       	lsr	r19
     9e0:	27 95       	ror	r18
     9e2:	36 95       	lsr	r19
     9e4:	27 95       	ror	r18
     9e6:	36 95       	lsr	r19
     9e8:	27 95       	ror	r18
     9ea:	a5 ec       	ldi	r26, 0xC5	; 197
     9ec:	b0 e2       	ldi	r27, 0x20	; 32
     9ee:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     9f2:	ac 01       	movw	r20, r24
     9f4:	52 95       	swap	r21
     9f6:	42 95       	swap	r20
     9f8:	4f 70       	andi	r20, 0x0F	; 15
     9fa:	45 27       	eor	r20, r21
     9fc:	5f 70       	andi	r21, 0x0F	; 15
     9fe:	45 27       	eor	r20, r21
     a00:	9a 01       	movw	r18, r20
     a02:	ad ec       	ldi	r26, 0xCD	; 205
     a04:	bc ec       	ldi	r27, 0xCC	; 204
     a06:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     a0a:	96 95       	lsr	r25
     a0c:	87 95       	ror	r24
     a0e:	96 95       	lsr	r25
     a10:	87 95       	ror	r24
     a12:	96 95       	lsr	r25
     a14:	87 95       	ror	r24
     a16:	9c 01       	movw	r18, r24
     a18:	22 0f       	add	r18, r18
     a1a:	33 1f       	adc	r19, r19
     a1c:	88 0f       	add	r24, r24
     a1e:	99 1f       	adc	r25, r25
     a20:	88 0f       	add	r24, r24
     a22:	99 1f       	adc	r25, r25
     a24:	88 0f       	add	r24, r24
     a26:	99 1f       	adc	r25, r25
     a28:	82 0f       	add	r24, r18
     a2a:	93 1f       	adc	r25, r19
     a2c:	9a 01       	movw	r18, r20
     a2e:	28 1b       	sub	r18, r24
     a30:	39 0b       	sbc	r19, r25
     a32:	c9 01       	movw	r24, r18
     a34:	80 5d       	subi	r24, 0xD0	; 208
     a36:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('.');
     a3a:	8e e2       	ldi	r24, 0x2E	; 46
     a3c:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + (v_chr / 100) % 10);
     a40:	98 01       	movw	r18, r16
     a42:	36 95       	lsr	r19
     a44:	27 95       	ror	r18
     a46:	36 95       	lsr	r19
     a48:	27 95       	ror	r18
     a4a:	ab e7       	ldi	r26, 0x7B	; 123
     a4c:	b4 e1       	ldi	r27, 0x14	; 20
     a4e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     a52:	ac 01       	movw	r20, r24
     a54:	56 95       	lsr	r21
     a56:	47 95       	ror	r20
     a58:	9a 01       	movw	r18, r20
     a5a:	ad ec       	ldi	r26, 0xCD	; 205
     a5c:	bc ec       	ldi	r27, 0xCC	; 204
     a5e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     a62:	96 95       	lsr	r25
     a64:	87 95       	ror	r24
     a66:	96 95       	lsr	r25
     a68:	87 95       	ror	r24
     a6a:	96 95       	lsr	r25
     a6c:	87 95       	ror	r24
     a6e:	9c 01       	movw	r18, r24
     a70:	22 0f       	add	r18, r18
     a72:	33 1f       	adc	r19, r19
     a74:	88 0f       	add	r24, r24
     a76:	99 1f       	adc	r25, r25
     a78:	88 0f       	add	r24, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	82 0f       	add	r24, r18
     a82:	93 1f       	adc	r25, r19
     a84:	9a 01       	movw	r18, r20
     a86:	28 1b       	sub	r18, r24
     a88:	39 0b       	sbc	r19, r25
     a8a:	c9 01       	movw	r24, r18
     a8c:	80 5d       	subi	r24, 0xD0	; 208
     a8e:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + (v_chr / 10) % 10);
     a92:	98 01       	movw	r18, r16
     a94:	ad ec       	ldi	r26, 0xCD	; 205
     a96:	bc ec       	ldi	r27, 0xCC	; 204
     a98:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     a9c:	ec 01       	movw	r28, r24
     a9e:	d6 95       	lsr	r29
     aa0:	c7 95       	ror	r28
     aa2:	d6 95       	lsr	r29
     aa4:	c7 95       	ror	r28
     aa6:	d6 95       	lsr	r29
     aa8:	c7 95       	ror	r28
     aaa:	9e 01       	movw	r18, r28
     aac:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     ab0:	96 95       	lsr	r25
     ab2:	87 95       	ror	r24
     ab4:	96 95       	lsr	r25
     ab6:	87 95       	ror	r24
     ab8:	96 95       	lsr	r25
     aba:	87 95       	ror	r24
     abc:	9c 01       	movw	r18, r24
     abe:	22 0f       	add	r18, r18
     ac0:	33 1f       	adc	r19, r19
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	88 0f       	add	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	88 0f       	add	r24, r24
     acc:	99 1f       	adc	r25, r25
     ace:	82 0f       	add	r24, r18
     ad0:	93 1f       	adc	r25, r19
     ad2:	9e 01       	movw	r18, r28
     ad4:	28 1b       	sub	r18, r24
     ad6:	39 0b       	sbc	r19, r25
     ad8:	c9 01       	movw	r24, r18
     ada:	80 5d       	subi	r24, 0xD0	; 208
     adc:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + v_chr % 10);
     ae0:	ce 01       	movw	r24, r28
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	cc 0f       	add	r28, r28
     ae8:	dd 1f       	adc	r29, r29
     aea:	cc 0f       	add	r28, r28
     aec:	dd 1f       	adc	r29, r29
     aee:	cc 0f       	add	r28, r28
     af0:	dd 1f       	adc	r29, r29
     af2:	c8 0f       	add	r28, r24
     af4:	d9 1f       	adc	r29, r25
     af6:	c8 01       	movw	r24, r16
     af8:	8c 1b       	sub	r24, r28
     afa:	9d 0b       	sbc	r25, r29
     afc:	80 5d       	subi	r24, 0xD0	; 208
     afe:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	ff 90       	pop	r15
     b0c:	ef 90       	pop	r14
     b0e:	08 95       	ret

00000b10 <hx_send_data>:
}

void hx_send_data(unsigned char _data)
{
	// activate hx1230
	CLEAR_HX_CE;
     b10:	a9 98       	cbi	0x15, 1	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	
	// configure communication for data transfer
	SET_HX_DIN;
     b12:	ae 9a       	sbi	0x15, 6	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	
	// toggle clock
	SET_HX_CLK;
     b14:	af 9a       	sbi	0x15, 7	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	CLEAR_HX_CLK;
     b16:	af 98       	cbi	0x15, 7	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	
	// send the actual data, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
     b18:	27 e0       	ldi	r18, 0x07	; 7
     b1a:	30 e0       	ldi	r19, 0x00	; 0
	{
		// calculate bit to be send
		if(((_data >> bit_position) & 1) == 1)
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	ac 01       	movw	r20, r24
     b20:	02 2e       	mov	r0, r18
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <hx_send_data+0x18>
     b24:	55 95       	asr	r21
     b26:	47 95       	ror	r20
     b28:	0a 94       	dec	r0
     b2a:	e2 f7       	brpl	.-8      	; 0xb24 <hx_send_data+0x14>
     b2c:	40 ff       	sbrs	r20, 0
     b2e:	02 c0       	rjmp	.+4      	; 0xb34 <hx_send_data+0x24>
		{
			SET_HX_DIN;
     b30:	ae 9a       	sbi	0x15, 6	; 21
     b32:	01 c0       	rjmp	.+2      	; 0xb36 <hx_send_data+0x26>
			_delay_us(HX_DELAY_US);
			#endif
		}
		else
		{
			CLEAR_HX_DIN;
     b34:	ae 98       	cbi	0x15, 6	; 21
			_delay_us(HX_DELAY_US);
			#endif
		}
		
		// toggle clock
		SET_HX_CLK;
     b36:	af 9a       	sbi	0x15, 7	; 21
		#ifdef HX_DELAY_ENABLED
		_delay_us(HX_DELAY_US);
		#endif
		CLEAR_HX_CLK;
     b38:	af 98       	cbi	0x15, 7	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	
	// send the actual data, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
     b3a:	21 50       	subi	r18, 0x01	; 1
     b3c:	31 09       	sbc	r19, r1
     b3e:	78 f7       	brcc	.-34     	; 0xb1e <hx_send_data+0xe>
		_delay_us(HX_DELAY_US);
		#endif
	}
	
	// deactivate hx1230
	SET_HX_CE;
     b40:	a9 9a       	sbi	0x15, 1	; 21
     b42:	08 95       	ret

00000b44 <hx_send_command>:
}

void hx_send_command(unsigned char _command)
{
	// activate hx1230
	CLEAR_HX_CE;
     b44:	a9 98       	cbi	0x15, 1	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	
	// configure communication for command transfer
	CLEAR_HX_DIN;
     b46:	ae 98       	cbi	0x15, 6	; 21
	
	// toggle clock
	SET_HX_CLK;
     b48:	af 9a       	sbi	0x15, 7	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	CLEAR_HX_CLK;
     b4a:	af 98       	cbi	0x15, 7	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	
	// send the actual command, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
     b4c:	27 e0       	ldi	r18, 0x07	; 7
     b4e:	30 e0       	ldi	r19, 0x00	; 0
	{
		// calculate bit to be send
		if(((_command >> bit_position) & 1) == 1)
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	ac 01       	movw	r20, r24
     b54:	02 2e       	mov	r0, r18
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <hx_send_command+0x18>
     b58:	55 95       	asr	r21
     b5a:	47 95       	ror	r20
     b5c:	0a 94       	dec	r0
     b5e:	e2 f7       	brpl	.-8      	; 0xb58 <hx_send_command+0x14>
     b60:	40 ff       	sbrs	r20, 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <hx_send_command+0x24>
		{
			SET_HX_DIN;
     b64:	ae 9a       	sbi	0x15, 6	; 21
     b66:	01 c0       	rjmp	.+2      	; 0xb6a <hx_send_command+0x26>
			_delay_us(HX_DELAY_US);
			#endif
		}
		else
		{
			CLEAR_HX_DIN;
     b68:	ae 98       	cbi	0x15, 6	; 21
			_delay_us(HX_DELAY_US);
			#endif
		}
		
		// toggle clock
		SET_HX_CLK;
     b6a:	af 9a       	sbi	0x15, 7	; 21
		#ifdef HX_DELAY_ENABLED
		_delay_us(HX_DELAY_US);
		#endif
		CLEAR_HX_CLK;
     b6c:	af 98       	cbi	0x15, 7	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	
	// send the actual command, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
     b6e:	21 50       	subi	r18, 0x01	; 1
     b70:	31 09       	sbc	r19, r1
     b72:	78 f7       	brcc	.-34     	; 0xb52 <hx_send_command+0xe>
		_delay_us(HX_DELAY_US);
		#endif
	}
	
	// deactivate hx1230
	SET_HX_CE;
     b74:	a9 9a       	sbi	0x15, 1	; 21
     b76:	08 95       	ret

00000b78 <init_hx1230_control>:


void init_hx1230_control(void)
{
	// set required pins as output
	HX1230_DDR |= ((1 << HX_RST) | (1 << HX_CE) | (1 << HX_DIN) | (1 << HX_CLK));
     b78:	84 b3       	in	r24, 0x14	; 20
     b7a:	83 6c       	ori	r24, 0xC3	; 195
     b7c:	84 bb       	out	0x14, r24	; 20
	
	// set idle state
	CLEAR_HX_CLK;
     b7e:	af 98       	cbi	0x15, 7	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	CLEAR_HX_RST;
     b80:	a8 98       	cbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b82:	2f e7       	ldi	r18, 0x7F	; 127
     b84:	88 e3       	ldi	r24, 0x38	; 56
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	21 50       	subi	r18, 0x01	; 1
     b8a:	80 40       	sbci	r24, 0x00	; 0
     b8c:	90 40       	sbci	r25, 0x00	; 0
     b8e:	e1 f7       	brne	.-8      	; 0xb88 <init_hx1230_control+0x10>
     b90:	00 c0       	rjmp	.+0      	; 0xb92 <init_hx1230_control+0x1a>
     b92:	00 00       	nop
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	_delay_ms(50);
	SET_HX_RST;
     b94:	a8 9a       	sbi	0x15, 0	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	CLEAR_HX_CE;
     b96:	a9 98       	cbi	0x15, 1	; 21
     b98:	8f ec       	ldi	r24, 0xCF	; 207
     b9a:	97 e0       	ldi	r25, 0x07	; 7
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	f1 f7       	brne	.-4      	; 0xb9c <init_hx1230_control+0x24>
     ba0:	00 c0       	rjmp	.+0      	; 0xba2 <init_hx1230_control+0x2a>
     ba2:	00 00       	nop
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	_delay_ms(1);
	SET_HX_CE;
     ba4:	a9 9a       	sbi	0x15, 1	; 21
     ba6:	8f ec       	ldi	r24, 0xCF	; 207
     ba8:	97 e0       	ldi	r25, 0x07	; 7
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	f1 f7       	brne	.-4      	; 0xbaa <init_hx1230_control+0x32>
     bae:	00 c0       	rjmp	.+0      	; 0xbb0 <init_hx1230_control+0x38>
     bb0:	00 00       	nop
	_delay_ms(1);
	
	// commands needed to initialize hx1230 display
	// found within a chinese data sheet
	
	hx_send_command(0x2f);
     bb2:	8f e2       	ldi	r24, 0x2F	; 47
     bb4:	0e 94 a2 05 	call	0xb44	; 0xb44 <hx_send_command>
	hx_send_command(0x90);
     bb8:	80 e9       	ldi	r24, 0x90	; 144
     bba:	0e 94 a2 05 	call	0xb44	; 0xb44 <hx_send_command>
	hx_send_command(0xa6);
     bbe:	86 ea       	ldi	r24, 0xA6	; 166
     bc0:	0e 94 a2 05 	call	0xb44	; 0xb44 <hx_send_command>
	hx_send_command(0xa4);
     bc4:	84 ea       	ldi	r24, 0xA4	; 164
     bc6:	0e 94 a2 05 	call	0xb44	; 0xb44 <hx_send_command>
	hx_send_command(0xaf);
     bca:	8f ea       	ldi	r24, 0xAF	; 175
     bcc:	0e 94 a2 05 	call	0xb44	; 0xb44 <hx_send_command>
	
	hx_send_command(0x40);
     bd0:	80 e4       	ldi	r24, 0x40	; 64
     bd2:	0e 94 a2 05 	call	0xb44	; 0xb44 <hx_send_command>
	hx_send_command(0xb0);
     bd6:	80 eb       	ldi	r24, 0xB0	; 176
     bd8:	0e 94 a2 05 	call	0xb44	; 0xb44 <hx_send_command>
	hx_send_command(0x10);
     bdc:	80 e1       	ldi	r24, 0x10	; 16
     bde:	0e 94 a2 05 	call	0xb44	; 0xb44 <hx_send_command>
	hx_send_command(0x00);
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	0e 94 a2 05 	call	0xb44	; 0xb44 <hx_send_command>
     be8:	08 95       	ret

00000bea <hx_set_coordinates>:
	// deactivate hx1230
	SET_HX_CE;
}

void hx_set_coordinates(unsigned char _x, unsigned char _y)
{
     bea:	cf 93       	push	r28
     bec:	c8 2f       	mov	r28, r24
	// 0, 0 is the upper left corner
	
	hx_send_command(0xB0 + _y);
     bee:	80 eb       	ldi	r24, 0xB0	; 176
     bf0:	86 0f       	add	r24, r22
     bf2:	0e 94 a2 05 	call	0xb44	; 0xb44 <hx_send_command>
	hx_send_command(0x10 | ((_x & 0x7F) >> 4));
     bf6:	8c 2f       	mov	r24, r28
     bf8:	8f 77       	andi	r24, 0x7F	; 127
     bfa:	82 95       	swap	r24
     bfc:	8f 70       	andi	r24, 0x0F	; 15
     bfe:	80 61       	ori	r24, 0x10	; 16
     c00:	0e 94 a2 05 	call	0xb44	; 0xb44 <hx_send_command>
	hx_send_command(0x0F & _x);
     c04:	8c 2f       	mov	r24, r28
     c06:	8f 70       	andi	r24, 0x0F	; 15
     c08:	0e 94 a2 05 	call	0xb44	; 0xb44 <hx_send_command>
}
     c0c:	cf 91       	pop	r28
     c0e:	08 95       	ret

00000c10 <hx_clear_screen>:

void hx_clear_screen(void)
{
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
     c1c:	d9 e0       	ldi	r29, 0x09	; 9
     c1e:	07 c0       	rjmp	.+14     	; 0xc2e <hx_clear_screen+0x1e>
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
	{
		for(col = 0; col <= HX_MAX_COL; col ++)
		{
			hx_send_data(0x00);
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	0e 94 88 05 	call	0xb10	; 0xb10 <hx_send_data>
     c26:	c1 50       	subi	r28, 0x01	; 1
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
	{
		for(col = 0; col <= HX_MAX_COL; col ++)
     c28:	d9 f7       	brne	.-10     	; 0xc20 <hx_clear_screen+0x10>
     c2a:	d1 50       	subi	r29, 0x01	; 1
{
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
     c2c:	11 f0       	breq	.+4      	; 0xc32 <hx_clear_screen+0x22>
	hx_send_command(0x10 | ((_x & 0x7F) >> 4));
	hx_send_command(0x0F & _x);
}

void hx_clear_screen(void)
{
     c2e:	c1 e6       	ldi	r28, 0x61	; 97
     c30:	f7 cf       	rjmp	.-18     	; 0xc20 <hx_clear_screen+0x10>
		for(col = 0; col <= HX_MAX_COL; col ++)
		{
			hx_send_data(0x00);
		}
	}
}
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	08 95       	ret

00000c38 <hx_fill_screen>:

void hx_fill_screen(void)
{
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
     c44:	d9 e0       	ldi	r29, 0x09	; 9
     c46:	07 c0       	rjmp	.+14     	; 0xc56 <hx_fill_screen+0x1e>
	
	for(row = 0; row < 9; row ++)
	{
		for(col = 0; col < 96; col ++)
		{
			hx_send_data(0xFF);
     c48:	8f ef       	ldi	r24, 0xFF	; 255
     c4a:	0e 94 88 05 	call	0xb10	; 0xb10 <hx_send_data>
     c4e:	c1 50       	subi	r28, 0x01	; 1
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row < 9; row ++)
	{
		for(col = 0; col < 96; col ++)
     c50:	d9 f7       	brne	.-10     	; 0xc48 <hx_fill_screen+0x10>
     c52:	d1 50       	subi	r29, 0x01	; 1
{
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row < 9; row ++)
     c54:	11 f0       	breq	.+4      	; 0xc5a <hx_fill_screen+0x22>
		}
	}
}

void hx_fill_screen(void)
{
     c56:	c0 e6       	ldi	r28, 0x60	; 96
     c58:	f7 cf       	rjmp	.-18     	; 0xc48 <hx_fill_screen+0x10>
		for(col = 0; col < 96; col ++)
		{
			hx_send_data(0xFF);
		}
	}
}
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	08 95       	ret

00000c60 <hx_write_char>:

void hx_write_char(const unsigned char _character)
{
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	ec 01       	movw	r28, r24
     c6c:	cc 0f       	add	r28, r28
     c6e:	dd 1f       	adc	r29, r29
     c70:	c8 0f       	add	r28, r24
     c72:	d9 1f       	adc	r29, r25
     c74:	cc 0f       	add	r28, r28
     c76:	dd 1f       	adc	r29, r29
     c78:	c5 50       	subi	r28, 0x05	; 5
     c7a:	df 4f       	sbci	r29, 0xFF	; 255
     c7c:	01 96       	adiw	r24, 0x01	; 1
     c7e:	8c 01       	movw	r16, r24
     c80:	00 0f       	add	r16, r16
     c82:	11 1f       	adc	r17, r17
     c84:	80 0f       	add	r24, r16
     c86:	91 1f       	adc	r25, r17
     c88:	8c 01       	movw	r16, r24
     c8a:	00 0f       	add	r16, r16
     c8c:	11 1f       	adc	r17, r17
     c8e:	05 50       	subi	r16, 0x05	; 5
     c90:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(int row_index = 0; row_index < 6; row_index ++)
	{
		hx_send_data(HX_character[_character][row_index]);
     c92:	89 91       	ld	r24, Y+
     c94:	0e 94 88 05 	call	0xb10	; 0xb10 <hx_send_data>
}

void hx_write_char(const unsigned char _character)
{
	
	for(int row_index = 0; row_index < 6; row_index ++)
     c98:	c0 17       	cp	r28, r16
     c9a:	d1 07       	cpc	r29, r17
     c9c:	d1 f7       	brne	.-12     	; 0xc92 <hx_write_char+0x32>
	{
		hx_send_data(HX_character[_character][row_index]);
	}
}
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	08 95       	ret

00000ca8 <hx_write_string>:

void hx_write_string(const char *_characters_array)
{
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
	int string_length = strlen(_characters_array);
     cb0:	fc 01       	movw	r30, r24
     cb2:	01 90       	ld	r0, Z+
     cb4:	00 20       	and	r0, r0
     cb6:	e9 f7       	brne	.-6      	; 0xcb2 <hx_write_string+0xa>
     cb8:	31 97       	sbiw	r30, 0x01	; 1
     cba:	e8 1b       	sub	r30, r24
     cbc:	f9 0b       	sbc	r31, r25
	for(int char_index = 0; char_index < string_length; char_index++)
     cbe:	1e 16       	cp	r1, r30
     cc0:	1f 06       	cpc	r1, r31
     cc2:	54 f4       	brge	.+20     	; 0xcd8 <hx_write_string+0x30>
     cc4:	ec 01       	movw	r28, r24
     cc6:	8c 01       	movw	r16, r24
     cc8:	0e 0f       	add	r16, r30
     cca:	1f 1f       	adc	r17, r31
	{
		hx_write_char((const unsigned char)(_characters_array[char_index]));
     ccc:	89 91       	ld	r24, Y+
     cce:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
}

void hx_write_string(const char *_characters_array)
{
	int string_length = strlen(_characters_array);
	for(int char_index = 0; char_index < string_length; char_index++)
     cd2:	c0 17       	cp	r28, r16
     cd4:	d1 07       	cpc	r29, r17
     cd6:	d1 f7       	brne	.-12     	; 0xccc <hx_write_string+0x24>
	{
		hx_write_char((const unsigned char)(_characters_array[char_index]));
	}
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	08 95       	ret

00000ce2 <manual_control>:
#include "sg90_driver.h"
#include "unipolar_driver.h"
#include "l293d.h"

void manual_control(void)
{
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
	unsigned int x = ADC_get_value(ADC_CHANNEL_X_AXIS);
     cea:	84 e0       	ldi	r24, 0x04	; 4
     cec:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_get_value>
     cf0:	ec 01       	movw	r28, r24
	unsigned int y = ADC_get_value(ADC_CHANNEL_Y_AXIS);
     cf2:	85 e0       	ldi	r24, 0x05	; 5
     cf4:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_get_value>
     cf8:	8c 01       	movw	r16, r24
	
	display_joystick_data(x, y);
     cfa:	bc 01       	movw	r22, r24
     cfc:	ce 01       	movw	r24, r28
     cfe:	0e 94 dd 01 	call	0x3ba	; 0x3ba <display_joystick_data>
	
	if(y > (JOYSTICK_IDLE_VALUE + JOYSTICK_DEAD_ZONE))
     d02:	05 36       	cpi	r16, 0x65	; 101
     d04:	82 e0       	ldi	r24, 0x02	; 2
     d06:	18 07       	cpc	r17, r24
     d08:	28 f0       	brcs	.+10     	; 0xd14 <manual_control+0x32>
	{
		unipolar_01_step_backward(UNIPOLLAR_01_CURRENT_STEP);
     d0a:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <UNIPOLLAR_01_CURRENT_STEP>
     d0e:	0e 94 1e 0a 	call	0x143c	; 0x143c <unipolar_01_step_backward>
     d12:	0a c0       	rjmp	.+20     	; 0xd28 <manual_control+0x46>
	}
	else if(y < (JOYSTICK_IDLE_VALUE - JOYSTICK_DEAD_ZONE))
     d14:	0c 39       	cpi	r16, 0x9C	; 156
     d16:	11 40       	sbci	r17, 0x01	; 1
     d18:	28 f4       	brcc	.+10     	; 0xd24 <manual_control+0x42>
	{
		unipolar_01_step_forward(UNIPOLLAR_01_CURRENT_STEP);
     d1a:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <UNIPOLLAR_01_CURRENT_STEP>
     d1e:	0e 94 ed 09 	call	0x13da	; 0x13da <unipolar_01_step_forward>
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <manual_control+0x46>
	}
	else
	{
		unipolar_01_clear_steps();
     d24:	0e 94 4f 0a 	call	0x149e	; 0x149e <unipolar_01_clear_steps>
	}
	
	if(x > (JOYSTICK_IDLE_VALUE + JOYSTICK_DEAD_ZONE))
     d28:	c5 36       	cpi	r28, 0x65	; 101
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	d8 07       	cpc	r29, r24
     d2e:	18 f0       	brcs	.+6      	; 0xd36 <manual_control+0x54>
	{
		l293d_hb2_rotate_right();
     d30:	0e 94 bf 06 	call	0xd7e	; 0xd7e <l293d_hb2_rotate_right>
     d34:	08 c0       	rjmp	.+16     	; 0xd46 <manual_control+0x64>
	}
	else if(x < (JOYSTICK_IDLE_VALUE - JOYSTICK_DEAD_ZONE))
     d36:	cc 39       	cpi	r28, 0x9C	; 156
     d38:	d1 40       	sbci	r29, 0x01	; 1
     d3a:	18 f4       	brcc	.+6      	; 0xd42 <manual_control+0x60>
	{
		l293d_hb2_rotate_left();
     d3c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <l293d_hb2_rotate_left>
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <manual_control+0x64>
	}
	else
	{
		l293d_hb2_stop();
     d42:	0e 94 c9 06 	call	0xd92	; 0xd92 <l293d_hb2_stop>
     d46:	8f e4       	ldi	r24, 0x4F	; 79
     d48:	93 ec       	ldi	r25, 0xC3	; 195
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <manual_control+0x68>
     d4e:	00 c0       	rjmp	.+0      	; 0xd50 <manual_control+0x6e>
     d50:	00 00       	nop
	}
	
	_delay_ms(25);
}
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	1f 91       	pop	r17
     d58:	0f 91       	pop	r16
     d5a:	08 95       	ret

00000d5c <init_l293d_control>:
#include <util/delay.h>
#include "l293d.h"

void init_l293d_control(void)
{
	L293D_DDR |= ((1 << L293D_HB2_DIRECTION_LEFT) | (1 << L293D_HB2_DIRECTION_RIGHT) | (1 << L293D_HB2_ENABLE));
     d5c:	81 b3       	in	r24, 0x11	; 17
     d5e:	88 63       	ori	r24, 0x38	; 56
     d60:	81 bb       	out	0x11, r24	; 17
	L293D_PORT &= ~((1 << L293D_HB2_DIRECTION_LEFT) | (1 << L293D_HB2_DIRECTION_RIGHT) | (1 << L293D_HB2_ENABLE));
     d62:	82 b3       	in	r24, 0x12	; 18
     d64:	87 7c       	andi	r24, 0xC7	; 199
     d66:	82 bb       	out	0x12, r24	; 18
     d68:	08 95       	ret

00000d6a <l293d_hb2_rotate_left>:
}

void l293d_hb2_rotate_left(void)
{
	L293D_CLEAR_HB2_DIRECTION_RIGHT;
     d6a:	94 98       	cbi	0x12, 4	; 18
     d6c:	8f ec       	ldi	r24, 0xCF	; 207
     d6e:	97 e0       	ldi	r25, 0x07	; 7
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	f1 f7       	brne	.-4      	; 0xd70 <l293d_hb2_rotate_left+0x6>
     d74:	00 c0       	rjmp	.+0      	; 0xd76 <l293d_hb2_rotate_left+0xc>
     d76:	00 00       	nop
	_delay_ms(L293D_DEAD_TIME_MS);
	L293D_SET_HB2_DIRECTION_LEFT;
     d78:	93 9a       	sbi	0x12, 3	; 18
	L293D_SET_HB2_ENABLE;
     d7a:	95 9a       	sbi	0x12, 5	; 18
     d7c:	08 95       	ret

00000d7e <l293d_hb2_rotate_right>:
}

void l293d_hb2_rotate_right(void)
{
	L293D_CLEAR_HB2_DIRECTION_LEFT;
     d7e:	93 98       	cbi	0x12, 3	; 18
     d80:	8f ec       	ldi	r24, 0xCF	; 207
     d82:	97 e0       	ldi	r25, 0x07	; 7
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	f1 f7       	brne	.-4      	; 0xd84 <l293d_hb2_rotate_right+0x6>
     d88:	00 c0       	rjmp	.+0      	; 0xd8a <l293d_hb2_rotate_right+0xc>
     d8a:	00 00       	nop
	_delay_ms(L293D_DEAD_TIME_MS);
	L293D_SET_HB2_DIRECTION_RIGHT;
     d8c:	94 9a       	sbi	0x12, 4	; 18
	L293D_SET_HB2_ENABLE;
     d8e:	95 9a       	sbi	0x12, 5	; 18
     d90:	08 95       	ret

00000d92 <l293d_hb2_stop>:
}

void l293d_hb2_stop(void)
{
	L293D_CLEAR_HB2_ENABLE;
     d92:	95 98       	cbi	0x12, 5	; 18
	L293D_CLEAR_HB2_DIRECTION_LEFT;
     d94:	93 98       	cbi	0x12, 3	; 18
	L293D_CLEAR_HB2_DIRECTION_RIGHT;
     d96:	94 98       	cbi	0x12, 4	; 18
     d98:	08 95       	ret

00000d9a <get_filtered_light_intensity>:
	adc_value = percentage_value(adc_value);
	return adc_value;
}

int get_filtered_light_intensity(uint8_t sensor)
{
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	d8 2f       	mov	r29, r24
     da4:	cf e0       	ldi	r28, 0x0F	; 15
	uint16_t adc_value = 0;
     da6:	00 e0       	ldi	r16, 0x00	; 0
     da8:	10 e0       	ldi	r17, 0x00	; 0
	for(char i = 0; i < FILTLER_RANK; i++)
	{
		adc_value += ADC_get_value(sensor);
     daa:	8d 2f       	mov	r24, r29
     dac:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_get_value>
     db0:	08 0f       	add	r16, r24
     db2:	19 1f       	adc	r17, r25
     db4:	c1 50       	subi	r28, 0x01	; 1
}

int get_filtered_light_intensity(uint8_t sensor)
{
	uint16_t adc_value = 0;
	for(char i = 0; i < FILTLER_RANK; i++)
     db6:	c9 f7       	brne	.-14     	; 0xdaa <get_filtered_light_intensity+0x10>
	return adc_value;
}

int percentage_value(int raw_value)
{
	raw_value = raw_value*((long)100)/1023;
     db8:	98 01       	movw	r18, r16
     dba:	a9 e8       	ldi	r26, 0x89	; 137
     dbc:	b8 e8       	ldi	r27, 0x88	; 136
     dbe:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
     dc2:	dc 01       	movw	r26, r24
     dc4:	b6 95       	lsr	r27
     dc6:	a7 95       	ror	r26
     dc8:	b6 95       	lsr	r27
     dca:	a7 95       	ror	r26
     dcc:	b6 95       	lsr	r27
     dce:	a7 95       	ror	r26
     dd0:	24 e6       	ldi	r18, 0x64	; 100
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	0e 94 cf 0a 	call	0x159e	; 0x159e <__usmulhisi3>
     dd8:	2f ef       	ldi	r18, 0xFF	; 255
     dda:	33 e0       	ldi	r19, 0x03	; 3
     ddc:	40 e0       	ldi	r20, 0x00	; 0
     dde:	50 e0       	ldi	r21, 0x00	; 0
     de0:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__divmodsi4>
		adc_value += ADC_get_value(sensor);
	}
	adc_value /= FILTLER_RANK;
	adc_value = percentage_value(adc_value);
	return adc_value;
}
     de4:	84 e6       	ldi	r24, 0x64	; 100
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	82 1b       	sub	r24, r18
     dea:	93 0b       	sbc	r25, r19
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	1f 91       	pop	r17
     df2:	0f 91       	pop	r16
     df4:	08 95       	ret

00000df6 <uC_init>:
     df6:	2f ef       	ldi	r18, 0xFF	; 255
     df8:	80 e7       	ldi	r24, 0x70	; 112
     dfa:	92 e0       	ldi	r25, 0x02	; 2
     dfc:	21 50       	subi	r18, 0x01	; 1
     dfe:	80 40       	sbci	r24, 0x00	; 0
     e00:	90 40       	sbci	r25, 0x00	; 0
     e02:	e1 f7       	brne	.-8      	; 0xdfc <uC_init+0x6>
     e04:	00 c0       	rjmp	.+0      	; 0xe06 <uC_init+0x10>
     e06:	00 00       	nop
{
	// Wait for system to get fully powered up
	_delay_ms(100);
	
	// initialize required modules
	ADC_init();
     e08:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
     e0c:	2f e7       	ldi	r18, 0x7F	; 127
     e0e:	88 e3       	ldi	r24, 0x38	; 56
     e10:	91 e0       	ldi	r25, 0x01	; 1
     e12:	21 50       	subi	r18, 0x01	; 1
     e14:	80 40       	sbci	r24, 0x00	; 0
     e16:	90 40       	sbci	r25, 0x00	; 0
     e18:	e1 f7       	brne	.-8      	; 0xe12 <uC_init+0x1c>
     e1a:	00 c0       	rjmp	.+0      	; 0xe1c <uC_init+0x26>
     e1c:	00 00       	nop
	_delay_ms(50);
	
	init_user_interface();
     e1e:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <init_user_interface>
     e22:	2f e7       	ldi	r18, 0x7F	; 127
     e24:	88 e3       	ldi	r24, 0x38	; 56
     e26:	91 e0       	ldi	r25, 0x01	; 1
     e28:	21 50       	subi	r18, 0x01	; 1
     e2a:	80 40       	sbci	r24, 0x00	; 0
     e2c:	90 40       	sbci	r25, 0x00	; 0
     e2e:	e1 f7       	brne	.-8      	; 0xe28 <uC_init+0x32>
     e30:	00 c0       	rjmp	.+0      	; 0xe32 <uC_init+0x3c>
     e32:	00 00       	nop
	_delay_ms(50);
	
	init_unipolar_control();
     e34:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <init_unipolar_control>
     e38:	2f e7       	ldi	r18, 0x7F	; 127
     e3a:	88 e3       	ldi	r24, 0x38	; 56
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	21 50       	subi	r18, 0x01	; 1
     e40:	80 40       	sbci	r24, 0x00	; 0
     e42:	90 40       	sbci	r25, 0x00	; 0
     e44:	e1 f7       	brne	.-8      	; 0xe3e <uC_init+0x48>
     e46:	00 c0       	rjmp	.+0      	; 0xe48 <uC_init+0x52>
     e48:	00 00       	nop
	_delay_ms(50);
	
	init_l293d_control();
     e4a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <init_l293d_control>
     e4e:	2f e7       	ldi	r18, 0x7F	; 127
     e50:	88 e3       	ldi	r24, 0x38	; 56
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	21 50       	subi	r18, 0x01	; 1
     e56:	80 40       	sbci	r24, 0x00	; 0
     e58:	90 40       	sbci	r25, 0x00	; 0
     e5a:	e1 f7       	brne	.-8      	; 0xe54 <uC_init+0x5e>
     e5c:	00 c0       	rjmp	.+0      	; 0xe5e <uC_init+0x68>
     e5e:	00 00       	nop
	_delay_ms(50);
	
	init_hx1230_control();
     e60:	0e 94 bc 05 	call	0xb78	; 0xb78 <init_hx1230_control>
     e64:	2f e7       	ldi	r18, 0x7F	; 127
     e66:	88 e3       	ldi	r24, 0x38	; 56
     e68:	91 e0       	ldi	r25, 0x01	; 1
     e6a:	21 50       	subi	r18, 0x01	; 1
     e6c:	80 40       	sbci	r24, 0x00	; 0
     e6e:	90 40       	sbci	r25, 0x00	; 0
     e70:	e1 f7       	brne	.-8      	; 0xe6a <uC_init+0x74>
     e72:	00 c0       	rjmp	.+0      	; 0xe74 <uC_init+0x7e>
     e74:	00 00       	nop
	_delay_ms(50);
	hx_fill_screen();
     e76:	0e 94 1c 06 	call	0xc38	; 0xc38 <hx_fill_screen>
     e7a:	2f ef       	ldi	r18, 0xFF	; 255
     e7c:	84 e3       	ldi	r24, 0x34	; 52
     e7e:	9c e0       	ldi	r25, 0x0C	; 12
     e80:	21 50       	subi	r18, 0x01	; 1
     e82:	80 40       	sbci	r24, 0x00	; 0
     e84:	90 40       	sbci	r25, 0x00	; 0
     e86:	e1 f7       	brne	.-8      	; 0xe80 <uC_init+0x8a>
     e88:	00 c0       	rjmp	.+0      	; 0xe8a <uC_init+0x94>
     e8a:	00 00       	nop
	_delay_ms(500);
	hx_clear_screen();
     e8c:	0e 94 08 06 	call	0xc10	; 0xc10 <hx_clear_screen>
     e90:	2f e7       	ldi	r18, 0x7F	; 127
     e92:	88 e3       	ldi	r24, 0x38	; 56
     e94:	91 e0       	ldi	r25, 0x01	; 1
     e96:	21 50       	subi	r18, 0x01	; 1
     e98:	80 40       	sbci	r24, 0x00	; 0
     e9a:	90 40       	sbci	r25, 0x00	; 0
     e9c:	e1 f7       	brne	.-8      	; 0xe96 <uC_init+0xa0>
     e9e:	00 c0       	rjmp	.+0      	; 0xea0 <uC_init+0xaa>
     ea0:	00 00       	nop
	_delay_ms(50);
	
	display_title();
     ea2:	0e 94 92 00 	call	0x124	; 0x124 <display_title>
	display_idle_state_message();
     ea6:	0e 94 93 01 	call	0x326	; 0x326 <display_idle_state_message>
	
	sei(); // enable global interrupts
     eaa:	78 94       	sei
     eac:	08 95       	ret

00000eae <main>:

void uC_init(void);

int main(void)
{
	STATE = STATE_INIT;
     eae:	10 92 fe 06 	sts	0x06FE, r1	; 0x8006fe <STATE>
	OLD_STATE = STATE_INIT;
     eb2:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <__data_end>
	uC_init();
     eb6:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <uC_init>
	
	STATE = STATE_IDLE;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <STATE>
	while (1)
	{
		/*PORTC = ~PORTC;
		_delay_ms(100);*/
		
		if(STATE_CHANGED)
     ec0:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <STATE>
     ec4:	90 91 fc 06 	lds	r25, 0x06FC	; 0x8006fc <__data_end>
     ec8:	98 17       	cp	r25, r24
     eca:	71 f0       	breq	.+28     	; 0xee8 <main+0x3a>
		{
			OLD_STATE = STATE; // update state
     ecc:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <__data_end>
			go_to_state(STATE);
     ed0:	0e 94 e6 07 	call	0xfcc	; 0xfcc <go_to_state>
     ed4:	2f e7       	ldi	r18, 0x7F	; 127
     ed6:	8a e1       	ldi	r24, 0x1A	; 26
     ed8:	96 e0       	ldi	r25, 0x06	; 6
     eda:	21 50       	subi	r18, 0x01	; 1
     edc:	80 40       	sbci	r24, 0x00	; 0
     ede:	90 40       	sbci	r25, 0x00	; 0
     ee0:	e1 f7       	brne	.-8      	; 0xeda <main+0x2c>
     ee2:	00 c0       	rjmp	.+0      	; 0xee4 <main+0x36>
     ee4:	00 00       	nop
			_delay_ms(250);
			sei(); // enable interrupts
     ee6:	78 94       	sei
		}
		
		switch(OLD_STATE)
     ee8:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <__data_end>
     eec:	83 30       	cpi	r24, 0x03	; 3
     eee:	29 f0       	breq	.+10     	; 0xefa <main+0x4c>
     ef0:	84 30       	cpi	r24, 0x04	; 4
     ef2:	49 f0       	breq	.+18     	; 0xf06 <main+0x58>
     ef4:	82 30       	cpi	r24, 0x02	; 2
     ef6:	21 f7       	brne	.-56     	; 0xec0 <main+0x12>
     ef8:	03 c0       	rjmp	.+6      	; 0xf00 <main+0x52>
		{
			case STATE_TRACKING:
			{
				track();
     efa:	0e 94 12 08 	call	0x1024	; 0x1024 <track>
				break;
     efe:	e0 cf       	rjmp	.-64     	; 0xec0 <main+0x12>
			}
			case STATE_MANUAL:
			{
				manual_control();
     f00:	0e 94 71 06 	call	0xce2	; 0xce2 <manual_control>
				break;
     f04:	dd cf       	rjmp	.-70     	; 0xec0 <main+0x12>
			}
			case STATE_MONITORING:
			{
				monitor();
     f06:	0e 94 86 07 	call	0xf0c	; 0xf0c <monitor>
				break;
     f0a:	da cf       	rjmp	.-76     	; 0xec0 <main+0x12>

00000f0c <monitor>:
#include <util/delay.h>
#include "charge_driver.h"
#include "graphics.h"

void monitor(void)
{
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
	unsigned int battery_voltage = get_battery_voltage();
     f10:	0e 94 5a 00 	call	0xb4	; 0xb4 <get_battery_voltage>
     f14:	ec 01       	movw	r28, r24
	unsigned int converter_voltage = get_converter_voltage();
     f16:	0e 94 76 00 	call	0xec	; 0xec <get_converter_voltage>
	
	display_monitoring_data(battery_voltage, converter_voltage);
     f1a:	bc 01       	movw	r22, r24
     f1c:	ce 01       	movw	r24, r28
     f1e:	0e 94 23 04 	call	0x846	; 0x846 <display_monitoring_data>
     f22:	2f ef       	ldi	r18, 0xFF	; 255
     f24:	80 e7       	ldi	r24, 0x70	; 112
     f26:	92 e0       	ldi	r25, 0x02	; 2
     f28:	21 50       	subi	r18, 0x01	; 1
     f2a:	80 40       	sbci	r24, 0x00	; 0
     f2c:	90 40       	sbci	r25, 0x00	; 0
     f2e:	e1 f7       	brne	.-8      	; 0xf28 <monitor+0x1c>
     f30:	00 c0       	rjmp	.+0      	; 0xf32 <monitor+0x26>
     f32:	00 00       	nop
	_delay_ms(100);
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	08 95       	ret

00000f3a <idle_state_setup>:
     f3a:	2f ef       	ldi	r18, 0xFF	; 255
     f3c:	81 ee       	ldi	r24, 0xE1	; 225
     f3e:	94 e0       	ldi	r25, 0x04	; 4
     f40:	21 50       	subi	r18, 0x01	; 1
     f42:	80 40       	sbci	r24, 0x00	; 0
     f44:	90 40       	sbci	r25, 0x00	; 0
     f46:	e1 f7       	brne	.-8      	; 0xf40 <idle_state_setup+0x6>
     f48:	00 c0       	rjmp	.+0      	; 0xf4a <idle_state_setup+0x10>
     f4a:	00 00       	nop
}

void idle_state_setup(void)
{
	_delay_ms(200);
	hx_clear_screen();
     f4c:	0e 94 08 06 	call	0xc10	; 0xc10 <hx_clear_screen>
	display_title();
     f50:	0e 94 92 00 	call	0x124	; 0x124 <display_title>
	display_idle_state_message();
     f54:	0e 94 93 01 	call	0x326	; 0x326 <display_idle_state_message>
     f58:	08 95       	ret

00000f5a <manual_state_setup>:
     f5a:	2f ef       	ldi	r18, 0xFF	; 255
     f5c:	81 ee       	ldi	r24, 0xE1	; 225
     f5e:	94 e0       	ldi	r25, 0x04	; 4
     f60:	21 50       	subi	r18, 0x01	; 1
     f62:	80 40       	sbci	r24, 0x00	; 0
     f64:	90 40       	sbci	r25, 0x00	; 0
     f66:	e1 f7       	brne	.-8      	; 0xf60 <manual_state_setup+0x6>
     f68:	00 c0       	rjmp	.+0      	; 0xf6a <manual_state_setup+0x10>
     f6a:	00 00       	nop
}

void manual_state_setup(void)
{
	_delay_ms(200);
	hx_clear_screen();
     f6c:	0e 94 08 06 	call	0xc10	; 0xc10 <hx_clear_screen>
	display_title();
     f70:	0e 94 92 00 	call	0x124	; 0x124 <display_title>
	display_manual_state_message();
     f74:	0e 94 ac 01 	call	0x358	; 0x358 <display_manual_state_message>
     f78:	08 95       	ret

00000f7a <tracking_state_setup>:
     f7a:	2f ef       	ldi	r18, 0xFF	; 255
     f7c:	81 ee       	ldi	r24, 0xE1	; 225
     f7e:	94 e0       	ldi	r25, 0x04	; 4
     f80:	21 50       	subi	r18, 0x01	; 1
     f82:	80 40       	sbci	r24, 0x00	; 0
     f84:	90 40       	sbci	r25, 0x00	; 0
     f86:	e1 f7       	brne	.-8      	; 0xf80 <tracking_state_setup+0x6>
     f88:	00 c0       	rjmp	.+0      	; 0xf8a <tracking_state_setup+0x10>
     f8a:	00 00       	nop
}

void tracking_state_setup(void)
{
	_delay_ms(200);
	hx_clear_screen();
     f8c:	0e 94 08 06 	call	0xc10	; 0xc10 <hx_clear_screen>
	display_title();
     f90:	0e 94 92 00 	call	0x124	; 0x124 <display_title>
	display_data_menu();
     f94:	0e 94 a3 00 	call	0x146	; 0x146 <display_data_menu>
     f98:	2f ef       	ldi	r18, 0xFF	; 255
     f9a:	84 e3       	ldi	r24, 0x34	; 52
     f9c:	9c e0       	ldi	r25, 0x0C	; 12
     f9e:	21 50       	subi	r18, 0x01	; 1
     fa0:	80 40       	sbci	r24, 0x00	; 0
     fa2:	90 40       	sbci	r25, 0x00	; 0
     fa4:	e1 f7       	brne	.-8      	; 0xf9e <tracking_state_setup+0x24>
     fa6:	00 c0       	rjmp	.+0      	; 0xfa8 <tracking_state_setup+0x2e>
     fa8:	00 00       	nop
     faa:	08 95       	ret

00000fac <monitoring_state_setup>:
     fac:	2f ef       	ldi	r18, 0xFF	; 255
     fae:	81 ee       	ldi	r24, 0xE1	; 225
     fb0:	94 e0       	ldi	r25, 0x04	; 4
     fb2:	21 50       	subi	r18, 0x01	; 1
     fb4:	80 40       	sbci	r24, 0x00	; 0
     fb6:	90 40       	sbci	r25, 0x00	; 0
     fb8:	e1 f7       	brne	.-8      	; 0xfb2 <monitoring_state_setup+0x6>
     fba:	00 c0       	rjmp	.+0      	; 0xfbc <monitoring_state_setup+0x10>
     fbc:	00 00       	nop
}

void monitoring_state_setup(void)
{
	_delay_ms(200);
	hx_clear_screen();
     fbe:	0e 94 08 06 	call	0xc10	; 0xc10 <hx_clear_screen>
	display_title();
     fc2:	0e 94 92 00 	call	0x124	; 0x124 <display_title>
	display_monitoring_message();
     fc6:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <display_monitoring_message>
     fca:	08 95       	ret

00000fcc <go_to_state>:
#include "hx1230.h"
#include "unipolar_driver.h"
#include "l293d.h"

void go_to_state(unsigned char state)
{
     fcc:	cf 93       	push	r28
     fce:	c8 2f       	mov	r28, r24
	l293d_hb2_stop();  /* make sure motor control is turned off when changing states */
     fd0:	0e 94 c9 06 	call	0xd92	; 0xd92 <l293d_hb2_stop>
	unipolar_01_clear_steps();  /* make sure motor control is turned off when changing states */
     fd4:	0e 94 4f 0a 	call	0x149e	; 0x149e <unipolar_01_clear_steps>
	
	hx_clear_screen();
     fd8:	0e 94 08 06 	call	0xc10	; 0xc10 <hx_clear_screen>
	switch(state)
     fdc:	c2 30       	cpi	r28, 0x02	; 2
     fde:	79 f0       	breq	.+30     	; 0xffe <go_to_state+0x32>
     fe0:	18 f4       	brcc	.+6      	; 0xfe8 <go_to_state+0x1c>
     fe2:	c1 30       	cpi	r28, 0x01	; 1
     fe4:	31 f0       	breq	.+12     	; 0xff2 <go_to_state+0x26>
     fe6:	1c c0       	rjmp	.+56     	; 0x1020 <go_to_state+0x54>
     fe8:	c3 30       	cpi	r28, 0x03	; 3
     fea:	79 f0       	breq	.+30     	; 0x100a <go_to_state+0x3e>
     fec:	c4 30       	cpi	r28, 0x04	; 4
     fee:	99 f0       	breq	.+38     	; 0x1016 <go_to_state+0x4a>
     ff0:	17 c0       	rjmp	.+46     	; 0x1020 <go_to_state+0x54>
	{
		case STATE_IDLE:
		{
			STATE = STATE_IDLE; // update global state
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <STATE>
			idle_state_setup();
     ff8:	0e 94 9d 07 	call	0xf3a	; 0xf3a <idle_state_setup>
			break;
     ffc:	11 c0       	rjmp	.+34     	; 0x1020 <go_to_state+0x54>
		}
		case STATE_MANUAL:
		{
			STATE = STATE_MANUAL; // update global state
     ffe:	82 e0       	ldi	r24, 0x02	; 2
    1000:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <STATE>
			manual_state_setup();
    1004:	0e 94 ad 07 	call	0xf5a	; 0xf5a <manual_state_setup>
			break;
    1008:	0b c0       	rjmp	.+22     	; 0x1020 <go_to_state+0x54>
		}
		case STATE_TRACKING:
		{
			STATE = STATE_TRACKING; // update global state
    100a:	83 e0       	ldi	r24, 0x03	; 3
    100c:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <STATE>
			tracking_state_setup();
    1010:	0e 94 bd 07 	call	0xf7a	; 0xf7a <tracking_state_setup>
			break;
    1014:	05 c0       	rjmp	.+10     	; 0x1020 <go_to_state+0x54>
		}
		case STATE_MONITORING:
		{
			STATE = STATE_MONITORING; // update global state
    1016:	84 e0       	ldi	r24, 0x04	; 4
    1018:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <STATE>
			monitoring_state_setup();
    101c:	0e 94 d6 07 	call	0xfac	; 0xfac <monitoring_state_setup>
			break;
		}
	}
}
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret

00001024 <track>:

int up_down_movement_gradient_request;
int left_right_movement_gradient_request;

void track(void)
{
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
	light_up_left = get_filtered_light_intensity(LS_UP_LEFT);
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	0e 94 cd 06 	call	0xd9a	; 0xd9a <get_filtered_light_intensity>
    102e:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <light_up_left+0x1>
    1032:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <light_up_left>
	light_up_right = get_filtered_light_intensity(LS_UP_RIGHT);
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	0e 94 cd 06 	call	0xd9a	; 0xd9a <get_filtered_light_intensity>
    103c:	90 93 04 07 	sts	0x0704, r25	; 0x800704 <light_up_right+0x1>
    1040:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <light_up_right>
	light_down_left = get_filtered_light_intensity(LS_DOWN_LEFT);
    1044:	82 e0       	ldi	r24, 0x02	; 2
    1046:	0e 94 cd 06 	call	0xd9a	; 0xd9a <get_filtered_light_intensity>
    104a:	90 93 0e 07 	sts	0x070E, r25	; 0x80070e <light_down_left+0x1>
    104e:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <light_down_left>
	light_down_right = get_filtered_light_intensity(LS_DOWN_RIGHT);
    1052:	83 e0       	ldi	r24, 0x03	; 3
    1054:	0e 94 cd 06 	call	0xd9a	; 0xd9a <get_filtered_light_intensity>
    1058:	90 93 06 07 	sts	0x0706, r25	; 0x800706 <light_down_right+0x1>
    105c:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <light_down_right>
	
	display_light_sensor_data(LS_UP_LEFT, light_up_left);
    1060:	60 91 11 07 	lds	r22, 0x0711	; 0x800711 <light_up_left>
    1064:	70 91 12 07 	lds	r23, 0x0712	; 0x800712 <light_up_left+0x1>
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	0e 94 bc 00 	call	0x178	; 0x178 <display_light_sensor_data>
	display_light_sensor_data(LS_UP_RIGHT, light_up_right);
    106e:	60 91 03 07 	lds	r22, 0x0703	; 0x800703 <light_up_right>
    1072:	70 91 04 07 	lds	r23, 0x0704	; 0x800704 <light_up_right+0x1>
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	0e 94 bc 00 	call	0x178	; 0x178 <display_light_sensor_data>
	display_light_sensor_data(LS_DOWN_LEFT, light_down_left);
    107c:	60 91 0d 07 	lds	r22, 0x070D	; 0x80070d <light_down_left>
    1080:	70 91 0e 07 	lds	r23, 0x070E	; 0x80070e <light_down_left+0x1>
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	0e 94 bc 00 	call	0x178	; 0x178 <display_light_sensor_data>
	display_light_sensor_data(LS_DOWN_RIGHT, light_down_right);
    108a:	60 91 05 07 	lds	r22, 0x0705	; 0x800705 <light_down_right>
    108e:	70 91 06 07 	lds	r23, 0x0706	; 0x800706 <light_down_right+0x1>
    1092:	83 e0       	ldi	r24, 0x03	; 3
    1094:	0e 94 bc 00 	call	0x178	; 0x178 <display_light_sensor_data>
	
	up_intensity_average = light_up_left + light_up_right;
    1098:	e0 91 11 07 	lds	r30, 0x0711	; 0x800711 <light_up_left>
    109c:	f0 91 12 07 	lds	r31, 0x0712	; 0x800712 <light_up_left+0x1>
    10a0:	60 91 03 07 	lds	r22, 0x0703	; 0x800703 <light_up_right>
    10a4:	70 91 04 07 	lds	r23, 0x0704	; 0x800704 <light_up_right+0x1>
	up_intensity_average >>= 1;
    10a8:	af 01       	movw	r20, r30
    10aa:	46 0f       	add	r20, r22
    10ac:	57 1f       	adc	r21, r23
    10ae:	55 95       	asr	r21
    10b0:	47 95       	ror	r20
    10b2:	50 93 10 07 	sts	0x0710, r21	; 0x800710 <up_intensity_average+0x1>
    10b6:	40 93 0f 07 	sts	0x070F, r20	; 0x80070f <up_intensity_average>
	
	down_intensity_average = light_down_left + light_down_right;
    10ba:	20 91 0d 07 	lds	r18, 0x070D	; 0x80070d <light_down_left>
    10be:	30 91 0e 07 	lds	r19, 0x070E	; 0x80070e <light_down_left+0x1>
    10c2:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <light_down_right>
    10c6:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <light_down_right+0x1>
	down_intensity_average >>= 1;
    10ca:	a9 01       	movw	r20, r18
    10cc:	48 0f       	add	r20, r24
    10ce:	59 1f       	adc	r21, r25
    10d0:	55 95       	asr	r21
    10d2:	47 95       	ror	r20
    10d4:	50 93 00 07 	sts	0x0700, r21	; 0x800700 <down_intensity_average+0x1>
    10d8:	40 93 ff 06 	sts	0x06FF, r20	; 0x8006ff <down_intensity_average>
	
	left_intensity_average = light_up_left + light_down_left;
	left_intensity_average >>= 1;
    10dc:	2e 0f       	add	r18, r30
    10de:	3f 1f       	adc	r19, r31
    10e0:	35 95       	asr	r19
    10e2:	27 95       	ror	r18
    10e4:	30 93 02 07 	sts	0x0702, r19	; 0x800702 <left_intensity_average+0x1>
    10e8:	20 93 01 07 	sts	0x0701, r18	; 0x800701 <left_intensity_average>
	
	right_intensity_average = light_up_right + light_down_right;
	right_intensity_average >>= 1;
    10ec:	86 0f       	add	r24, r22
    10ee:	97 1f       	adc	r25, r23
    10f0:	95 95       	asr	r25
    10f2:	87 95       	ror	r24
    10f4:	90 93 0c 07 	sts	0x070C, r25	; 0x80070c <right_intensity_average+0x1>
    10f8:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <right_intensity_average>
	
	hx_set_coordinates(42, 2);
    10fc:	62 e0       	ldi	r22, 0x02	; 2
    10fe:	8a e2       	ldi	r24, 0x2A	; 42
    1100:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_char('0' + (up_intensity_average / 10) % 10);
    1104:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <up_intensity_average>
    1108:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <up_intensity_average+0x1>
    110c:	ca e0       	ldi	r28, 0x0A	; 10
    110e:	d0 e0       	ldi	r29, 0x00	; 0
    1110:	be 01       	movw	r22, r28
    1112:	0e 94 8d 0a 	call	0x151a	; 0x151a <__divmodhi4>
    1116:	cb 01       	movw	r24, r22
    1118:	be 01       	movw	r22, r28
    111a:	0e 94 8d 0a 	call	0x151a	; 0x151a <__divmodhi4>
    111e:	80 5d       	subi	r24, 0xD0	; 208
    1120:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + up_intensity_average % 10);
    1124:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <up_intensity_average>
    1128:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <up_intensity_average+0x1>
    112c:	be 01       	movw	r22, r28
    112e:	0e 94 8d 0a 	call	0x151a	; 0x151a <__divmodhi4>
    1132:	80 5d       	subi	r24, 0xD0	; 208
    1134:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	
	hx_set_coordinates(42, 6);
    1138:	66 e0       	ldi	r22, 0x06	; 6
    113a:	8a e2       	ldi	r24, 0x2A	; 42
    113c:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_char('0' + (down_intensity_average / 10) % 10);
    1140:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <down_intensity_average>
    1144:	90 91 00 07 	lds	r25, 0x0700	; 0x800700 <down_intensity_average+0x1>
    1148:	be 01       	movw	r22, r28
    114a:	0e 94 8d 0a 	call	0x151a	; 0x151a <__divmodhi4>
    114e:	cb 01       	movw	r24, r22
    1150:	be 01       	movw	r22, r28
    1152:	0e 94 8d 0a 	call	0x151a	; 0x151a <__divmodhi4>
    1156:	80 5d       	subi	r24, 0xD0	; 208
    1158:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + down_intensity_average % 10);
    115c:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <down_intensity_average>
    1160:	90 91 00 07 	lds	r25, 0x0700	; 0x800700 <down_intensity_average+0x1>
    1164:	be 01       	movw	r22, r28
    1166:	0e 94 8d 0a 	call	0x151a	; 0x151a <__divmodhi4>
    116a:	80 5d       	subi	r24, 0xD0	; 208
    116c:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	
	hx_set_coordinates(6, 4);
    1170:	64 e0       	ldi	r22, 0x04	; 4
    1172:	86 e0       	ldi	r24, 0x06	; 6
    1174:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_char('0' + (left_intensity_average / 10) % 10);
    1178:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <left_intensity_average>
    117c:	90 91 02 07 	lds	r25, 0x0702	; 0x800702 <left_intensity_average+0x1>
    1180:	be 01       	movw	r22, r28
    1182:	0e 94 8d 0a 	call	0x151a	; 0x151a <__divmodhi4>
    1186:	cb 01       	movw	r24, r22
    1188:	be 01       	movw	r22, r28
    118a:	0e 94 8d 0a 	call	0x151a	; 0x151a <__divmodhi4>
    118e:	80 5d       	subi	r24, 0xD0	; 208
    1190:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + left_intensity_average % 10);
    1194:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <left_intensity_average>
    1198:	90 91 02 07 	lds	r25, 0x0702	; 0x800702 <left_intensity_average+0x1>
    119c:	be 01       	movw	r22, r28
    119e:	0e 94 8d 0a 	call	0x151a	; 0x151a <__divmodhi4>
    11a2:	80 5d       	subi	r24, 0xD0	; 208
    11a4:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	
	hx_set_coordinates(78, 4);
    11a8:	64 e0       	ldi	r22, 0x04	; 4
    11aa:	8e e4       	ldi	r24, 0x4E	; 78
    11ac:	0e 94 f5 05 	call	0xbea	; 0xbea <hx_set_coordinates>
	hx_write_char('0' + (right_intensity_average / 10) % 10);
    11b0:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <right_intensity_average>
    11b4:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <right_intensity_average+0x1>
    11b8:	be 01       	movw	r22, r28
    11ba:	0e 94 8d 0a 	call	0x151a	; 0x151a <__divmodhi4>
    11be:	cb 01       	movw	r24, r22
    11c0:	be 01       	movw	r22, r28
    11c2:	0e 94 8d 0a 	call	0x151a	; 0x151a <__divmodhi4>
    11c6:	80 5d       	subi	r24, 0xD0	; 208
    11c8:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	hx_write_char('0' + right_intensity_average % 10);
    11cc:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <right_intensity_average>
    11d0:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <right_intensity_average+0x1>
    11d4:	be 01       	movw	r22, r28
    11d6:	0e 94 8d 0a 	call	0x151a	; 0x151a <__divmodhi4>
    11da:	80 5d       	subi	r24, 0xD0	; 208
    11dc:	0e 94 30 06 	call	0xc60	; 0xc60 <hx_write_char>
	
	up_down_movement_gradient_request = up_intensity_average - down_intensity_average;
    11e0:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <up_intensity_average>
    11e4:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <up_intensity_average+0x1>
    11e8:	20 91 ff 06 	lds	r18, 0x06FF	; 0x8006ff <down_intensity_average>
    11ec:	30 91 00 07 	lds	r19, 0x0700	; 0x800700 <down_intensity_average+0x1>
    11f0:	82 1b       	sub	r24, r18
    11f2:	93 0b       	sbc	r25, r19
    11f4:	90 93 08 07 	sts	0x0708, r25	; 0x800708 <up_down_movement_gradient_request+0x1>
    11f8:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <up_down_movement_gradient_request>
	left_right_movement_gradient_request = left_intensity_average - right_intensity_average;
    11fc:	20 91 01 07 	lds	r18, 0x0701	; 0x800701 <left_intensity_average>
    1200:	30 91 02 07 	lds	r19, 0x0702	; 0x800702 <left_intensity_average+0x1>
    1204:	40 91 0b 07 	lds	r20, 0x070B	; 0x80070b <right_intensity_average>
    1208:	50 91 0c 07 	lds	r21, 0x070C	; 0x80070c <right_intensity_average+0x1>
    120c:	24 1b       	sub	r18, r20
    120e:	35 0b       	sbc	r19, r21
    1210:	30 93 0a 07 	sts	0x070A, r19	; 0x80070a <left_right_movement_gradient_request+0x1>
    1214:	20 93 09 07 	sts	0x0709, r18	; 0x800709 <left_right_movement_gradient_request>
	
	if(abs(up_down_movement_gradient_request) > TRACKING_TOLERANCE)
    1218:	9c 01       	movw	r18, r24
    121a:	99 23       	and	r25, r25
    121c:	24 f4       	brge	.+8      	; 0x1226 <track+0x202>
    121e:	22 27       	eor	r18, r18
    1220:	33 27       	eor	r19, r19
    1222:	28 1b       	sub	r18, r24
    1224:	39 0b       	sbc	r19, r25
    1226:	23 30       	cpi	r18, 0x03	; 3
    1228:	31 05       	cpc	r19, r1
    122a:	84 f0       	brlt	.+32     	; 0x124c <track+0x228>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER -= up_down_movement_gradient_request / 4;
    122c:	4a b5       	in	r20, 0x2a	; 42
    122e:	5b b5       	in	r21, 0x2b	; 43
    1230:	9c 01       	movw	r18, r24
    1232:	99 23       	and	r25, r25
    1234:	14 f4       	brge	.+4      	; 0x123a <track+0x216>
    1236:	2d 5f       	subi	r18, 0xFD	; 253
    1238:	3f 4f       	sbci	r19, 0xFF	; 255
    123a:	35 95       	asr	r19
    123c:	27 95       	ror	r18
    123e:	35 95       	asr	r19
    1240:	27 95       	ror	r18
    1242:	ca 01       	movw	r24, r20
    1244:	82 1b       	sub	r24, r18
    1246:	93 0b       	sbc	r25, r19
    1248:	9b bd       	out	0x2b, r25	; 43
    124a:	8a bd       	out	0x2a, r24	; 42
	}
	
	if(abs(left_right_movement_gradient_request) > TRACKING_TOLERANCE)
    124c:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <left_right_movement_gradient_request>
    1250:	90 91 0a 07 	lds	r25, 0x070A	; 0x80070a <left_right_movement_gradient_request+0x1>
    1254:	9c 01       	movw	r18, r24
    1256:	99 23       	and	r25, r25
    1258:	24 f4       	brge	.+8      	; 0x1262 <track+0x23e>
    125a:	22 27       	eor	r18, r18
    125c:	33 27       	eor	r19, r19
    125e:	28 1b       	sub	r18, r24
    1260:	39 0b       	sbc	r19, r25
    1262:	23 30       	cpi	r18, 0x03	; 3
    1264:	31 05       	cpc	r19, r1
    1266:	84 f0       	brlt	.+32     	; 0x1288 <track+0x264>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER -= left_right_movement_gradient_request / 4;
    1268:	48 b5       	in	r20, 0x28	; 40
    126a:	59 b5       	in	r21, 0x29	; 41
    126c:	9c 01       	movw	r18, r24
    126e:	99 23       	and	r25, r25
    1270:	14 f4       	brge	.+4      	; 0x1276 <track+0x252>
    1272:	2d 5f       	subi	r18, 0xFD	; 253
    1274:	3f 4f       	sbci	r19, 0xFF	; 255
    1276:	35 95       	asr	r19
    1278:	27 95       	ror	r18
    127a:	35 95       	asr	r19
    127c:	27 95       	ror	r18
    127e:	ca 01       	movw	r24, r20
    1280:	82 1b       	sub	r24, r18
    1282:	93 0b       	sbc	r25, r19
    1284:	99 bd       	out	0x29, r25	; 41
    1286:	88 bd       	out	0x28, r24	; 40
	}
	if(SG90_INCLINE_DUTY_CYCLE_REGISTER > SG90_UPPER_INCLINE_LIMIT)
    1288:	4a b5       	in	r20, 0x2a	; 42
    128a:	5b b5       	in	r21, 0x2b	; 43
    128c:	86 b5       	in	r24, 0x26	; 38
    128e:	97 b5       	in	r25, 0x27	; 39
    1290:	9c 01       	movw	r18, r24
    1292:	22 0f       	add	r18, r18
    1294:	33 1f       	adc	r19, r19
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	28 0f       	add	r18, r24
    12a4:	39 1f       	adc	r19, r25
    12a6:	a1 e6       	ldi	r26, 0x61	; 97
    12a8:	b6 ef       	ldi	r27, 0xF6	; 246
    12aa:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
    12ae:	88 0f       	add	r24, r24
    12b0:	89 2f       	mov	r24, r25
    12b2:	88 1f       	adc	r24, r24
    12b4:	99 0b       	sbc	r25, r25
    12b6:	91 95       	neg	r25
    12b8:	88 97       	sbiw	r24, 0x28	; 40
    12ba:	84 17       	cp	r24, r20
    12bc:	95 07       	cpc	r25, r21
    12be:	b8 f4       	brcc	.+46     	; 0x12ee <track+0x2ca>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_UPPER_INCLINE_LIMIT;
    12c0:	86 b5       	in	r24, 0x26	; 38
    12c2:	97 b5       	in	r25, 0x27	; 39
    12c4:	9c 01       	movw	r18, r24
    12c6:	22 0f       	add	r18, r18
    12c8:	33 1f       	adc	r19, r19
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	28 0f       	add	r18, r24
    12d8:	39 1f       	adc	r19, r25
    12da:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
    12de:	88 0f       	add	r24, r24
    12e0:	89 2f       	mov	r24, r25
    12e2:	88 1f       	adc	r24, r24
    12e4:	99 0b       	sbc	r25, r25
    12e6:	91 95       	neg	r25
    12e8:	88 97       	sbiw	r24, 0x28	; 40
    12ea:	9b bd       	out	0x2b, r25	; 43
    12ec:	8a bd       	out	0x2a, r24	; 42
	}
	if(SG90_INCLINE_DUTY_CYCLE_REGISTER < SG90_INCLINE_POS_0)
    12ee:	4a b5       	in	r20, 0x2a	; 42
    12f0:	5b b5       	in	r21, 0x2b	; 43
    12f2:	26 b5       	in	r18, 0x26	; 38
    12f4:	37 b5       	in	r19, 0x27	; 39
    12f6:	ad ec       	ldi	r26, 0xCD	; 205
    12f8:	bc ec       	ldi	r27, 0xCC	; 204
    12fa:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
    12fe:	92 95       	swap	r25
    1300:	82 95       	swap	r24
    1302:	8f 70       	andi	r24, 0x0F	; 15
    1304:	89 27       	eor	r24, r25
    1306:	9f 70       	andi	r25, 0x0F	; 15
    1308:	89 27       	eor	r24, r25
    130a:	81 54       	subi	r24, 0x41	; 65
    130c:	91 09       	sbc	r25, r1
    130e:	48 17       	cp	r20, r24
    1310:	59 07       	cpc	r21, r25
    1312:	70 f4       	brcc	.+28     	; 0x1330 <track+0x30c>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_INCLINE_POS_0;
    1314:	26 b5       	in	r18, 0x26	; 38
    1316:	37 b5       	in	r19, 0x27	; 39
    1318:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
    131c:	92 95       	swap	r25
    131e:	82 95       	swap	r24
    1320:	8f 70       	andi	r24, 0x0F	; 15
    1322:	89 27       	eor	r24, r25
    1324:	9f 70       	andi	r25, 0x0F	; 15
    1326:	89 27       	eor	r24, r25
    1328:	81 54       	subi	r24, 0x41	; 65
    132a:	91 09       	sbc	r25, r1
    132c:	9b bd       	out	0x2b, r25	; 43
    132e:	8a bd       	out	0x2a, r24	; 42
	}
	if(SG90_ROTATE_DUTY_CYCLE_REGISTER > SG90_ROTATE_POS_180)
    1330:	48 b5       	in	r20, 0x28	; 40
    1332:	59 b5       	in	r21, 0x29	; 41
    1334:	26 b5       	in	r18, 0x26	; 38
    1336:	37 b5       	in	r19, 0x27	; 39
    1338:	ad ec       	ldi	r26, 0xCD	; 205
    133a:	bc ec       	ldi	r27, 0xCC	; 204
    133c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
    1340:	96 95       	lsr	r25
    1342:	87 95       	ror	r24
    1344:	96 95       	lsr	r25
    1346:	87 95       	ror	r24
    1348:	96 95       	lsr	r25
    134a:	87 95       	ror	r24
    134c:	05 97       	sbiw	r24, 0x05	; 5
    134e:	84 17       	cp	r24, r20
    1350:	95 07       	cpc	r25, r21
    1352:	68 f4       	brcc	.+26     	; 0x136e <track+0x34a>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_POS_180;
    1354:	26 b5       	in	r18, 0x26	; 38
    1356:	37 b5       	in	r19, 0x27	; 39
    1358:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
    135c:	96 95       	lsr	r25
    135e:	87 95       	ror	r24
    1360:	96 95       	lsr	r25
    1362:	87 95       	ror	r24
    1364:	96 95       	lsr	r25
    1366:	87 95       	ror	r24
    1368:	05 97       	sbiw	r24, 0x05	; 5
    136a:	99 bd       	out	0x29, r25	; 41
    136c:	88 bd       	out	0x28, r24	; 40
	}
	if(SG90_ROTATE_DUTY_CYCLE_REGISTER < SG90_ROTATE_POS_0)
    136e:	48 b5       	in	r20, 0x28	; 40
    1370:	59 b5       	in	r21, 0x29	; 41
    1372:	26 b5       	in	r18, 0x26	; 38
    1374:	37 b5       	in	r19, 0x27	; 39
    1376:	ad ec       	ldi	r26, 0xCD	; 205
    1378:	bc ec       	ldi	r27, 0xCC	; 204
    137a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
    137e:	92 95       	swap	r25
    1380:	82 95       	swap	r24
    1382:	8f 70       	andi	r24, 0x0F	; 15
    1384:	89 27       	eor	r24, r25
    1386:	9f 70       	andi	r25, 0x0F	; 15
    1388:	89 27       	eor	r24, r25
    138a:	cc 97       	sbiw	r24, 0x3c	; 60
    138c:	48 17       	cp	r20, r24
    138e:	59 07       	cpc	r21, r25
    1390:	68 f4       	brcc	.+26     	; 0x13ac <track+0x388>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_POS_0;
    1392:	26 b5       	in	r18, 0x26	; 38
    1394:	37 b5       	in	r19, 0x27	; 39
    1396:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
    139a:	92 95       	swap	r25
    139c:	82 95       	swap	r24
    139e:	8f 70       	andi	r24, 0x0F	; 15
    13a0:	89 27       	eor	r24, r25
    13a2:	9f 70       	andi	r25, 0x0F	; 15
    13a4:	89 27       	eor	r24, r25
    13a6:	cc 97       	sbiw	r24, 0x3c	; 60
    13a8:	99 bd       	out	0x29, r25	; 41
    13aa:	88 bd       	out	0x28, r24	; 40
    13ac:	2f ef       	ldi	r18, 0xFF	; 255
    13ae:	80 e7       	ldi	r24, 0x70	; 112
    13b0:	92 e0       	ldi	r25, 0x02	; 2
    13b2:	21 50       	subi	r18, 0x01	; 1
    13b4:	80 40       	sbci	r24, 0x00	; 0
    13b6:	90 40       	sbci	r25, 0x00	; 0
    13b8:	e1 f7       	brne	.-8      	; 0x13b2 <track+0x38e>
    13ba:	00 c0       	rjmp	.+0      	; 0x13bc <track+0x398>
    13bc:	00 00       	nop
	}
	_delay_ms(100);
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	08 95       	ret

000013c4 <init_unipolar_control>:
#include <util/delay.h>
#include "unipolar_driver.h"

void init_unipolar_control(void)
{
	UNIPOLAR_01_DDR |= ((1 << UNIPOLAR_01_STEP_1) | (1 << UNIPOLAR_01_STEP_2) | (1 << UNIPOLAR_01_STEP_3) | (1 << UNIPOLAR_01_STEP_4));
    13c4:	87 b3       	in	r24, 0x17	; 23
    13c6:	8f 60       	ori	r24, 0x0F	; 15
    13c8:	87 bb       	out	0x17, r24	; 23
	UNIPOLAR_01_CLEAR_STEP_1;
    13ca:	c0 98       	cbi	0x18, 0	; 24
	UNIPOLAR_01_CLEAR_STEP_2;
    13cc:	c1 98       	cbi	0x18, 1	; 24
	UNIPOLAR_01_CLEAR_STEP_3;
    13ce:	c2 98       	cbi	0x18, 2	; 24
	UNIPOLAR_01_CLEAR_STEP_4;
    13d0:	c3 98       	cbi	0x18, 3	; 24
	UNIPOLLAR_01_CURRENT_STEP = 4;
    13d2:	84 e0       	ldi	r24, 0x04	; 4
    13d4:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <UNIPOLLAR_01_CURRENT_STEP>
    13d8:	08 95       	ret

000013da <unipolar_01_step_forward>:
}

void unipolar_01_step_forward(unsigned char current_step)
{
	switch(current_step)
    13da:	82 30       	cpi	r24, 0x02	; 2
    13dc:	89 f0       	breq	.+34     	; 0x1400 <unipolar_01_step_forward+0x26>
    13de:	18 f4       	brcc	.+6      	; 0x13e6 <unipolar_01_step_forward+0xc>
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	31 f0       	breq	.+12     	; 0x13f0 <unipolar_01_step_forward+0x16>
    13e4:	24 c0       	rjmp	.+72     	; 0x142e <unipolar_01_step_forward+0x54>
    13e6:	83 30       	cpi	r24, 0x03	; 3
    13e8:	99 f0       	breq	.+38     	; 0x1410 <unipolar_01_step_forward+0x36>
    13ea:	84 30       	cpi	r24, 0x04	; 4
    13ec:	c9 f0       	breq	.+50     	; 0x1420 <unipolar_01_step_forward+0x46>
    13ee:	1f c0       	rjmp	.+62     	; 0x142e <unipolar_01_step_forward+0x54>
	{
		case 1:
		{
			UNIPOLAR_01_CLEAR_STEP_1;
    13f0:	c0 98       	cbi	0x18, 0	; 24
			UNIPOLAR_01_SET_STEP_2;
    13f2:	c1 9a       	sbi	0x18, 1	; 24
			UNIPOLAR_01_CLEAR_STEP_3;
    13f4:	c2 98       	cbi	0x18, 2	; 24
			UNIPOLAR_01_CLEAR_STEP_4;
    13f6:	c3 98       	cbi	0x18, 3	; 24
			UNIPOLLAR_01_CURRENT_STEP = 2;
    13f8:	82 e0       	ldi	r24, 0x02	; 2
    13fa:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <UNIPOLLAR_01_CURRENT_STEP>
			break;
    13fe:	17 c0       	rjmp	.+46     	; 0x142e <unipolar_01_step_forward+0x54>
		}
		case 2:
		{
			UNIPOLAR_01_CLEAR_STEP_1;
    1400:	c0 98       	cbi	0x18, 0	; 24
			UNIPOLAR_01_CLEAR_STEP_2;
    1402:	c1 98       	cbi	0x18, 1	; 24
			UNIPOLAR_01_SET_STEP_3;
    1404:	c2 9a       	sbi	0x18, 2	; 24
			UNIPOLAR_01_CLEAR_STEP_4;
    1406:	c3 98       	cbi	0x18, 3	; 24
			UNIPOLLAR_01_CURRENT_STEP = 3;
    1408:	83 e0       	ldi	r24, 0x03	; 3
    140a:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <UNIPOLLAR_01_CURRENT_STEP>
			break;
    140e:	0f c0       	rjmp	.+30     	; 0x142e <unipolar_01_step_forward+0x54>
		}
		case 3:
		{
			UNIPOLAR_01_CLEAR_STEP_1;
    1410:	c0 98       	cbi	0x18, 0	; 24
			UNIPOLAR_01_CLEAR_STEP_2;
    1412:	c1 98       	cbi	0x18, 1	; 24
			UNIPOLAR_01_CLEAR_STEP_3;
    1414:	c2 98       	cbi	0x18, 2	; 24
			UNIPOLAR_01_SET_STEP_4;
    1416:	c3 9a       	sbi	0x18, 3	; 24
			UNIPOLLAR_01_CURRENT_STEP = 4;
    1418:	84 e0       	ldi	r24, 0x04	; 4
    141a:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <UNIPOLLAR_01_CURRENT_STEP>
			break;
    141e:	07 c0       	rjmp	.+14     	; 0x142e <unipolar_01_step_forward+0x54>
		}
		case 4:
		{
			UNIPOLAR_01_SET_STEP_1;
    1420:	c0 9a       	sbi	0x18, 0	; 24
			UNIPOLAR_01_CLEAR_STEP_2;
    1422:	c1 98       	cbi	0x18, 1	; 24
			UNIPOLAR_01_CLEAR_STEP_3;
    1424:	c2 98       	cbi	0x18, 2	; 24
			UNIPOLAR_01_CLEAR_STEP_4;
    1426:	c3 98       	cbi	0x18, 3	; 24
			UNIPOLLAR_01_CURRENT_STEP = 1;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <UNIPOLLAR_01_CURRENT_STEP>
    142e:	8f e6       	ldi	r24, 0x6F	; 111
    1430:	97 e1       	ldi	r25, 0x17	; 23
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	f1 f7       	brne	.-4      	; 0x1432 <unipolar_01_step_forward+0x58>
    1436:	00 c0       	rjmp	.+0      	; 0x1438 <unipolar_01_step_forward+0x5e>
    1438:	00 00       	nop
    143a:	08 95       	ret

0000143c <unipolar_01_step_backward>:
	_delay_ms(3);
}

void unipolar_01_step_backward(unsigned char current_step)
{
	switch(current_step)
    143c:	82 30       	cpi	r24, 0x02	; 2
    143e:	89 f0       	breq	.+34     	; 0x1462 <unipolar_01_step_backward+0x26>
    1440:	18 f4       	brcc	.+6      	; 0x1448 <unipolar_01_step_backward+0xc>
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	31 f0       	breq	.+12     	; 0x1452 <unipolar_01_step_backward+0x16>
    1446:	24 c0       	rjmp	.+72     	; 0x1490 <unipolar_01_step_backward+0x54>
    1448:	83 30       	cpi	r24, 0x03	; 3
    144a:	99 f0       	breq	.+38     	; 0x1472 <unipolar_01_step_backward+0x36>
    144c:	84 30       	cpi	r24, 0x04	; 4
    144e:	c9 f0       	breq	.+50     	; 0x1482 <unipolar_01_step_backward+0x46>
    1450:	1f c0       	rjmp	.+62     	; 0x1490 <unipolar_01_step_backward+0x54>
	{
		case 1:
		{
			UNIPOLAR_01_CLEAR_STEP_1;
    1452:	c0 98       	cbi	0x18, 0	; 24
			UNIPOLAR_01_CLEAR_STEP_2;
    1454:	c1 98       	cbi	0x18, 1	; 24
			UNIPOLAR_01_CLEAR_STEP_3;
    1456:	c2 98       	cbi	0x18, 2	; 24
			UNIPOLAR_01_SET_STEP_4;
    1458:	c3 9a       	sbi	0x18, 3	; 24
			UNIPOLLAR_01_CURRENT_STEP = 4;
    145a:	84 e0       	ldi	r24, 0x04	; 4
    145c:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <UNIPOLLAR_01_CURRENT_STEP>
			break;
    1460:	17 c0       	rjmp	.+46     	; 0x1490 <unipolar_01_step_backward+0x54>
		}
		case 2:
		{
			UNIPOLAR_01_SET_STEP_1;
    1462:	c0 9a       	sbi	0x18, 0	; 24
			UNIPOLAR_01_CLEAR_STEP_2;
    1464:	c1 98       	cbi	0x18, 1	; 24
			UNIPOLAR_01_CLEAR_STEP_3;
    1466:	c2 98       	cbi	0x18, 2	; 24
			UNIPOLAR_01_CLEAR_STEP_4;
    1468:	c3 98       	cbi	0x18, 3	; 24
			UNIPOLLAR_01_CURRENT_STEP = 1;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <UNIPOLLAR_01_CURRENT_STEP>
			break;
    1470:	0f c0       	rjmp	.+30     	; 0x1490 <unipolar_01_step_backward+0x54>
		}
		case 3:
		{
			UNIPOLAR_01_CLEAR_STEP_1;
    1472:	c0 98       	cbi	0x18, 0	; 24
			UNIPOLAR_01_SET_STEP_2;
    1474:	c1 9a       	sbi	0x18, 1	; 24
			UNIPOLAR_01_CLEAR_STEP_3;
    1476:	c2 98       	cbi	0x18, 2	; 24
			UNIPOLAR_01_CLEAR_STEP_4;
    1478:	c3 98       	cbi	0x18, 3	; 24
			UNIPOLLAR_01_CURRENT_STEP = 2;
    147a:	82 e0       	ldi	r24, 0x02	; 2
    147c:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <UNIPOLLAR_01_CURRENT_STEP>
			break;
    1480:	07 c0       	rjmp	.+14     	; 0x1490 <unipolar_01_step_backward+0x54>
		}
		case 4:
		{
			UNIPOLAR_01_CLEAR_STEP_1;
    1482:	c0 98       	cbi	0x18, 0	; 24
			UNIPOLAR_01_CLEAR_STEP_2;
    1484:	c1 98       	cbi	0x18, 1	; 24
			UNIPOLAR_01_SET_STEP_3;
    1486:	c2 9a       	sbi	0x18, 2	; 24
			UNIPOLAR_01_CLEAR_STEP_4;
    1488:	c3 98       	cbi	0x18, 3	; 24
			UNIPOLLAR_01_CURRENT_STEP = 3;
    148a:	83 e0       	ldi	r24, 0x03	; 3
    148c:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <UNIPOLLAR_01_CURRENT_STEP>
    1490:	8f e6       	ldi	r24, 0x6F	; 111
    1492:	97 e1       	ldi	r25, 0x17	; 23
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <unipolar_01_step_backward+0x58>
    1498:	00 c0       	rjmp	.+0      	; 0x149a <unipolar_01_step_backward+0x5e>
    149a:	00 00       	nop
    149c:	08 95       	ret

0000149e <unipolar_01_clear_steps>:
	_delay_ms(3);
}

void unipolar_01_clear_steps(void)
{
	UNIPOLAR_01_CLEAR_STEP_1;
    149e:	c0 98       	cbi	0x18, 0	; 24
	UNIPOLAR_01_CLEAR_STEP_2;
    14a0:	c1 98       	cbi	0x18, 1	; 24
	UNIPOLAR_01_CLEAR_STEP_3;
    14a2:	c2 98       	cbi	0x18, 2	; 24
	UNIPOLAR_01_CLEAR_STEP_4;
    14a4:	c3 98       	cbi	0x18, 3	; 24
    14a6:	08 95       	ret

000014a8 <init_next_state_button>:
}


void init_next_state_button(void)
{
	BUTTON_1_DRR &= ~(1 << BUTTON_1_PIN); // PD2 is input
    14a8:	8a 98       	cbi	0x11, 2	; 17

	BUTTON_1_PORT |= (1 << BUTTON_1_PIN);    // turn on the pull-up resistor
    14aa:	92 9a       	sbi	0x12, 2	; 18
	// PD2 is now an input with pull-up enabled



	MCUCR &= ~(1 << ISC00 | 1 << ISC01);    // low level of INT0 generates an interrupt request: when BUTTON_1 is pressed
    14ac:	85 b7       	in	r24, 0x35	; 53
    14ae:	8c 7f       	andi	r24, 0xFC	; 252
    14b0:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);     // turns on INT0
    14b2:	8b b7       	in	r24, 0x3b	; 59
    14b4:	80 64       	ori	r24, 0x40	; 64
    14b6:	8b bf       	out	0x3b, r24	; 59
    14b8:	08 95       	ret

000014ba <init_user_interface>:



void init_user_interface(void)
{
	init_next_state_button();
    14ba:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <init_next_state_button>
    14be:	08 95       	ret

000014c0 <__vector_1>:
	MCUCR &= ~(1 << ISC00 | 1 << ISC01);    // low level of INT0 generates an interrupt request: when BUTTON_1 is pressed
	GICR |= (1 << INT0);     // turns on INT0
}

ISR (INT0_vect)
{
    14c0:	1f 92       	push	r1
    14c2:	0f 92       	push	r0
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	0f 92       	push	r0
    14c8:	11 24       	eor	r1, r1
    14ca:	8f 93       	push	r24
	cli(); // temporarily disable interrupts
    14cc:	f8 94       	cli
	switch(STATE)
    14ce:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <STATE>
    14d2:	82 30       	cpi	r24, 0x02	; 2
    14d4:	69 f0       	breq	.+26     	; 0x14f0 <__vector_1+0x30>
    14d6:	18 f4       	brcc	.+6      	; 0x14de <__vector_1+0x1e>
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	31 f0       	breq	.+12     	; 0x14e8 <__vector_1+0x28>
    14dc:	15 c0       	rjmp	.+42     	; 0x1508 <__vector_1+0x48>
    14de:	83 30       	cpi	r24, 0x03	; 3
    14e0:	59 f0       	breq	.+22     	; 0x14f8 <__vector_1+0x38>
    14e2:	84 30       	cpi	r24, 0x04	; 4
    14e4:	69 f0       	breq	.+26     	; 0x1500 <__vector_1+0x40>
    14e6:	10 c0       	rjmp	.+32     	; 0x1508 <__vector_1+0x48>
	{
		case STATE_IDLE:
		{
			STATE = STATE_MANUAL;
    14e8:	82 e0       	ldi	r24, 0x02	; 2
    14ea:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <STATE>
			break;
    14ee:	0f c0       	rjmp	.+30     	; 0x150e <__vector_1+0x4e>
		}
		case STATE_MANUAL:
		{
			STATE = STATE_TRACKING;
    14f0:	83 e0       	ldi	r24, 0x03	; 3
    14f2:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <STATE>
			break;
    14f6:	0b c0       	rjmp	.+22     	; 0x150e <__vector_1+0x4e>
		}
		case STATE_TRACKING:
		{
			STATE = STATE_MONITORING;
    14f8:	84 e0       	ldi	r24, 0x04	; 4
    14fa:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <STATE>
			break;
    14fe:	07 c0       	rjmp	.+14     	; 0x150e <__vector_1+0x4e>
		}
		case STATE_MONITORING:
		{
			STATE = STATE_IDLE;
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <STATE>
			break;
    1506:	03 c0       	rjmp	.+6      	; 0x150e <__vector_1+0x4e>
		}
		default:
		{
			STATE = STATE_IDLE;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <STATE>
			break;
		}
	}
    150e:	8f 91       	pop	r24
    1510:	0f 90       	pop	r0
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	0f 90       	pop	r0
    1516:	1f 90       	pop	r1
    1518:	18 95       	reti

0000151a <__divmodhi4>:
    151a:	97 fb       	bst	r25, 7
    151c:	07 2e       	mov	r0, r23
    151e:	16 f4       	brtc	.+4      	; 0x1524 <__divmodhi4+0xa>
    1520:	00 94       	com	r0
    1522:	07 d0       	rcall	.+14     	; 0x1532 <__divmodhi4_neg1>
    1524:	77 fd       	sbrc	r23, 7
    1526:	09 d0       	rcall	.+18     	; 0x153a <__divmodhi4_neg2>
    1528:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__udivmodhi4>
    152c:	07 fc       	sbrc	r0, 7
    152e:	05 d0       	rcall	.+10     	; 0x153a <__divmodhi4_neg2>
    1530:	3e f4       	brtc	.+14     	; 0x1540 <__divmodhi4_exit>

00001532 <__divmodhi4_neg1>:
    1532:	90 95       	com	r25
    1534:	81 95       	neg	r24
    1536:	9f 4f       	sbci	r25, 0xFF	; 255
    1538:	08 95       	ret

0000153a <__divmodhi4_neg2>:
    153a:	70 95       	com	r23
    153c:	61 95       	neg	r22
    153e:	7f 4f       	sbci	r23, 0xFF	; 255

00001540 <__divmodhi4_exit>:
    1540:	08 95       	ret

00001542 <__divmodsi4>:
    1542:	05 2e       	mov	r0, r21
    1544:	97 fb       	bst	r25, 7
    1546:	1e f4       	brtc	.+6      	; 0x154e <__divmodsi4+0xc>
    1548:	00 94       	com	r0
    154a:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__negsi2>
    154e:	57 fd       	sbrc	r21, 7
    1550:	07 d0       	rcall	.+14     	; 0x1560 <__divmodsi4_neg2>
    1552:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__udivmodsi4>
    1556:	07 fc       	sbrc	r0, 7
    1558:	03 d0       	rcall	.+6      	; 0x1560 <__divmodsi4_neg2>
    155a:	4e f4       	brtc	.+18     	; 0x156e <__divmodsi4_exit>
    155c:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__negsi2>

00001560 <__divmodsi4_neg2>:
    1560:	50 95       	com	r21
    1562:	40 95       	com	r20
    1564:	30 95       	com	r19
    1566:	21 95       	neg	r18
    1568:	3f 4f       	sbci	r19, 0xFF	; 255
    156a:	4f 4f       	sbci	r20, 0xFF	; 255
    156c:	5f 4f       	sbci	r21, 0xFF	; 255

0000156e <__divmodsi4_exit>:
    156e:	08 95       	ret

00001570 <__negsi2>:
    1570:	90 95       	com	r25
    1572:	80 95       	com	r24
    1574:	70 95       	com	r23
    1576:	61 95       	neg	r22
    1578:	7f 4f       	sbci	r23, 0xFF	; 255
    157a:	8f 4f       	sbci	r24, 0xFF	; 255
    157c:	9f 4f       	sbci	r25, 0xFF	; 255
    157e:	08 95       	ret

00001580 <__umulhisi3>:
    1580:	a2 9f       	mul	r26, r18
    1582:	b0 01       	movw	r22, r0
    1584:	b3 9f       	mul	r27, r19
    1586:	c0 01       	movw	r24, r0
    1588:	a3 9f       	mul	r26, r19
    158a:	70 0d       	add	r23, r0
    158c:	81 1d       	adc	r24, r1
    158e:	11 24       	eor	r1, r1
    1590:	91 1d       	adc	r25, r1
    1592:	b2 9f       	mul	r27, r18
    1594:	70 0d       	add	r23, r0
    1596:	81 1d       	adc	r24, r1
    1598:	11 24       	eor	r1, r1
    159a:	91 1d       	adc	r25, r1
    159c:	08 95       	ret

0000159e <__usmulhisi3>:
    159e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>

000015a2 <__usmulhisi3_tail>:
    15a2:	b7 ff       	sbrs	r27, 7
    15a4:	08 95       	ret
    15a6:	82 1b       	sub	r24, r18
    15a8:	93 0b       	sbc	r25, r19
    15aa:	08 95       	ret

000015ac <__muluhisi3>:
    15ac:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__umulhisi3>
    15b0:	a5 9f       	mul	r26, r21
    15b2:	90 0d       	add	r25, r0
    15b4:	b4 9f       	mul	r27, r20
    15b6:	90 0d       	add	r25, r0
    15b8:	a4 9f       	mul	r26, r20
    15ba:	80 0d       	add	r24, r0
    15bc:	91 1d       	adc	r25, r1
    15be:	11 24       	eor	r1, r1
    15c0:	08 95       	ret

000015c2 <__udivmodhi4>:
    15c2:	aa 1b       	sub	r26, r26
    15c4:	bb 1b       	sub	r27, r27
    15c6:	51 e1       	ldi	r21, 0x11	; 17
    15c8:	07 c0       	rjmp	.+14     	; 0x15d8 <__udivmodhi4_ep>

000015ca <__udivmodhi4_loop>:
    15ca:	aa 1f       	adc	r26, r26
    15cc:	bb 1f       	adc	r27, r27
    15ce:	a6 17       	cp	r26, r22
    15d0:	b7 07       	cpc	r27, r23
    15d2:	10 f0       	brcs	.+4      	; 0x15d8 <__udivmodhi4_ep>
    15d4:	a6 1b       	sub	r26, r22
    15d6:	b7 0b       	sbc	r27, r23

000015d8 <__udivmodhi4_ep>:
    15d8:	88 1f       	adc	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	5a 95       	dec	r21
    15de:	a9 f7       	brne	.-22     	; 0x15ca <__udivmodhi4_loop>
    15e0:	80 95       	com	r24
    15e2:	90 95       	com	r25
    15e4:	bc 01       	movw	r22, r24
    15e6:	cd 01       	movw	r24, r26
    15e8:	08 95       	ret

000015ea <__udivmodsi4>:
    15ea:	a1 e2       	ldi	r26, 0x21	; 33
    15ec:	1a 2e       	mov	r1, r26
    15ee:	aa 1b       	sub	r26, r26
    15f0:	bb 1b       	sub	r27, r27
    15f2:	fd 01       	movw	r30, r26
    15f4:	0d c0       	rjmp	.+26     	; 0x1610 <__udivmodsi4_ep>

000015f6 <__udivmodsi4_loop>:
    15f6:	aa 1f       	adc	r26, r26
    15f8:	bb 1f       	adc	r27, r27
    15fa:	ee 1f       	adc	r30, r30
    15fc:	ff 1f       	adc	r31, r31
    15fe:	a2 17       	cp	r26, r18
    1600:	b3 07       	cpc	r27, r19
    1602:	e4 07       	cpc	r30, r20
    1604:	f5 07       	cpc	r31, r21
    1606:	20 f0       	brcs	.+8      	; 0x1610 <__udivmodsi4_ep>
    1608:	a2 1b       	sub	r26, r18
    160a:	b3 0b       	sbc	r27, r19
    160c:	e4 0b       	sbc	r30, r20
    160e:	f5 0b       	sbc	r31, r21

00001610 <__udivmodsi4_ep>:
    1610:	66 1f       	adc	r22, r22
    1612:	77 1f       	adc	r23, r23
    1614:	88 1f       	adc	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	1a 94       	dec	r1
    161a:	69 f7       	brne	.-38     	; 0x15f6 <__udivmodsi4_loop>
    161c:	60 95       	com	r22
    161e:	70 95       	com	r23
    1620:	80 95       	com	r24
    1622:	90 95       	com	r25
    1624:	9b 01       	movw	r18, r22
    1626:	ac 01       	movw	r20, r24
    1628:	bd 01       	movw	r22, r26
    162a:	cf 01       	movw	r24, r30
    162c:	08 95       	ret

0000162e <_exit>:
    162e:	f8 94       	cli

00001630 <__stop_program>:
    1630:	ff cf       	rjmp	.-2      	; 0x1630 <__stop_program>
