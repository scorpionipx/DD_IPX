
SunTracking32A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000067e  00800060  00001274  00001308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008006de  008006de  00001986  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001986  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000039a2  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f08  00000000  00000000  00005596  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000146b  00000000  00000000  0000649e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  0000790c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a4  00000000  00000000  00007cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d54  00000000  00000000  00008458  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  000091ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 95 08 	jmp	0x112a	; 0x112a <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	16 e0       	ldi	r17, 0x06	; 6
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3d       	cpi	r26, 0xDE	; 222
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	26 e0       	ldi	r18, 0x06	; 6
      78:	ae ed       	ldi	r26, 0xDE	; 222
      7a:	b6 e0       	ldi	r27, 0x06	; 6
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3f       	cpi	r26, 0xF4	; 244
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <main>
      8a:	0c 94 38 09 	jmp	0x1270	; 0x1270 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:

#include <avr/io.h>

void ADC_init(void)
{
	DDRC = 0x00;
      92:	14 ba       	out	0x14, r1	; 20
	// AREF = AVcc
	ADMUX = (1<<REFS0);
      94:	80 e4       	ldi	r24, 0x40	; 64
      96:	87 b9       	out	0x07, r24	; 7
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
      98:	87 e8       	ldi	r24, 0x87	; 135
      9a:	86 b9       	out	0x06, r24	; 6
      9c:	08 95       	ret

0000009e <ADC_get_value>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
      9e:	97 b1       	in	r25, 0x07	; 7
      a0:	98 7f       	andi	r25, 0xF8	; 248
      a2:	87 70       	andi	r24, 0x07	; 7
      a4:	89 2b       	or	r24, r25
      a6:	87 b9       	out	0x07, r24	; 7
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
      a8:	36 9a       	sbi	0x06, 6	; 6
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
      aa:	36 99       	sbic	0x06, 6	; 6
      ac:	fe cf       	rjmp	.-4      	; 0xaa <ADC_get_value+0xc>
	
	return (ADC);
      ae:	84 b1       	in	r24, 0x04	; 4
      b0:	95 b1       	in	r25, 0x05	; 5
      b2:	08 95       	ret

000000b4 <display_title>:
#include "sg90_driver.h"
#include <stdlib.h>

void display_title(void)
{
	hx_set_coordinates(0, 0);
      b4:	60 e0       	ldi	r22, 0x00	; 0
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	hx_write_string("AutoTracking LDR");
      bc:	80 e6       	ldi	r24, 0x60	; 96
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	0e 94 86 04 	call	0x90c	; 0x90c <hx_write_string>
	hx_set_coordinates(0, 1);
      c4:	61 e0       	ldi	r22, 0x01	; 1
      c6:	80 e0       	ldi	r24, 0x00	; 0
      c8:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	hx_write_string("  ScorpionIPX");
      cc:	81 e7       	ldi	r24, 0x71	; 113
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	0e 94 86 04 	call	0x90c	; 0x90c <hx_write_string>
      d4:	08 95       	ret

000000d6 <display_data_menu>:
}

void display_data_menu(void)
{
	hx_set_coordinates(0, 3);
      d6:	63 e0       	ldi	r22, 0x03	; 3
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	hx_write_string("       ||");
      de:	8f e7       	ldi	r24, 0x7F	; 127
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	0e 94 86 04 	call	0x90c	; 0x90c <hx_write_string>
	hx_set_coordinates(0, 4);
      e6:	64 e0       	ldi	r22, 0x04	; 4
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	hx_write_string("================");
      ee:	89 e8       	ldi	r24, 0x89	; 137
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	0e 94 86 04 	call	0x90c	; 0x90c <hx_write_string>
	hx_set_coordinates(0, 5);
      f6:	65 e0       	ldi	r22, 0x05	; 5
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	hx_write_string("       ||");
      fe:	8f e7       	ldi	r24, 0x7F	; 127
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	0e 94 86 04 	call	0x90c	; 0x90c <hx_write_string>
     106:	08 95       	ret

00000108 <display_light_sensor_data>:
}

void display_light_sensor_data(uint8_t sensor, int data)
{
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	eb 01       	movw	r28, r22
	//hx_set_coordinates(60, 3 + sensor);
	hx_set_coordinates(24 + 36 * (sensor & 1), 3 + 2 * (sensor >> 1));
     10e:	68 2f       	mov	r22, r24
     110:	6e 7f       	andi	r22, 0xFE	; 254
     112:	6d 5f       	subi	r22, 0xFD	; 253
     114:	81 70       	andi	r24, 0x01	; 1
     116:	94 e2       	ldi	r25, 0x24	; 36
     118:	89 9f       	mul	r24, r25
     11a:	80 2d       	mov	r24, r0
     11c:	11 24       	eor	r1, r1
     11e:	88 5e       	subi	r24, 0xE8	; 232
     120:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	
	// hx_write_char('0' + ((data / 100) % 10));
	hx_write_char('0' + ((data / 10) % 10));
     124:	2a e0       	ldi	r18, 0x0A	; 10
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	ce 01       	movw	r24, r28
     12a:	b9 01       	movw	r22, r18
     12c:	0e 94 b9 08 	call	0x1172	; 0x1172 <__divmodhi4>
     130:	c8 2f       	mov	r28, r24
     132:	cb 01       	movw	r24, r22
     134:	b9 01       	movw	r22, r18
     136:	0e 94 b9 08 	call	0x1172	; 0x1172 <__divmodhi4>
     13a:	80 5d       	subi	r24, 0xD0	; 208
     13c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	hx_write_char('0' + (data % 10));
     140:	80 e3       	ldi	r24, 0x30	; 48
     142:	8c 0f       	add	r24, r28
     144:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	
	hx_set_coordinates(18, 7);
     148:	67 e0       	ldi	r22, 0x07	; 7
     14a:	82 e1       	ldi	r24, 0x12	; 18
     14c:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	hx_write_char('0' + OCR1A / 100);
     150:	2a b5       	in	r18, 0x2a	; 42
     152:	3b b5       	in	r19, 0x2b	; 43
     154:	36 95       	lsr	r19
     156:	27 95       	ror	r18
     158:	36 95       	lsr	r19
     15a:	27 95       	ror	r18
     15c:	ab e7       	ldi	r26, 0x7B	; 123
     15e:	b4 e1       	ldi	r27, 0x14	; 20
     160:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     164:	96 95       	lsr	r25
     166:	87 95       	ror	r24
     168:	80 5d       	subi	r24, 0xD0	; 208
     16a:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	hx_write_char('0' + (OCR1A / 10) % 10);
     16e:	2a b5       	in	r18, 0x2a	; 42
     170:	3b b5       	in	r19, 0x2b	; 43
     172:	ad ec       	ldi	r26, 0xCD	; 205
     174:	bc ec       	ldi	r27, 0xCC	; 204
     176:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     17a:	ac 01       	movw	r20, r24
     17c:	56 95       	lsr	r21
     17e:	47 95       	ror	r20
     180:	56 95       	lsr	r21
     182:	47 95       	ror	r20
     184:	56 95       	lsr	r21
     186:	47 95       	ror	r20
     188:	9a 01       	movw	r18, r20
     18a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     18e:	96 95       	lsr	r25
     190:	87 95       	ror	r24
     192:	96 95       	lsr	r25
     194:	87 95       	ror	r24
     196:	96 95       	lsr	r25
     198:	87 95       	ror	r24
     19a:	9c 01       	movw	r18, r24
     19c:	22 0f       	add	r18, r18
     19e:	33 1f       	adc	r19, r19
     1a0:	88 0f       	add	r24, r24
     1a2:	99 1f       	adc	r25, r25
     1a4:	88 0f       	add	r24, r24
     1a6:	99 1f       	adc	r25, r25
     1a8:	88 0f       	add	r24, r24
     1aa:	99 1f       	adc	r25, r25
     1ac:	82 0f       	add	r24, r18
     1ae:	93 1f       	adc	r25, r19
     1b0:	9a 01       	movw	r18, r20
     1b2:	28 1b       	sub	r18, r24
     1b4:	39 0b       	sbc	r19, r25
     1b6:	c9 01       	movw	r24, r18
     1b8:	80 5d       	subi	r24, 0xD0	; 208
     1ba:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	hx_write_char('0' + OCR1A % 10);
     1be:	4a b5       	in	r20, 0x2a	; 42
     1c0:	5b b5       	in	r21, 0x2b	; 43
     1c2:	9a 01       	movw	r18, r20
     1c4:	ad ec       	ldi	r26, 0xCD	; 205
     1c6:	bc ec       	ldi	r27, 0xCC	; 204
     1c8:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     1cc:	96 95       	lsr	r25
     1ce:	87 95       	ror	r24
     1d0:	96 95       	lsr	r25
     1d2:	87 95       	ror	r24
     1d4:	96 95       	lsr	r25
     1d6:	87 95       	ror	r24
     1d8:	9c 01       	movw	r18, r24
     1da:	22 0f       	add	r18, r18
     1dc:	33 1f       	adc	r19, r19
     1de:	88 0f       	add	r24, r24
     1e0:	99 1f       	adc	r25, r25
     1e2:	88 0f       	add	r24, r24
     1e4:	99 1f       	adc	r25, r25
     1e6:	88 0f       	add	r24, r24
     1e8:	99 1f       	adc	r25, r25
     1ea:	82 0f       	add	r24, r18
     1ec:	93 1f       	adc	r25, r19
     1ee:	9a 01       	movw	r18, r20
     1f0:	28 1b       	sub	r18, r24
     1f2:	39 0b       	sbc	r19, r25
     1f4:	c9 01       	movw	r24, r18
     1f6:	80 5d       	subi	r24, 0xD0	; 208
     1f8:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	
	hx_set_coordinates(66, 7);
     1fc:	67 e0       	ldi	r22, 0x07	; 7
     1fe:	82 e4       	ldi	r24, 0x42	; 66
     200:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	hx_write_char('0' + OCR1B / 100);
     204:	28 b5       	in	r18, 0x28	; 40
     206:	39 b5       	in	r19, 0x29	; 41
     208:	36 95       	lsr	r19
     20a:	27 95       	ror	r18
     20c:	36 95       	lsr	r19
     20e:	27 95       	ror	r18
     210:	ab e7       	ldi	r26, 0x7B	; 123
     212:	b4 e1       	ldi	r27, 0x14	; 20
     214:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     218:	96 95       	lsr	r25
     21a:	87 95       	ror	r24
     21c:	80 5d       	subi	r24, 0xD0	; 208
     21e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	hx_write_char('0' + (OCR1B / 10) % 10);
     222:	28 b5       	in	r18, 0x28	; 40
     224:	39 b5       	in	r19, 0x29	; 41
     226:	ad ec       	ldi	r26, 0xCD	; 205
     228:	bc ec       	ldi	r27, 0xCC	; 204
     22a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     22e:	ac 01       	movw	r20, r24
     230:	56 95       	lsr	r21
     232:	47 95       	ror	r20
     234:	56 95       	lsr	r21
     236:	47 95       	ror	r20
     238:	56 95       	lsr	r21
     23a:	47 95       	ror	r20
     23c:	9a 01       	movw	r18, r20
     23e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     242:	96 95       	lsr	r25
     244:	87 95       	ror	r24
     246:	96 95       	lsr	r25
     248:	87 95       	ror	r24
     24a:	96 95       	lsr	r25
     24c:	87 95       	ror	r24
     24e:	9c 01       	movw	r18, r24
     250:	22 0f       	add	r18, r18
     252:	33 1f       	adc	r19, r19
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	88 0f       	add	r24, r24
     25a:	99 1f       	adc	r25, r25
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	82 0f       	add	r24, r18
     262:	93 1f       	adc	r25, r19
     264:	9a 01       	movw	r18, r20
     266:	28 1b       	sub	r18, r24
     268:	39 0b       	sbc	r19, r25
     26a:	c9 01       	movw	r24, r18
     26c:	80 5d       	subi	r24, 0xD0	; 208
     26e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	hx_write_char('0' + OCR1B % 10);
     272:	48 b5       	in	r20, 0x28	; 40
     274:	59 b5       	in	r21, 0x29	; 41
     276:	9a 01       	movw	r18, r20
     278:	ad ec       	ldi	r26, 0xCD	; 205
     27a:	bc ec       	ldi	r27, 0xCC	; 204
     27c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     280:	96 95       	lsr	r25
     282:	87 95       	ror	r24
     284:	96 95       	lsr	r25
     286:	87 95       	ror	r24
     288:	96 95       	lsr	r25
     28a:	87 95       	ror	r24
     28c:	9c 01       	movw	r18, r24
     28e:	22 0f       	add	r18, r18
     290:	33 1f       	adc	r19, r19
     292:	88 0f       	add	r24, r24
     294:	99 1f       	adc	r25, r25
     296:	88 0f       	add	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	88 0f       	add	r24, r24
     29c:	99 1f       	adc	r25, r25
     29e:	82 0f       	add	r24, r18
     2a0:	93 1f       	adc	r25, r19
     2a2:	9a 01       	movw	r18, r20
     2a4:	28 1b       	sub	r18, r24
     2a6:	39 0b       	sbc	r19, r25
     2a8:	c9 01       	movw	r24, r18
     2aa:	80 5d       	subi	r24, 0xD0	; 208
     2ac:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
}
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <display_idle_state_message>:

void display_idle_state_message(void)
{
	hx_set_coordinates(0, 3);
     2b6:	63 e0       	ldi	r22, 0x03	; 3
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	hx_write_string("- system is in ");
     2be:	8a e9       	ldi	r24, 0x9A	; 154
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 86 04 	call	0x90c	; 0x90c <hx_write_string>
	hx_set_coordinates(0, 4);
     2c6:	64 e0       	ldi	r22, 0x04	; 4
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	hx_write_string("IDLE mode");
     2ce:	8a ea       	ldi	r24, 0xAA	; 170
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 86 04 	call	0x90c	; 0x90c <hx_write_string>
	hx_set_coordinates(0, 6);
     2d6:	66 e0       	ldi	r22, 0x06	; 6
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	hx_write_string("going to sleep");
     2de:	84 eb       	ldi	r24, 0xB4	; 180
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 86 04 	call	0x90c	; 0x90c <hx_write_string>
     2e6:	08 95       	ret

000002e8 <display_manual_state_message>:
}


void display_manual_state_message(void)
{
	hx_set_coordinates(0, 3);
     2e8:	63 e0       	ldi	r22, 0x03	; 3
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	hx_write_string("- system is in ");
     2f0:	8a e9       	ldi	r24, 0x9A	; 154
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 86 04 	call	0x90c	; 0x90c <hx_write_string>
	hx_set_coordinates(0, 4);
     2f8:	64 e0       	ldi	r22, 0x04	; 4
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	hx_write_string("MANUAL mode");
     300:	83 ec       	ldi	r24, 0xC3	; 195
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 86 04 	call	0x90c	; 0x90c <hx_write_string>
	
	hx_set_coordinates(0, 6);
     308:	66 e0       	ldi	r22, 0x06	; 6
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	hx_write_string("JX:");
     310:	8f ec       	ldi	r24, 0xCF	; 207
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 86 04 	call	0x90c	; 0x90c <hx_write_string>
	hx_set_coordinates(54, 6);
     318:	66 e0       	ldi	r22, 0x06	; 6
     31a:	86 e3       	ldi	r24, 0x36	; 54
     31c:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	hx_write_string("B:");
     320:	83 ed       	ldi	r24, 0xD3	; 211
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 86 04 	call	0x90c	; 0x90c <hx_write_string>
	
	hx_set_coordinates(0, 7);
     328:	67 e0       	ldi	r22, 0x07	; 7
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	hx_write_string("JY:");
     330:	86 ed       	ldi	r24, 0xD6	; 214
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 86 04 	call	0x90c	; 0x90c <hx_write_string>
	hx_set_coordinates(54, 7);
     338:	67 e0       	ldi	r22, 0x07	; 7
     33a:	86 e3       	ldi	r24, 0x36	; 54
     33c:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	hx_write_string("A:");
     340:	8a ed       	ldi	r24, 0xDA	; 218
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 86 04 	call	0x90c	; 0x90c <hx_write_string>
     348:	08 95       	ret

0000034a <display_joystick_data>:
}

void display_joystick_data(unsigned int x, unsigned int y)
{	 
     34a:	ef 92       	push	r14
     34c:	ff 92       	push	r15
     34e:	0f 93       	push	r16
     350:	1f 93       	push	r17
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	7c 01       	movw	r14, r24
     358:	8b 01       	movw	r16, r22
	hx_set_coordinates(24, 6);
     35a:	66 e0       	ldi	r22, 0x06	; 6
     35c:	88 e1       	ldi	r24, 0x18	; 24
     35e:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	
	hx_write_char('0' + x / 1000);
     362:	97 01       	movw	r18, r14
     364:	36 95       	lsr	r19
     366:	27 95       	ror	r18
     368:	36 95       	lsr	r19
     36a:	27 95       	ror	r18
     36c:	36 95       	lsr	r19
     36e:	27 95       	ror	r18
     370:	a5 ec       	ldi	r26, 0xC5	; 197
     372:	b0 e2       	ldi	r27, 0x20	; 32
     374:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     378:	92 95       	swap	r25
     37a:	82 95       	swap	r24
     37c:	8f 70       	andi	r24, 0x0F	; 15
     37e:	89 27       	eor	r24, r25
     380:	9f 70       	andi	r25, 0x0F	; 15
     382:	89 27       	eor	r24, r25
     384:	80 5d       	subi	r24, 0xD0	; 208
     386:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	hx_write_char('0' + (x / 100) % 10);
     38a:	97 01       	movw	r18, r14
     38c:	36 95       	lsr	r19
     38e:	27 95       	ror	r18
     390:	36 95       	lsr	r19
     392:	27 95       	ror	r18
     394:	ab e7       	ldi	r26, 0x7B	; 123
     396:	b4 e1       	ldi	r27, 0x14	; 20
     398:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     39c:	ac 01       	movw	r20, r24
     39e:	56 95       	lsr	r21
     3a0:	47 95       	ror	r20
     3a2:	9a 01       	movw	r18, r20
     3a4:	ad ec       	ldi	r26, 0xCD	; 205
     3a6:	bc ec       	ldi	r27, 0xCC	; 204
     3a8:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     3ac:	96 95       	lsr	r25
     3ae:	87 95       	ror	r24
     3b0:	96 95       	lsr	r25
     3b2:	87 95       	ror	r24
     3b4:	96 95       	lsr	r25
     3b6:	87 95       	ror	r24
     3b8:	9c 01       	movw	r18, r24
     3ba:	22 0f       	add	r18, r18
     3bc:	33 1f       	adc	r19, r19
     3be:	88 0f       	add	r24, r24
     3c0:	99 1f       	adc	r25, r25
     3c2:	88 0f       	add	r24, r24
     3c4:	99 1f       	adc	r25, r25
     3c6:	88 0f       	add	r24, r24
     3c8:	99 1f       	adc	r25, r25
     3ca:	82 0f       	add	r24, r18
     3cc:	93 1f       	adc	r25, r19
     3ce:	9a 01       	movw	r18, r20
     3d0:	28 1b       	sub	r18, r24
     3d2:	39 0b       	sbc	r19, r25
     3d4:	c9 01       	movw	r24, r18
     3d6:	80 5d       	subi	r24, 0xD0	; 208
     3d8:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	hx_write_char('0' + (x / 10) % 10);
     3dc:	97 01       	movw	r18, r14
     3de:	ad ec       	ldi	r26, 0xCD	; 205
     3e0:	bc ec       	ldi	r27, 0xCC	; 204
     3e2:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     3e6:	ec 01       	movw	r28, r24
     3e8:	d6 95       	lsr	r29
     3ea:	c7 95       	ror	r28
     3ec:	d6 95       	lsr	r29
     3ee:	c7 95       	ror	r28
     3f0:	d6 95       	lsr	r29
     3f2:	c7 95       	ror	r28
     3f4:	9e 01       	movw	r18, r28
     3f6:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     3fa:	96 95       	lsr	r25
     3fc:	87 95       	ror	r24
     3fe:	96 95       	lsr	r25
     400:	87 95       	ror	r24
     402:	96 95       	lsr	r25
     404:	87 95       	ror	r24
     406:	9c 01       	movw	r18, r24
     408:	22 0f       	add	r18, r18
     40a:	33 1f       	adc	r19, r19
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	88 0f       	add	r24, r24
     412:	99 1f       	adc	r25, r25
     414:	88 0f       	add	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	82 0f       	add	r24, r18
     41a:	93 1f       	adc	r25, r19
     41c:	9e 01       	movw	r18, r28
     41e:	28 1b       	sub	r18, r24
     420:	39 0b       	sbc	r19, r25
     422:	c9 01       	movw	r24, r18
     424:	80 5d       	subi	r24, 0xD0	; 208
     426:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	hx_write_char('0' + x % 10);
     42a:	ce 01       	movw	r24, r28
     42c:	88 0f       	add	r24, r24
     42e:	99 1f       	adc	r25, r25
     430:	cc 0f       	add	r28, r28
     432:	dd 1f       	adc	r29, r29
     434:	cc 0f       	add	r28, r28
     436:	dd 1f       	adc	r29, r29
     438:	cc 0f       	add	r28, r28
     43a:	dd 1f       	adc	r29, r29
     43c:	c8 0f       	add	r28, r24
     43e:	d9 1f       	adc	r29, r25
     440:	c7 01       	movw	r24, r14
     442:	8c 1b       	sub	r24, r28
     444:	9d 0b       	sbc	r25, r29
     446:	80 5d       	subi	r24, 0xD0	; 208
     448:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	
	hx_set_coordinates(72, 6);
     44c:	66 e0       	ldi	r22, 0x06	; 6
     44e:	88 e4       	ldi	r24, 0x48	; 72
     450:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	
	hx_write_char('0' + SG90_ROTATE_DUTY_CYCLE_REGISTER / 1000);
     454:	28 b5       	in	r18, 0x28	; 40
     456:	39 b5       	in	r19, 0x29	; 41
     458:	36 95       	lsr	r19
     45a:	27 95       	ror	r18
     45c:	36 95       	lsr	r19
     45e:	27 95       	ror	r18
     460:	36 95       	lsr	r19
     462:	27 95       	ror	r18
     464:	a5 ec       	ldi	r26, 0xC5	; 197
     466:	b0 e2       	ldi	r27, 0x20	; 32
     468:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     46c:	92 95       	swap	r25
     46e:	82 95       	swap	r24
     470:	8f 70       	andi	r24, 0x0F	; 15
     472:	89 27       	eor	r24, r25
     474:	9f 70       	andi	r25, 0x0F	; 15
     476:	89 27       	eor	r24, r25
     478:	80 5d       	subi	r24, 0xD0	; 208
     47a:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	hx_write_char('0' + (SG90_ROTATE_DUTY_CYCLE_REGISTER / 100) % 10);
     47e:	28 b5       	in	r18, 0x28	; 40
     480:	39 b5       	in	r19, 0x29	; 41
     482:	36 95       	lsr	r19
     484:	27 95       	ror	r18
     486:	36 95       	lsr	r19
     488:	27 95       	ror	r18
     48a:	ab e7       	ldi	r26, 0x7B	; 123
     48c:	b4 e1       	ldi	r27, 0x14	; 20
     48e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     492:	ac 01       	movw	r20, r24
     494:	56 95       	lsr	r21
     496:	47 95       	ror	r20
     498:	9a 01       	movw	r18, r20
     49a:	ad ec       	ldi	r26, 0xCD	; 205
     49c:	bc ec       	ldi	r27, 0xCC	; 204
     49e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     4a2:	96 95       	lsr	r25
     4a4:	87 95       	ror	r24
     4a6:	96 95       	lsr	r25
     4a8:	87 95       	ror	r24
     4aa:	96 95       	lsr	r25
     4ac:	87 95       	ror	r24
     4ae:	9c 01       	movw	r18, r24
     4b0:	22 0f       	add	r18, r18
     4b2:	33 1f       	adc	r19, r19
     4b4:	88 0f       	add	r24, r24
     4b6:	99 1f       	adc	r25, r25
     4b8:	88 0f       	add	r24, r24
     4ba:	99 1f       	adc	r25, r25
     4bc:	88 0f       	add	r24, r24
     4be:	99 1f       	adc	r25, r25
     4c0:	82 0f       	add	r24, r18
     4c2:	93 1f       	adc	r25, r19
     4c4:	9a 01       	movw	r18, r20
     4c6:	28 1b       	sub	r18, r24
     4c8:	39 0b       	sbc	r19, r25
     4ca:	c9 01       	movw	r24, r18
     4cc:	80 5d       	subi	r24, 0xD0	; 208
     4ce:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	hx_write_char('0' + (SG90_ROTATE_DUTY_CYCLE_REGISTER / 10) % 10);
     4d2:	28 b5       	in	r18, 0x28	; 40
     4d4:	39 b5       	in	r19, 0x29	; 41
     4d6:	ad ec       	ldi	r26, 0xCD	; 205
     4d8:	bc ec       	ldi	r27, 0xCC	; 204
     4da:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     4de:	ac 01       	movw	r20, r24
     4e0:	56 95       	lsr	r21
     4e2:	47 95       	ror	r20
     4e4:	56 95       	lsr	r21
     4e6:	47 95       	ror	r20
     4e8:	56 95       	lsr	r21
     4ea:	47 95       	ror	r20
     4ec:	9a 01       	movw	r18, r20
     4ee:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     4f2:	96 95       	lsr	r25
     4f4:	87 95       	ror	r24
     4f6:	96 95       	lsr	r25
     4f8:	87 95       	ror	r24
     4fa:	96 95       	lsr	r25
     4fc:	87 95       	ror	r24
     4fe:	9c 01       	movw	r18, r24
     500:	22 0f       	add	r18, r18
     502:	33 1f       	adc	r19, r19
     504:	88 0f       	add	r24, r24
     506:	99 1f       	adc	r25, r25
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	88 0f       	add	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	82 0f       	add	r24, r18
     512:	93 1f       	adc	r25, r19
     514:	9a 01       	movw	r18, r20
     516:	28 1b       	sub	r18, r24
     518:	39 0b       	sbc	r19, r25
     51a:	c9 01       	movw	r24, r18
     51c:	80 5d       	subi	r24, 0xD0	; 208
     51e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	hx_write_char('0' + SG90_ROTATE_DUTY_CYCLE_REGISTER % 10);
     522:	48 b5       	in	r20, 0x28	; 40
     524:	59 b5       	in	r21, 0x29	; 41
     526:	9a 01       	movw	r18, r20
     528:	ad ec       	ldi	r26, 0xCD	; 205
     52a:	bc ec       	ldi	r27, 0xCC	; 204
     52c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     530:	96 95       	lsr	r25
     532:	87 95       	ror	r24
     534:	96 95       	lsr	r25
     536:	87 95       	ror	r24
     538:	96 95       	lsr	r25
     53a:	87 95       	ror	r24
     53c:	9c 01       	movw	r18, r24
     53e:	22 0f       	add	r18, r18
     540:	33 1f       	adc	r19, r19
     542:	88 0f       	add	r24, r24
     544:	99 1f       	adc	r25, r25
     546:	88 0f       	add	r24, r24
     548:	99 1f       	adc	r25, r25
     54a:	88 0f       	add	r24, r24
     54c:	99 1f       	adc	r25, r25
     54e:	82 0f       	add	r24, r18
     550:	93 1f       	adc	r25, r19
     552:	9a 01       	movw	r18, r20
     554:	28 1b       	sub	r18, r24
     556:	39 0b       	sbc	r19, r25
     558:	c9 01       	movw	r24, r18
     55a:	80 5d       	subi	r24, 0xD0	; 208
     55c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	
	hx_set_coordinates(24, 7);
     560:	67 e0       	ldi	r22, 0x07	; 7
     562:	88 e1       	ldi	r24, 0x18	; 24
     564:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	
	hx_write_char('0' + y / 1000);
     568:	98 01       	movw	r18, r16
     56a:	36 95       	lsr	r19
     56c:	27 95       	ror	r18
     56e:	36 95       	lsr	r19
     570:	27 95       	ror	r18
     572:	36 95       	lsr	r19
     574:	27 95       	ror	r18
     576:	a5 ec       	ldi	r26, 0xC5	; 197
     578:	b0 e2       	ldi	r27, 0x20	; 32
     57a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     57e:	92 95       	swap	r25
     580:	82 95       	swap	r24
     582:	8f 70       	andi	r24, 0x0F	; 15
     584:	89 27       	eor	r24, r25
     586:	9f 70       	andi	r25, 0x0F	; 15
     588:	89 27       	eor	r24, r25
     58a:	80 5d       	subi	r24, 0xD0	; 208
     58c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	hx_write_char('0' + (y / 100) % 10);
     590:	98 01       	movw	r18, r16
     592:	36 95       	lsr	r19
     594:	27 95       	ror	r18
     596:	36 95       	lsr	r19
     598:	27 95       	ror	r18
     59a:	ab e7       	ldi	r26, 0x7B	; 123
     59c:	b4 e1       	ldi	r27, 0x14	; 20
     59e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     5a2:	ac 01       	movw	r20, r24
     5a4:	56 95       	lsr	r21
     5a6:	47 95       	ror	r20
     5a8:	9a 01       	movw	r18, r20
     5aa:	ad ec       	ldi	r26, 0xCD	; 205
     5ac:	bc ec       	ldi	r27, 0xCC	; 204
     5ae:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     5b2:	96 95       	lsr	r25
     5b4:	87 95       	ror	r24
     5b6:	96 95       	lsr	r25
     5b8:	87 95       	ror	r24
     5ba:	96 95       	lsr	r25
     5bc:	87 95       	ror	r24
     5be:	9c 01       	movw	r18, r24
     5c0:	22 0f       	add	r18, r18
     5c2:	33 1f       	adc	r19, r19
     5c4:	88 0f       	add	r24, r24
     5c6:	99 1f       	adc	r25, r25
     5c8:	88 0f       	add	r24, r24
     5ca:	99 1f       	adc	r25, r25
     5cc:	88 0f       	add	r24, r24
     5ce:	99 1f       	adc	r25, r25
     5d0:	82 0f       	add	r24, r18
     5d2:	93 1f       	adc	r25, r19
     5d4:	9a 01       	movw	r18, r20
     5d6:	28 1b       	sub	r18, r24
     5d8:	39 0b       	sbc	r19, r25
     5da:	c9 01       	movw	r24, r18
     5dc:	80 5d       	subi	r24, 0xD0	; 208
     5de:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	hx_write_char('0' + (y / 10) % 10);
     5e2:	98 01       	movw	r18, r16
     5e4:	ad ec       	ldi	r26, 0xCD	; 205
     5e6:	bc ec       	ldi	r27, 0xCC	; 204
     5e8:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     5ec:	ec 01       	movw	r28, r24
     5ee:	d6 95       	lsr	r29
     5f0:	c7 95       	ror	r28
     5f2:	d6 95       	lsr	r29
     5f4:	c7 95       	ror	r28
     5f6:	d6 95       	lsr	r29
     5f8:	c7 95       	ror	r28
     5fa:	9e 01       	movw	r18, r28
     5fc:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     600:	96 95       	lsr	r25
     602:	87 95       	ror	r24
     604:	96 95       	lsr	r25
     606:	87 95       	ror	r24
     608:	96 95       	lsr	r25
     60a:	87 95       	ror	r24
     60c:	9c 01       	movw	r18, r24
     60e:	22 0f       	add	r18, r18
     610:	33 1f       	adc	r19, r19
     612:	88 0f       	add	r24, r24
     614:	99 1f       	adc	r25, r25
     616:	88 0f       	add	r24, r24
     618:	99 1f       	adc	r25, r25
     61a:	88 0f       	add	r24, r24
     61c:	99 1f       	adc	r25, r25
     61e:	82 0f       	add	r24, r18
     620:	93 1f       	adc	r25, r19
     622:	9e 01       	movw	r18, r28
     624:	28 1b       	sub	r18, r24
     626:	39 0b       	sbc	r19, r25
     628:	c9 01       	movw	r24, r18
     62a:	80 5d       	subi	r24, 0xD0	; 208
     62c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	hx_write_char('0' + y % 10);
     630:	ce 01       	movw	r24, r28
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	cc 0f       	add	r28, r28
     638:	dd 1f       	adc	r29, r29
     63a:	cc 0f       	add	r28, r28
     63c:	dd 1f       	adc	r29, r29
     63e:	cc 0f       	add	r28, r28
     640:	dd 1f       	adc	r29, r29
     642:	c8 0f       	add	r28, r24
     644:	d9 1f       	adc	r29, r25
     646:	c8 01       	movw	r24, r16
     648:	8c 1b       	sub	r24, r28
     64a:	9d 0b       	sbc	r25, r29
     64c:	80 5d       	subi	r24, 0xD0	; 208
     64e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	
	hx_set_coordinates(72, 7);
     652:	67 e0       	ldi	r22, 0x07	; 7
     654:	88 e4       	ldi	r24, 0x48	; 72
     656:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	
	hx_write_char('0' + SG90_INCLINE_DUTY_CYCLE_REGISTER / 1000);
     65a:	2a b5       	in	r18, 0x2a	; 42
     65c:	3b b5       	in	r19, 0x2b	; 43
     65e:	36 95       	lsr	r19
     660:	27 95       	ror	r18
     662:	36 95       	lsr	r19
     664:	27 95       	ror	r18
     666:	36 95       	lsr	r19
     668:	27 95       	ror	r18
     66a:	a5 ec       	ldi	r26, 0xC5	; 197
     66c:	b0 e2       	ldi	r27, 0x20	; 32
     66e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     672:	92 95       	swap	r25
     674:	82 95       	swap	r24
     676:	8f 70       	andi	r24, 0x0F	; 15
     678:	89 27       	eor	r24, r25
     67a:	9f 70       	andi	r25, 0x0F	; 15
     67c:	89 27       	eor	r24, r25
     67e:	80 5d       	subi	r24, 0xD0	; 208
     680:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	hx_write_char('0' + (SG90_INCLINE_DUTY_CYCLE_REGISTER / 100) % 10);
     684:	2a b5       	in	r18, 0x2a	; 42
     686:	3b b5       	in	r19, 0x2b	; 43
     688:	36 95       	lsr	r19
     68a:	27 95       	ror	r18
     68c:	36 95       	lsr	r19
     68e:	27 95       	ror	r18
     690:	ab e7       	ldi	r26, 0x7B	; 123
     692:	b4 e1       	ldi	r27, 0x14	; 20
     694:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     698:	ac 01       	movw	r20, r24
     69a:	56 95       	lsr	r21
     69c:	47 95       	ror	r20
     69e:	9a 01       	movw	r18, r20
     6a0:	ad ec       	ldi	r26, 0xCD	; 205
     6a2:	bc ec       	ldi	r27, 0xCC	; 204
     6a4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     6a8:	96 95       	lsr	r25
     6aa:	87 95       	ror	r24
     6ac:	96 95       	lsr	r25
     6ae:	87 95       	ror	r24
     6b0:	96 95       	lsr	r25
     6b2:	87 95       	ror	r24
     6b4:	9c 01       	movw	r18, r24
     6b6:	22 0f       	add	r18, r18
     6b8:	33 1f       	adc	r19, r19
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	88 0f       	add	r24, r24
     6c0:	99 1f       	adc	r25, r25
     6c2:	88 0f       	add	r24, r24
     6c4:	99 1f       	adc	r25, r25
     6c6:	82 0f       	add	r24, r18
     6c8:	93 1f       	adc	r25, r19
     6ca:	9a 01       	movw	r18, r20
     6cc:	28 1b       	sub	r18, r24
     6ce:	39 0b       	sbc	r19, r25
     6d0:	c9 01       	movw	r24, r18
     6d2:	80 5d       	subi	r24, 0xD0	; 208
     6d4:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	hx_write_char('0' + (SG90_INCLINE_DUTY_CYCLE_REGISTER / 10) % 10);
     6d8:	2a b5       	in	r18, 0x2a	; 42
     6da:	3b b5       	in	r19, 0x2b	; 43
     6dc:	ad ec       	ldi	r26, 0xCD	; 205
     6de:	bc ec       	ldi	r27, 0xCC	; 204
     6e0:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     6e4:	ac 01       	movw	r20, r24
     6e6:	56 95       	lsr	r21
     6e8:	47 95       	ror	r20
     6ea:	56 95       	lsr	r21
     6ec:	47 95       	ror	r20
     6ee:	56 95       	lsr	r21
     6f0:	47 95       	ror	r20
     6f2:	9a 01       	movw	r18, r20
     6f4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     6f8:	96 95       	lsr	r25
     6fa:	87 95       	ror	r24
     6fc:	96 95       	lsr	r25
     6fe:	87 95       	ror	r24
     700:	96 95       	lsr	r25
     702:	87 95       	ror	r24
     704:	9c 01       	movw	r18, r24
     706:	22 0f       	add	r18, r18
     708:	33 1f       	adc	r19, r19
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	88 0f       	add	r24, r24
     710:	99 1f       	adc	r25, r25
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	82 0f       	add	r24, r18
     718:	93 1f       	adc	r25, r19
     71a:	9a 01       	movw	r18, r20
     71c:	28 1b       	sub	r18, r24
     71e:	39 0b       	sbc	r19, r25
     720:	c9 01       	movw	r24, r18
     722:	80 5d       	subi	r24, 0xD0	; 208
     724:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	hx_write_char('0' + SG90_INCLINE_DUTY_CYCLE_REGISTER % 10);
     728:	4a b5       	in	r20, 0x2a	; 42
     72a:	5b b5       	in	r21, 0x2b	; 43
     72c:	9a 01       	movw	r18, r20
     72e:	ad ec       	ldi	r26, 0xCD	; 205
     730:	bc ec       	ldi	r27, 0xCC	; 204
     732:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     736:	96 95       	lsr	r25
     738:	87 95       	ror	r24
     73a:	96 95       	lsr	r25
     73c:	87 95       	ror	r24
     73e:	96 95       	lsr	r25
     740:	87 95       	ror	r24
     742:	9c 01       	movw	r18, r24
     744:	22 0f       	add	r18, r18
     746:	33 1f       	adc	r19, r19
     748:	88 0f       	add	r24, r24
     74a:	99 1f       	adc	r25, r25
     74c:	88 0f       	add	r24, r24
     74e:	99 1f       	adc	r25, r25
     750:	88 0f       	add	r24, r24
     752:	99 1f       	adc	r25, r25
     754:	82 0f       	add	r24, r18
     756:	93 1f       	adc	r25, r19
     758:	9a 01       	movw	r18, r20
     75a:	28 1b       	sub	r18, r24
     75c:	39 0b       	sbc	r19, r25
     75e:	c9 01       	movw	r24, r18
     760:	80 5d       	subi	r24, 0xD0	; 208
     762:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	
	
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	ff 90       	pop	r15
     770:	ef 90       	pop	r14
     772:	08 95       	ret

00000774 <hx_send_data>:
}

void hx_send_data(unsigned char _data)
{
	// activate hx1230
	CLEAR_HX_CE;
     774:	a9 98       	cbi	0x15, 1	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	
	// configure communication for data transfer
	SET_HX_DIN;
     776:	ae 9a       	sbi	0x15, 6	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	
	// toggle clock
	SET_HX_CLK;
     778:	af 9a       	sbi	0x15, 7	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	CLEAR_HX_CLK;
     77a:	af 98       	cbi	0x15, 7	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	
	// send the actual data, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
     77c:	27 e0       	ldi	r18, 0x07	; 7
     77e:	30 e0       	ldi	r19, 0x00	; 0
	{
		// calculate bit to be send
		if(((_data >> bit_position) & 1) == 1)
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	ac 01       	movw	r20, r24
     784:	02 2e       	mov	r0, r18
     786:	02 c0       	rjmp	.+4      	; 0x78c <hx_send_data+0x18>
     788:	55 95       	asr	r21
     78a:	47 95       	ror	r20
     78c:	0a 94       	dec	r0
     78e:	e2 f7       	brpl	.-8      	; 0x788 <hx_send_data+0x14>
     790:	40 ff       	sbrs	r20, 0
     792:	02 c0       	rjmp	.+4      	; 0x798 <hx_send_data+0x24>
		{
			SET_HX_DIN;
     794:	ae 9a       	sbi	0x15, 6	; 21
     796:	01 c0       	rjmp	.+2      	; 0x79a <hx_send_data+0x26>
			_delay_us(HX_DELAY_US);
			#endif
		}
		else
		{
			CLEAR_HX_DIN;
     798:	ae 98       	cbi	0x15, 6	; 21
			_delay_us(HX_DELAY_US);
			#endif
		}
		
		// toggle clock
		SET_HX_CLK;
     79a:	af 9a       	sbi	0x15, 7	; 21
		#ifdef HX_DELAY_ENABLED
		_delay_us(HX_DELAY_US);
		#endif
		CLEAR_HX_CLK;
     79c:	af 98       	cbi	0x15, 7	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	
	// send the actual data, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
     79e:	21 50       	subi	r18, 0x01	; 1
     7a0:	31 09       	sbc	r19, r1
     7a2:	78 f7       	brcc	.-34     	; 0x782 <hx_send_data+0xe>
		_delay_us(HX_DELAY_US);
		#endif
	}
	
	// deactivate hx1230
	SET_HX_CE;
     7a4:	a9 9a       	sbi	0x15, 1	; 21
     7a6:	08 95       	ret

000007a8 <hx_send_command>:
}

void hx_send_command(unsigned char _command)
{
	// activate hx1230
	CLEAR_HX_CE;
     7a8:	a9 98       	cbi	0x15, 1	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	
	// configure communication for command transfer
	CLEAR_HX_DIN;
     7aa:	ae 98       	cbi	0x15, 6	; 21
	
	// toggle clock
	SET_HX_CLK;
     7ac:	af 9a       	sbi	0x15, 7	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	CLEAR_HX_CLK;
     7ae:	af 98       	cbi	0x15, 7	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	
	// send the actual command, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
     7b0:	27 e0       	ldi	r18, 0x07	; 7
     7b2:	30 e0       	ldi	r19, 0x00	; 0
	{
		// calculate bit to be send
		if(((_command >> bit_position) & 1) == 1)
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	ac 01       	movw	r20, r24
     7b8:	02 2e       	mov	r0, r18
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <hx_send_command+0x18>
     7bc:	55 95       	asr	r21
     7be:	47 95       	ror	r20
     7c0:	0a 94       	dec	r0
     7c2:	e2 f7       	brpl	.-8      	; 0x7bc <hx_send_command+0x14>
     7c4:	40 ff       	sbrs	r20, 0
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <hx_send_command+0x24>
		{
			SET_HX_DIN;
     7c8:	ae 9a       	sbi	0x15, 6	; 21
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <hx_send_command+0x26>
			_delay_us(HX_DELAY_US);
			#endif
		}
		else
		{
			CLEAR_HX_DIN;
     7cc:	ae 98       	cbi	0x15, 6	; 21
			_delay_us(HX_DELAY_US);
			#endif
		}
		
		// toggle clock
		SET_HX_CLK;
     7ce:	af 9a       	sbi	0x15, 7	; 21
		#ifdef HX_DELAY_ENABLED
		_delay_us(HX_DELAY_US);
		#endif
		CLEAR_HX_CLK;
     7d0:	af 98       	cbi	0x15, 7	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	
	// send the actual command, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
     7d2:	21 50       	subi	r18, 0x01	; 1
     7d4:	31 09       	sbc	r19, r1
     7d6:	78 f7       	brcc	.-34     	; 0x7b6 <hx_send_command+0xe>
		_delay_us(HX_DELAY_US);
		#endif
	}
	
	// deactivate hx1230
	SET_HX_CE;
     7d8:	a9 9a       	sbi	0x15, 1	; 21
     7da:	08 95       	ret

000007dc <init_hx1230_control>:


void init_hx1230_control(void)
{
	// set required pins as output
	HX1230_DDR |= ((1 << HX_RST) | (1 << HX_CE) | (1 << HX_DIN) | (1 << HX_CLK));
     7dc:	84 b3       	in	r24, 0x14	; 20
     7de:	83 6c       	ori	r24, 0xC3	; 195
     7e0:	84 bb       	out	0x14, r24	; 20
	
	// set idle state
	CLEAR_HX_CLK;
     7e2:	af 98       	cbi	0x15, 7	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	CLEAR_HX_RST;
     7e4:	a8 98       	cbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7e6:	2f e7       	ldi	r18, 0x7F	; 127
     7e8:	88 e3       	ldi	r24, 0x38	; 56
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	21 50       	subi	r18, 0x01	; 1
     7ee:	80 40       	sbci	r24, 0x00	; 0
     7f0:	90 40       	sbci	r25, 0x00	; 0
     7f2:	e1 f7       	brne	.-8      	; 0x7ec <init_hx1230_control+0x10>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <init_hx1230_control+0x1a>
     7f6:	00 00       	nop
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	_delay_ms(50);
	SET_HX_RST;
     7f8:	a8 9a       	sbi	0x15, 0	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	CLEAR_HX_CE;
     7fa:	a9 98       	cbi	0x15, 1	; 21
     7fc:	8f ec       	ldi	r24, 0xCF	; 207
     7fe:	97 e0       	ldi	r25, 0x07	; 7
     800:	01 97       	sbiw	r24, 0x01	; 1
     802:	f1 f7       	brne	.-4      	; 0x800 <init_hx1230_control+0x24>
     804:	00 c0       	rjmp	.+0      	; 0x806 <init_hx1230_control+0x2a>
     806:	00 00       	nop
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	_delay_ms(1);
	SET_HX_CE;
     808:	a9 9a       	sbi	0x15, 1	; 21
     80a:	8f ec       	ldi	r24, 0xCF	; 207
     80c:	97 e0       	ldi	r25, 0x07	; 7
     80e:	01 97       	sbiw	r24, 0x01	; 1
     810:	f1 f7       	brne	.-4      	; 0x80e <init_hx1230_control+0x32>
     812:	00 c0       	rjmp	.+0      	; 0x814 <init_hx1230_control+0x38>
     814:	00 00       	nop
	_delay_ms(1);
	
	// commands needed to initialize hx1230 display
	// found within a chinese data sheet
	
	hx_send_command(0x2f);
     816:	8f e2       	ldi	r24, 0x2F	; 47
     818:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <hx_send_command>
	hx_send_command(0x90);
     81c:	80 e9       	ldi	r24, 0x90	; 144
     81e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <hx_send_command>
	hx_send_command(0xa6);
     822:	86 ea       	ldi	r24, 0xA6	; 166
     824:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <hx_send_command>
	hx_send_command(0xa4);
     828:	84 ea       	ldi	r24, 0xA4	; 164
     82a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <hx_send_command>
	hx_send_command(0xaf);
     82e:	8f ea       	ldi	r24, 0xAF	; 175
     830:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <hx_send_command>
	
	hx_send_command(0x40);
     834:	80 e4       	ldi	r24, 0x40	; 64
     836:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <hx_send_command>
	hx_send_command(0xb0);
     83a:	80 eb       	ldi	r24, 0xB0	; 176
     83c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <hx_send_command>
	hx_send_command(0x10);
     840:	80 e1       	ldi	r24, 0x10	; 16
     842:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <hx_send_command>
	hx_send_command(0x00);
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <hx_send_command>
     84c:	08 95       	ret

0000084e <hx_set_coordinates>:
	// deactivate hx1230
	SET_HX_CE;
}

void hx_set_coordinates(unsigned char _x, unsigned char _y)
{
     84e:	cf 93       	push	r28
     850:	c8 2f       	mov	r28, r24
	// 0, 0 is the upper left corner
	
	hx_send_command(0xB0 + _y);
     852:	80 eb       	ldi	r24, 0xB0	; 176
     854:	86 0f       	add	r24, r22
     856:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <hx_send_command>
	hx_send_command(0x10 | ((_x & 0x7F) >> 4));
     85a:	8c 2f       	mov	r24, r28
     85c:	8f 77       	andi	r24, 0x7F	; 127
     85e:	82 95       	swap	r24
     860:	8f 70       	andi	r24, 0x0F	; 15
     862:	80 61       	ori	r24, 0x10	; 16
     864:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <hx_send_command>
	hx_send_command(0x0F & _x);
     868:	8c 2f       	mov	r24, r28
     86a:	8f 70       	andi	r24, 0x0F	; 15
     86c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <hx_send_command>
}
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <hx_clear_screen>:

void hx_clear_screen(void)
{
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
     880:	d9 e0       	ldi	r29, 0x09	; 9
     882:	07 c0       	rjmp	.+14     	; 0x892 <hx_clear_screen+0x1e>
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
	{
		for(col = 0; col <= HX_MAX_COL; col ++)
		{
			hx_send_data(0x00);
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	0e 94 ba 03 	call	0x774	; 0x774 <hx_send_data>
     88a:	c1 50       	subi	r28, 0x01	; 1
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
	{
		for(col = 0; col <= HX_MAX_COL; col ++)
     88c:	d9 f7       	brne	.-10     	; 0x884 <hx_clear_screen+0x10>
     88e:	d1 50       	subi	r29, 0x01	; 1
{
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
     890:	11 f0       	breq	.+4      	; 0x896 <hx_clear_screen+0x22>
	hx_send_command(0x10 | ((_x & 0x7F) >> 4));
	hx_send_command(0x0F & _x);
}

void hx_clear_screen(void)
{
     892:	c1 e6       	ldi	r28, 0x61	; 97
     894:	f7 cf       	rjmp	.-18     	; 0x884 <hx_clear_screen+0x10>
		for(col = 0; col <= HX_MAX_COL; col ++)
		{
			hx_send_data(0x00);
		}
	}
}
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	08 95       	ret

0000089c <hx_fill_screen>:

void hx_fill_screen(void)
{
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
     8a8:	d9 e0       	ldi	r29, 0x09	; 9
     8aa:	07 c0       	rjmp	.+14     	; 0x8ba <hx_fill_screen+0x1e>
	
	for(row = 0; row < 9; row ++)
	{
		for(col = 0; col < 96; col ++)
		{
			hx_send_data(0xFF);
     8ac:	8f ef       	ldi	r24, 0xFF	; 255
     8ae:	0e 94 ba 03 	call	0x774	; 0x774 <hx_send_data>
     8b2:	c1 50       	subi	r28, 0x01	; 1
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row < 9; row ++)
	{
		for(col = 0; col < 96; col ++)
     8b4:	d9 f7       	brne	.-10     	; 0x8ac <hx_fill_screen+0x10>
     8b6:	d1 50       	subi	r29, 0x01	; 1
{
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row < 9; row ++)
     8b8:	11 f0       	breq	.+4      	; 0x8be <hx_fill_screen+0x22>
		}
	}
}

void hx_fill_screen(void)
{
     8ba:	c0 e6       	ldi	r28, 0x60	; 96
     8bc:	f7 cf       	rjmp	.-18     	; 0x8ac <hx_fill_screen+0x10>
		for(col = 0; col < 96; col ++)
		{
			hx_send_data(0xFF);
		}
	}
}
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	08 95       	ret

000008c4 <hx_write_char>:

void hx_write_char(const unsigned char _character)
{
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	ec 01       	movw	r28, r24
     8d0:	cc 0f       	add	r28, r28
     8d2:	dd 1f       	adc	r29, r29
     8d4:	c8 0f       	add	r28, r24
     8d6:	d9 1f       	adc	r29, r25
     8d8:	cc 0f       	add	r28, r28
     8da:	dd 1f       	adc	r29, r29
     8dc:	c3 52       	subi	r28, 0x23	; 35
     8de:	df 4f       	sbci	r29, 0xFF	; 255
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	8c 01       	movw	r16, r24
     8e4:	00 0f       	add	r16, r16
     8e6:	11 1f       	adc	r17, r17
     8e8:	80 0f       	add	r24, r16
     8ea:	91 1f       	adc	r25, r17
     8ec:	8c 01       	movw	r16, r24
     8ee:	00 0f       	add	r16, r16
     8f0:	11 1f       	adc	r17, r17
     8f2:	03 52       	subi	r16, 0x23	; 35
     8f4:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(int row_index = 0; row_index < 6; row_index ++)
	{
		hx_send_data(HX_character[_character][row_index]);
     8f6:	89 91       	ld	r24, Y+
     8f8:	0e 94 ba 03 	call	0x774	; 0x774 <hx_send_data>
}

void hx_write_char(const unsigned char _character)
{
	
	for(int row_index = 0; row_index < 6; row_index ++)
     8fc:	c0 17       	cp	r28, r16
     8fe:	d1 07       	cpc	r29, r17
     900:	d1 f7       	brne	.-12     	; 0x8f6 <hx_write_char+0x32>
	{
		hx_send_data(HX_character[_character][row_index]);
	}
}
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	08 95       	ret

0000090c <hx_write_string>:

void hx_write_string(const char *_characters_array)
{
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
	int string_length = strlen(_characters_array);
     914:	fc 01       	movw	r30, r24
     916:	01 90       	ld	r0, Z+
     918:	00 20       	and	r0, r0
     91a:	e9 f7       	brne	.-6      	; 0x916 <hx_write_string+0xa>
     91c:	31 97       	sbiw	r30, 0x01	; 1
     91e:	e8 1b       	sub	r30, r24
     920:	f9 0b       	sbc	r31, r25
	for(int char_index = 0; char_index < string_length; char_index++)
     922:	1e 16       	cp	r1, r30
     924:	1f 06       	cpc	r1, r31
     926:	54 f4       	brge	.+20     	; 0x93c <hx_write_string+0x30>
     928:	ec 01       	movw	r28, r24
     92a:	8c 01       	movw	r16, r24
     92c:	0e 0f       	add	r16, r30
     92e:	1f 1f       	adc	r17, r31
	{
		hx_write_char((const unsigned char)(_characters_array[char_index]));
     930:	89 91       	ld	r24, Y+
     932:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
}

void hx_write_string(const char *_characters_array)
{
	int string_length = strlen(_characters_array);
	for(int char_index = 0; char_index < string_length; char_index++)
     936:	c0 17       	cp	r28, r16
     938:	d1 07       	cpc	r29, r17
     93a:	d1 f7       	brne	.-12     	; 0x930 <hx_write_string+0x24>
	{
		hx_write_char((const unsigned char)(_characters_array[char_index]));
	}
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	1f 91       	pop	r17
     942:	0f 91       	pop	r16
     944:	08 95       	ret

00000946 <manual_control>:
#include "graphics.h"
#include "joystick_driver.h"
#include "sg90_driver.h"

void manual_control(void)
{
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
	unsigned int x = ADC_get_value(ADC_CHANNEL_X_AXIS);
     94e:	84 e0       	ldi	r24, 0x04	; 4
     950:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_get_value>
     954:	ec 01       	movw	r28, r24
	unsigned int y = ADC_get_value(ADC_CHANNEL_Y_AXIS);
     956:	85 e0       	ldi	r24, 0x05	; 5
     958:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_get_value>
     95c:	8c 01       	movw	r16, r24
	
	display_joystick_data(x, y);
     95e:	bc 01       	movw	r22, r24
     960:	ce 01       	movw	r24, r28
     962:	0e 94 a5 01 	call	0x34a	; 0x34a <display_joystick_data>
	
	if(y > (JOYSTICK_IDLE_VALUE + JOYSTICK_DEAD_ZONE))
     966:	05 36       	cpi	r16, 0x65	; 101
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	18 07       	cpc	r17, r24
     96c:	30 f0       	brcs	.+12     	; 0x97a <manual_control+0x34>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER ++;
     96e:	8a b5       	in	r24, 0x2a	; 42
     970:	9b b5       	in	r25, 0x2b	; 43
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	9b bd       	out	0x2b, r25	; 43
     976:	8a bd       	out	0x2a, r24	; 42
     978:	08 c0       	rjmp	.+16     	; 0x98a <manual_control+0x44>
	}
	else if(y < (JOYSTICK_IDLE_VALUE - JOYSTICK_DEAD_ZONE))
     97a:	0c 39       	cpi	r16, 0x9C	; 156
     97c:	11 40       	sbci	r17, 0x01	; 1
     97e:	28 f4       	brcc	.+10     	; 0x98a <manual_control+0x44>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER --;
     980:	8a b5       	in	r24, 0x2a	; 42
     982:	9b b5       	in	r25, 0x2b	; 43
     984:	01 97       	sbiw	r24, 0x01	; 1
     986:	9b bd       	out	0x2b, r25	; 43
     988:	8a bd       	out	0x2a, r24	; 42
	}
	
	if(x > (JOYSTICK_IDLE_VALUE + JOYSTICK_DEAD_ZONE))
     98a:	c5 36       	cpi	r28, 0x65	; 101
     98c:	82 e0       	ldi	r24, 0x02	; 2
     98e:	d8 07       	cpc	r29, r24
     990:	30 f0       	brcs	.+12     	; 0x99e <manual_control+0x58>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER --;
     992:	88 b5       	in	r24, 0x28	; 40
     994:	99 b5       	in	r25, 0x29	; 41
     996:	01 97       	sbiw	r24, 0x01	; 1
     998:	99 bd       	out	0x29, r25	; 41
     99a:	88 bd       	out	0x28, r24	; 40
     99c:	08 c0       	rjmp	.+16     	; 0x9ae <manual_control+0x68>
	}
	else if(x < (JOYSTICK_IDLE_VALUE - JOYSTICK_DEAD_ZONE))
     99e:	cc 39       	cpi	r28, 0x9C	; 156
     9a0:	d1 40       	sbci	r29, 0x01	; 1
     9a2:	28 f4       	brcc	.+10     	; 0x9ae <manual_control+0x68>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER ++;
     9a4:	88 b5       	in	r24, 0x28	; 40
     9a6:	99 b5       	in	r25, 0x29	; 41
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	99 bd       	out	0x29, r25	; 41
     9ac:	88 bd       	out	0x28, r24	; 40
	}
	
	
	if(SG90_INCLINE_DUTY_CYCLE_REGISTER > SG90_UPPER_INCLINE_LIMIT)
     9ae:	4a b5       	in	r20, 0x2a	; 42
     9b0:	5b b5       	in	r21, 0x2b	; 43
     9b2:	86 b5       	in	r24, 0x26	; 38
     9b4:	97 b5       	in	r25, 0x27	; 39
     9b6:	9c 01       	movw	r18, r24
     9b8:	22 0f       	add	r18, r18
     9ba:	33 1f       	adc	r19, r19
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	88 0f       	add	r24, r24
     9c2:	99 1f       	adc	r25, r25
     9c4:	88 0f       	add	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	28 0f       	add	r18, r24
     9ca:	39 1f       	adc	r19, r25
     9cc:	a1 e6       	ldi	r26, 0x61	; 97
     9ce:	b6 ef       	ldi	r27, 0xF6	; 246
     9d0:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     9d4:	88 0f       	add	r24, r24
     9d6:	89 2f       	mov	r24, r25
     9d8:	88 1f       	adc	r24, r24
     9da:	99 0b       	sbc	r25, r25
     9dc:	91 95       	neg	r25
     9de:	88 97       	sbiw	r24, 0x28	; 40
     9e0:	84 17       	cp	r24, r20
     9e2:	95 07       	cpc	r25, r21
     9e4:	b8 f4       	brcc	.+46     	; 0xa14 <manual_control+0xce>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_UPPER_INCLINE_LIMIT;
     9e6:	86 b5       	in	r24, 0x26	; 38
     9e8:	97 b5       	in	r25, 0x27	; 39
     9ea:	9c 01       	movw	r18, r24
     9ec:	22 0f       	add	r18, r18
     9ee:	33 1f       	adc	r19, r19
     9f0:	88 0f       	add	r24, r24
     9f2:	99 1f       	adc	r25, r25
     9f4:	88 0f       	add	r24, r24
     9f6:	99 1f       	adc	r25, r25
     9f8:	88 0f       	add	r24, r24
     9fa:	99 1f       	adc	r25, r25
     9fc:	28 0f       	add	r18, r24
     9fe:	39 1f       	adc	r19, r25
     a00:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     a04:	88 0f       	add	r24, r24
     a06:	89 2f       	mov	r24, r25
     a08:	88 1f       	adc	r24, r24
     a0a:	99 0b       	sbc	r25, r25
     a0c:	91 95       	neg	r25
     a0e:	88 97       	sbiw	r24, 0x28	; 40
     a10:	9b bd       	out	0x2b, r25	; 43
     a12:	8a bd       	out	0x2a, r24	; 42
	}
	if(SG90_INCLINE_DUTY_CYCLE_REGISTER < SG90_INCLINE_POS_0)
     a14:	4a b5       	in	r20, 0x2a	; 42
     a16:	5b b5       	in	r21, 0x2b	; 43
     a18:	26 b5       	in	r18, 0x26	; 38
     a1a:	37 b5       	in	r19, 0x27	; 39
     a1c:	ad ec       	ldi	r26, 0xCD	; 205
     a1e:	bc ec       	ldi	r27, 0xCC	; 204
     a20:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     a24:	92 95       	swap	r25
     a26:	82 95       	swap	r24
     a28:	8f 70       	andi	r24, 0x0F	; 15
     a2a:	89 27       	eor	r24, r25
     a2c:	9f 70       	andi	r25, 0x0F	; 15
     a2e:	89 27       	eor	r24, r25
     a30:	81 54       	subi	r24, 0x41	; 65
     a32:	91 09       	sbc	r25, r1
     a34:	48 17       	cp	r20, r24
     a36:	59 07       	cpc	r21, r25
     a38:	70 f4       	brcc	.+28     	; 0xa56 <manual_control+0x110>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_INCLINE_POS_0;
     a3a:	26 b5       	in	r18, 0x26	; 38
     a3c:	37 b5       	in	r19, 0x27	; 39
     a3e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     a42:	92 95       	swap	r25
     a44:	82 95       	swap	r24
     a46:	8f 70       	andi	r24, 0x0F	; 15
     a48:	89 27       	eor	r24, r25
     a4a:	9f 70       	andi	r25, 0x0F	; 15
     a4c:	89 27       	eor	r24, r25
     a4e:	81 54       	subi	r24, 0x41	; 65
     a50:	91 09       	sbc	r25, r1
     a52:	9b bd       	out	0x2b, r25	; 43
     a54:	8a bd       	out	0x2a, r24	; 42
	}
	if(SG90_ROTATE_DUTY_CYCLE_REGISTER > SG90_ROTATE_POS_180)
     a56:	48 b5       	in	r20, 0x28	; 40
     a58:	59 b5       	in	r21, 0x29	; 41
     a5a:	26 b5       	in	r18, 0x26	; 38
     a5c:	37 b5       	in	r19, 0x27	; 39
     a5e:	ad ec       	ldi	r26, 0xCD	; 205
     a60:	bc ec       	ldi	r27, 0xCC	; 204
     a62:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     a66:	96 95       	lsr	r25
     a68:	87 95       	ror	r24
     a6a:	96 95       	lsr	r25
     a6c:	87 95       	ror	r24
     a6e:	96 95       	lsr	r25
     a70:	87 95       	ror	r24
     a72:	05 97       	sbiw	r24, 0x05	; 5
     a74:	84 17       	cp	r24, r20
     a76:	95 07       	cpc	r25, r21
     a78:	68 f4       	brcc	.+26     	; 0xa94 <manual_control+0x14e>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_POS_180;
     a7a:	26 b5       	in	r18, 0x26	; 38
     a7c:	37 b5       	in	r19, 0x27	; 39
     a7e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     a82:	96 95       	lsr	r25
     a84:	87 95       	ror	r24
     a86:	96 95       	lsr	r25
     a88:	87 95       	ror	r24
     a8a:	96 95       	lsr	r25
     a8c:	87 95       	ror	r24
     a8e:	05 97       	sbiw	r24, 0x05	; 5
     a90:	99 bd       	out	0x29, r25	; 41
     a92:	88 bd       	out	0x28, r24	; 40
	}
	if(SG90_ROTATE_DUTY_CYCLE_REGISTER < SG90_ROTATE_POS_0)
     a94:	48 b5       	in	r20, 0x28	; 40
     a96:	59 b5       	in	r21, 0x29	; 41
     a98:	26 b5       	in	r18, 0x26	; 38
     a9a:	37 b5       	in	r19, 0x27	; 39
     a9c:	ad ec       	ldi	r26, 0xCD	; 205
     a9e:	bc ec       	ldi	r27, 0xCC	; 204
     aa0:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     aa4:	92 95       	swap	r25
     aa6:	82 95       	swap	r24
     aa8:	8f 70       	andi	r24, 0x0F	; 15
     aaa:	89 27       	eor	r24, r25
     aac:	9f 70       	andi	r25, 0x0F	; 15
     aae:	89 27       	eor	r24, r25
     ab0:	cc 97       	sbiw	r24, 0x3c	; 60
     ab2:	48 17       	cp	r20, r24
     ab4:	59 07       	cpc	r21, r25
     ab6:	68 f4       	brcc	.+26     	; 0xad2 <manual_control+0x18c>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_POS_0;
     ab8:	26 b5       	in	r18, 0x26	; 38
     aba:	37 b5       	in	r19, 0x27	; 39
     abc:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     ac0:	92 95       	swap	r25
     ac2:	82 95       	swap	r24
     ac4:	8f 70       	andi	r24, 0x0F	; 15
     ac6:	89 27       	eor	r24, r25
     ac8:	9f 70       	andi	r25, 0x0F	; 15
     aca:	89 27       	eor	r24, r25
     acc:	cc 97       	sbiw	r24, 0x3c	; 60
     ace:	99 bd       	out	0x29, r25	; 41
     ad0:	88 bd       	out	0x28, r24	; 40
     ad2:	8f e4       	ldi	r24, 0x4F	; 79
     ad4:	93 ec       	ldi	r25, 0xC3	; 195
     ad6:	01 97       	sbiw	r24, 0x01	; 1
     ad8:	f1 f7       	brne	.-4      	; 0xad6 <manual_control+0x190>
     ada:	00 c0       	rjmp	.+0      	; 0xadc <manual_control+0x196>
     adc:	00 00       	nop
	}
	_delay_ms(25);
}
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	08 95       	ret

00000ae8 <get_filtered_light_intensity>:
	adc_value = percentage_value(adc_value);
	return adc_value;
}

int get_filtered_light_intensity(uint8_t sensor)
{
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	d8 2f       	mov	r29, r24
     af2:	cf e0       	ldi	r28, 0x0F	; 15
	uint16_t adc_value = 0;
     af4:	00 e0       	ldi	r16, 0x00	; 0
     af6:	10 e0       	ldi	r17, 0x00	; 0
	for(char i = 0; i < FILTLER_RANK; i++)
	{
		adc_value += ADC_get_value(sensor);
     af8:	8d 2f       	mov	r24, r29
     afa:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_get_value>
     afe:	08 0f       	add	r16, r24
     b00:	19 1f       	adc	r17, r25
     b02:	c1 50       	subi	r28, 0x01	; 1
}

int get_filtered_light_intensity(uint8_t sensor)
{
	uint16_t adc_value = 0;
	for(char i = 0; i < FILTLER_RANK; i++)
     b04:	c9 f7       	brne	.-14     	; 0xaf8 <get_filtered_light_intensity+0x10>
	return adc_value;
}

int percentage_value(int raw_value)
{
	raw_value = raw_value*((long)100)/1023;
     b06:	98 01       	movw	r18, r16
     b08:	a9 e8       	ldi	r26, 0x89	; 137
     b0a:	b8 e8       	ldi	r27, 0x88	; 136
     b0c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     b10:	dc 01       	movw	r26, r24
     b12:	b6 95       	lsr	r27
     b14:	a7 95       	ror	r26
     b16:	b6 95       	lsr	r27
     b18:	a7 95       	ror	r26
     b1a:	b6 95       	lsr	r27
     b1c:	a7 95       	ror	r26
     b1e:	24 e6       	ldi	r18, 0x64	; 100
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__usmulhisi3>
     b26:	2f ef       	ldi	r18, 0xFF	; 255
     b28:	33 e0       	ldi	r19, 0x03	; 3
     b2a:	40 e0       	ldi	r20, 0x00	; 0
     b2c:	50 e0       	ldi	r21, 0x00	; 0
     b2e:	0e 94 cd 08 	call	0x119a	; 0x119a <__divmodsi4>
		adc_value += ADC_get_value(sensor);
	}
	adc_value /= FILTLER_RANK;
	adc_value = percentage_value(adc_value);
	return adc_value;
}
     b32:	84 e6       	ldi	r24, 0x64	; 100
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	82 1b       	sub	r24, r18
     b38:	93 0b       	sbc	r25, r19
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	08 95       	ret

00000b44 <uC_init>:
     b44:	2f ef       	ldi	r18, 0xFF	; 255
     b46:	80 e7       	ldi	r24, 0x70	; 112
     b48:	92 e0       	ldi	r25, 0x02	; 2
     b4a:	21 50       	subi	r18, 0x01	; 1
     b4c:	80 40       	sbci	r24, 0x00	; 0
     b4e:	90 40       	sbci	r25, 0x00	; 0
     b50:	e1 f7       	brne	.-8      	; 0xb4a <uC_init+0x6>
     b52:	00 c0       	rjmp	.+0      	; 0xb54 <uC_init+0x10>
     b54:	00 00       	nop
{
	// Wait for system to get fully powered up
	_delay_ms(100);
	
	// initialize required modules
	ADC_init();
     b56:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
     b5a:	2f e7       	ldi	r18, 0x7F	; 127
     b5c:	88 e3       	ldi	r24, 0x38	; 56
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	21 50       	subi	r18, 0x01	; 1
     b62:	80 40       	sbci	r24, 0x00	; 0
     b64:	90 40       	sbci	r25, 0x00	; 0
     b66:	e1 f7       	brne	.-8      	; 0xb60 <uC_init+0x1c>
     b68:	00 c0       	rjmp	.+0      	; 0xb6a <uC_init+0x26>
     b6a:	00 00       	nop
	_delay_ms(50);
	
	init_pwm_channels();
     b6c:	0e 94 47 06 	call	0xc8e	; 0xc8e <init_pwm_channels>
     b70:	2f e7       	ldi	r18, 0x7F	; 127
     b72:	88 e3       	ldi	r24, 0x38	; 56
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	21 50       	subi	r18, 0x01	; 1
     b78:	80 40       	sbci	r24, 0x00	; 0
     b7a:	90 40       	sbci	r25, 0x00	; 0
     b7c:	e1 f7       	brne	.-8      	; 0xb76 <uC_init+0x32>
     b7e:	00 c0       	rjmp	.+0      	; 0xb80 <uC_init+0x3c>
     b80:	00 00       	nop
	_delay_ms(50);
	
	init_user_interface();
     b82:	0e 94 92 08 	call	0x1124	; 0x1124 <init_user_interface>
     b86:	2f e7       	ldi	r18, 0x7F	; 127
     b88:	88 e3       	ldi	r24, 0x38	; 56
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	21 50       	subi	r18, 0x01	; 1
     b8e:	80 40       	sbci	r24, 0x00	; 0
     b90:	90 40       	sbci	r25, 0x00	; 0
     b92:	e1 f7       	brne	.-8      	; 0xb8c <uC_init+0x48>
     b94:	00 c0       	rjmp	.+0      	; 0xb96 <uC_init+0x52>
     b96:	00 00       	nop
	_delay_ms(50);
	
	init_hx1230_control();
     b98:	0e 94 ee 03 	call	0x7dc	; 0x7dc <init_hx1230_control>
     b9c:	2f e7       	ldi	r18, 0x7F	; 127
     b9e:	88 e3       	ldi	r24, 0x38	; 56
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	21 50       	subi	r18, 0x01	; 1
     ba4:	80 40       	sbci	r24, 0x00	; 0
     ba6:	90 40       	sbci	r25, 0x00	; 0
     ba8:	e1 f7       	brne	.-8      	; 0xba2 <uC_init+0x5e>
     baa:	00 c0       	rjmp	.+0      	; 0xbac <uC_init+0x68>
     bac:	00 00       	nop
	_delay_ms(50);
	hx_fill_screen();
     bae:	0e 94 4e 04 	call	0x89c	; 0x89c <hx_fill_screen>
     bb2:	2f ef       	ldi	r18, 0xFF	; 255
     bb4:	84 e3       	ldi	r24, 0x34	; 52
     bb6:	9c e0       	ldi	r25, 0x0C	; 12
     bb8:	21 50       	subi	r18, 0x01	; 1
     bba:	80 40       	sbci	r24, 0x00	; 0
     bbc:	90 40       	sbci	r25, 0x00	; 0
     bbe:	e1 f7       	brne	.-8      	; 0xbb8 <uC_init+0x74>
     bc0:	00 c0       	rjmp	.+0      	; 0xbc2 <uC_init+0x7e>
     bc2:	00 00       	nop
	_delay_ms(500);
	hx_clear_screen();
     bc4:	0e 94 3a 04 	call	0x874	; 0x874 <hx_clear_screen>
     bc8:	2f e7       	ldi	r18, 0x7F	; 127
     bca:	88 e3       	ldi	r24, 0x38	; 56
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	21 50       	subi	r18, 0x01	; 1
     bd0:	80 40       	sbci	r24, 0x00	; 0
     bd2:	90 40       	sbci	r25, 0x00	; 0
     bd4:	e1 f7       	brne	.-8      	; 0xbce <uC_init+0x8a>
     bd6:	00 c0       	rjmp	.+0      	; 0xbd8 <uC_init+0x94>
     bd8:	00 00       	nop
	_delay_ms(50);
	
	display_title();
     bda:	0e 94 5a 00 	call	0xb4	; 0xb4 <display_title>
	display_idle_state_message();
     bde:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <display_idle_state_message>
	
	sei(); // enable global interrupts
     be2:	78 94       	sei
     be4:	08 95       	ret

00000be6 <main>:

void uC_init(void);

int main(void)
{
	STATE = STATE_INIT;
     be6:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <STATE>
	OLD_STATE = STATE_INIT;
     bea:	10 92 de 06 	sts	0x06DE, r1	; 0x8006de <__data_end>
	uC_init();
     bee:	0e 94 a2 05 	call	0xb44	; 0xb44 <uC_init>
	
	SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_INCLINE_POS_0;
     bf2:	26 b5       	in	r18, 0x26	; 38
     bf4:	37 b5       	in	r19, 0x27	; 39
     bf6:	ad ec       	ldi	r26, 0xCD	; 205
     bf8:	bc ec       	ldi	r27, 0xCC	; 204
     bfa:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     bfe:	92 95       	swap	r25
     c00:	82 95       	swap	r24
     c02:	8f 70       	andi	r24, 0x0F	; 15
     c04:	89 27       	eor	r24, r25
     c06:	9f 70       	andi	r25, 0x0F	; 15
     c08:	89 27       	eor	r24, r25
     c0a:	81 54       	subi	r24, 0x41	; 65
     c0c:	91 09       	sbc	r25, r1
     c0e:	9b bd       	out	0x2b, r25	; 43
     c10:	8a bd       	out	0x2a, r24	; 42
	SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_POS_90;
     c12:	86 b5       	in	r24, 0x26	; 38
     c14:	97 b5       	in	r25, 0x27	; 39
     c16:	9c 01       	movw	r18, r24
     c18:	22 0f       	add	r18, r18
     c1a:	33 1f       	adc	r19, r19
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	28 0f       	add	r18, r24
     c2a:	39 1f       	adc	r19, r25
     c2c:	a1 e6       	ldi	r26, 0x61	; 97
     c2e:	b6 ef       	ldi	r27, 0xF6	; 246
     c30:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     c34:	88 0f       	add	r24, r24
     c36:	89 2f       	mov	r24, r25
     c38:	88 1f       	adc	r24, r24
     c3a:	99 0b       	sbc	r25, r25
     c3c:	91 95       	neg	r25
     c3e:	85 97       	sbiw	r24, 0x25	; 37
     c40:	99 bd       	out	0x29, r25	; 41
     c42:	88 bd       	out	0x28, r24	; 40
	turn_on_pwm_channels();
     c44:	0e 94 5f 06 	call	0xcbe	; 0xcbe <turn_on_pwm_channels>
	
	
	STATE = STATE_IDLE;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <STATE>
	while (1)
	{
		/*PORTC = ~PORTC;
		_delay_ms(100);*/
		
		if(STATE_CHANGED)
     c4e:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <STATE>
     c52:	90 91 de 06 	lds	r25, 0x06DE	; 0x8006de <__data_end>
     c56:	98 17       	cp	r25, r24
     c58:	71 f0       	breq	.+28     	; 0xc76 <main+0x90>
		{
			OLD_STATE = STATE; // update state
     c5a:	80 93 de 06 	sts	0x06DE, r24	; 0x8006de <__data_end>
			go_to_state(STATE);
     c5e:	0e 94 9c 06 	call	0xd38	; 0xd38 <go_to_state>
     c62:	2f e7       	ldi	r18, 0x7F	; 127
     c64:	8a e1       	ldi	r24, 0x1A	; 26
     c66:	96 e0       	ldi	r25, 0x06	; 6
     c68:	21 50       	subi	r18, 0x01	; 1
     c6a:	80 40       	sbci	r24, 0x00	; 0
     c6c:	90 40       	sbci	r25, 0x00	; 0
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <main+0x82>
     c70:	00 c0       	rjmp	.+0      	; 0xc72 <main+0x8c>
     c72:	00 00       	nop
			_delay_ms(250);
			sei(); // enable interrupts
     c74:	78 94       	sei
		}
		
		switch(OLD_STATE)
     c76:	80 91 de 06 	lds	r24, 0x06DE	; 0x8006de <__data_end>
     c7a:	82 30       	cpi	r24, 0x02	; 2
     c7c:	29 f0       	breq	.+10     	; 0xc88 <main+0xa2>
     c7e:	83 30       	cpi	r24, 0x03	; 3
     c80:	31 f7       	brne	.-52     	; 0xc4e <main+0x68>
		{
			case STATE_TRACKING:
			{
				track();
     c82:	0e 94 b9 06 	call	0xd72	; 0xd72 <track>
				break;
     c86:	e3 cf       	rjmp	.-58     	; 0xc4e <main+0x68>
			}
			case STATE_MANUAL:
			{
				manual_control();
     c88:	0e 94 a3 04 	call	0x946	; 0x946 <manual_control>
				break;
     c8c:	e0 cf       	rjmp	.-64     	; 0xc4e <main+0x68>

00000c8e <init_pwm_channels>:
#include "global.h"
#include <avr/io.h>

void init_pwm_channels(void)
{
	DDRD |= (1 << DDD4)|(1 << DDD5);
     c8e:	81 b3       	in	r24, 0x11	; 17
     c90:	80 63       	ori	r24, 0x30	; 48
     c92:	81 bb       	out	0x11, r24	; 17
	// PD4 and PD5 as output of 16bits Timer1
	
	 ICR1 = 2499;
     c94:	83 ec       	ldi	r24, 0xC3	; 195
     c96:	99 e0       	ldi	r25, 0x09	; 9
     c98:	97 bd       	out	0x27, r25	; 39
     c9a:	86 bd       	out	0x26, r24	; 38
	 // set TOP to count 20ms
	 // TOP calculated by the formula: F_PWM = F_CPU/(PRESCALER*(1 + TOP))
	 // Atmel-42735-8-bit-AVR-Microcontroller-ATmega328-328P_Datasheet, page 164

	 OCR1A = 00;
     c9c:	1b bc       	out	0x2b, r1	; 43
     c9e:	1a bc       	out	0x2a, r1	; 42
	 // set PWM for 0% duty cycle

	 OCR1B = 00;
     ca0:	19 bc       	out	0x29, r1	; 41
     ca2:	18 bc       	out	0x28, r1	; 40
	 // set PWM for 0% duty cycle

	 TCCR1A &= ~((1 << COM1A1)|(1 << COM1B1));
     ca4:	8f b5       	in	r24, 0x2f	; 47
     ca6:	8f 75       	andi	r24, 0x5F	; 95
     ca8:	8f bd       	out	0x2f, r24	; 47
	 // make sure PWM signal is off

	TCCR1B |= (1 << CS11 | 1 << CS10);
     caa:	8e b5       	in	r24, 0x2e	; 46
     cac:	83 60       	ori	r24, 0x03	; 3
     cae:	8e bd       	out	0x2e, r24	; 46
	// START the timer with 64 prescaler

	 TCCR1A |= (1 << WGM11);
     cb0:	8f b5       	in	r24, 0x2f	; 47
     cb2:	82 60       	ori	r24, 0x02	; 2
     cb4:	8f bd       	out	0x2f, r24	; 47
	 TCCR1B |= (1 << WGM12)|(1 << WGM13);
     cb6:	8e b5       	in	r24, 0x2e	; 46
     cb8:	88 61       	ori	r24, 0x18	; 24
     cba:	8e bd       	out	0x2e, r24	; 46
     cbc:	08 95       	ret

00000cbe <turn_on_pwm_channels>:
	 // set Fast PWM mode using ICR1 as TOP
}

void turn_on_pwm_channels(void)
{
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1);
     cbe:	8f b5       	in	r24, 0x2f	; 47
     cc0:	80 6a       	ori	r24, 0xA0	; 160
     cc2:	8f bd       	out	0x2f, r24	; 47
     cc4:	08 95       	ret

00000cc6 <idle_state_setup>:
     cc6:	2f ef       	ldi	r18, 0xFF	; 255
     cc8:	81 ee       	ldi	r24, 0xE1	; 225
     cca:	94 e0       	ldi	r25, 0x04	; 4
     ccc:	21 50       	subi	r18, 0x01	; 1
     cce:	80 40       	sbci	r24, 0x00	; 0
     cd0:	90 40       	sbci	r25, 0x00	; 0
     cd2:	e1 f7       	brne	.-8      	; 0xccc <idle_state_setup+0x6>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <idle_state_setup+0x10>
     cd6:	00 00       	nop
}

void idle_state_setup(void)
{
	_delay_ms(200);
	hx_clear_screen();
     cd8:	0e 94 3a 04 	call	0x874	; 0x874 <hx_clear_screen>
	display_title();
     cdc:	0e 94 5a 00 	call	0xb4	; 0xb4 <display_title>
	display_idle_state_message();
     ce0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <display_idle_state_message>
     ce4:	08 95       	ret

00000ce6 <manual_state_setup>:
     ce6:	2f ef       	ldi	r18, 0xFF	; 255
     ce8:	81 ee       	ldi	r24, 0xE1	; 225
     cea:	94 e0       	ldi	r25, 0x04	; 4
     cec:	21 50       	subi	r18, 0x01	; 1
     cee:	80 40       	sbci	r24, 0x00	; 0
     cf0:	90 40       	sbci	r25, 0x00	; 0
     cf2:	e1 f7       	brne	.-8      	; 0xcec <manual_state_setup+0x6>
     cf4:	00 c0       	rjmp	.+0      	; 0xcf6 <manual_state_setup+0x10>
     cf6:	00 00       	nop
}

void manual_state_setup(void)
{
	_delay_ms(200);
	hx_clear_screen();
     cf8:	0e 94 3a 04 	call	0x874	; 0x874 <hx_clear_screen>
	display_title();
     cfc:	0e 94 5a 00 	call	0xb4	; 0xb4 <display_title>
	display_manual_state_message();
     d00:	0e 94 74 01 	call	0x2e8	; 0x2e8 <display_manual_state_message>
     d04:	08 95       	ret

00000d06 <tracking_state_setup>:
     d06:	2f ef       	ldi	r18, 0xFF	; 255
     d08:	81 ee       	ldi	r24, 0xE1	; 225
     d0a:	94 e0       	ldi	r25, 0x04	; 4
     d0c:	21 50       	subi	r18, 0x01	; 1
     d0e:	80 40       	sbci	r24, 0x00	; 0
     d10:	90 40       	sbci	r25, 0x00	; 0
     d12:	e1 f7       	brne	.-8      	; 0xd0c <tracking_state_setup+0x6>
     d14:	00 c0       	rjmp	.+0      	; 0xd16 <tracking_state_setup+0x10>
     d16:	00 00       	nop
}

void tracking_state_setup(void)
{
	_delay_ms(200);
	hx_clear_screen();
     d18:	0e 94 3a 04 	call	0x874	; 0x874 <hx_clear_screen>
	display_title();
     d1c:	0e 94 5a 00 	call	0xb4	; 0xb4 <display_title>
	display_data_menu();
     d20:	0e 94 6b 00 	call	0xd6	; 0xd6 <display_data_menu>
     d24:	2f ef       	ldi	r18, 0xFF	; 255
     d26:	84 e3       	ldi	r24, 0x34	; 52
     d28:	9c e0       	ldi	r25, 0x0C	; 12
     d2a:	21 50       	subi	r18, 0x01	; 1
     d2c:	80 40       	sbci	r24, 0x00	; 0
     d2e:	90 40       	sbci	r25, 0x00	; 0
     d30:	e1 f7       	brne	.-8      	; 0xd2a <tracking_state_setup+0x24>
     d32:	00 c0       	rjmp	.+0      	; 0xd34 <tracking_state_setup+0x2e>
     d34:	00 00       	nop
     d36:	08 95       	ret

00000d38 <go_to_state>:
#include "graphics.h"
#include "state_handler.h"
#include "hx1230.h"

void go_to_state(unsigned char state)
{
     d38:	cf 93       	push	r28
     d3a:	c8 2f       	mov	r28, r24
	hx_clear_screen();
     d3c:	0e 94 3a 04 	call	0x874	; 0x874 <hx_clear_screen>
	switch(state)
     d40:	c2 30       	cpi	r28, 0x02	; 2
     d42:	51 f0       	breq	.+20     	; 0xd58 <go_to_state+0x20>
     d44:	c3 30       	cpi	r28, 0x03	; 3
     d46:	71 f0       	breq	.+28     	; 0xd64 <go_to_state+0x2c>
     d48:	c1 30       	cpi	r28, 0x01	; 1
     d4a:	89 f4       	brne	.+34     	; 0xd6e <go_to_state+0x36>
	{
		case STATE_IDLE:
		{
			STATE = STATE_IDLE; // update global state
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <STATE>
			idle_state_setup();
     d52:	0e 94 63 06 	call	0xcc6	; 0xcc6 <idle_state_setup>
			break;
     d56:	0b c0       	rjmp	.+22     	; 0xd6e <go_to_state+0x36>
		}
		case STATE_MANUAL:
		{
			STATE = STATE_MANUAL; // update global state
     d58:	82 e0       	ldi	r24, 0x02	; 2
     d5a:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <STATE>
			manual_state_setup();
     d5e:	0e 94 73 06 	call	0xce6	; 0xce6 <manual_state_setup>
			break;
     d62:	05 c0       	rjmp	.+10     	; 0xd6e <go_to_state+0x36>
		}
		case STATE_TRACKING:
		{
			STATE = STATE_TRACKING; // update global state
     d64:	83 e0       	ldi	r24, 0x03	; 3
     d66:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <STATE>
			tracking_state_setup();
     d6a:	0e 94 83 06 	call	0xd06	; 0xd06 <tracking_state_setup>
			break;
		}
	}
}
     d6e:	cf 91       	pop	r28
     d70:	08 95       	ret

00000d72 <track>:

int up_down_movement_gradient_request;
int left_right_movement_gradient_request;

void track(void)
{
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
	light_up_left = get_filtered_light_intensity(LS_UP_LEFT);
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	0e 94 74 05 	call	0xae8	; 0xae8 <get_filtered_light_intensity>
     d7c:	90 93 f3 06 	sts	0x06F3, r25	; 0x8006f3 <light_up_left+0x1>
     d80:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <light_up_left>
	light_up_right = get_filtered_light_intensity(LS_UP_RIGHT);
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	0e 94 74 05 	call	0xae8	; 0xae8 <get_filtered_light_intensity>
     d8a:	90 93 e5 06 	sts	0x06E5, r25	; 0x8006e5 <light_up_right+0x1>
     d8e:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <light_up_right>
	light_down_left = get_filtered_light_intensity(LS_DOWN_LEFT);
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	0e 94 74 05 	call	0xae8	; 0xae8 <get_filtered_light_intensity>
     d98:	90 93 ef 06 	sts	0x06EF, r25	; 0x8006ef <light_down_left+0x1>
     d9c:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <light_down_left>
	light_down_right = get_filtered_light_intensity(LS_DOWN_RIGHT);
     da0:	83 e0       	ldi	r24, 0x03	; 3
     da2:	0e 94 74 05 	call	0xae8	; 0xae8 <get_filtered_light_intensity>
     da6:	90 93 e7 06 	sts	0x06E7, r25	; 0x8006e7 <light_down_right+0x1>
     daa:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <light_down_right>
	
	display_light_sensor_data(LS_UP_LEFT, light_up_left);
     dae:	60 91 f2 06 	lds	r22, 0x06F2	; 0x8006f2 <light_up_left>
     db2:	70 91 f3 06 	lds	r23, 0x06F3	; 0x8006f3 <light_up_left+0x1>
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	0e 94 84 00 	call	0x108	; 0x108 <display_light_sensor_data>
	display_light_sensor_data(LS_UP_RIGHT, light_up_right);
     dbc:	60 91 e4 06 	lds	r22, 0x06E4	; 0x8006e4 <light_up_right>
     dc0:	70 91 e5 06 	lds	r23, 0x06E5	; 0x8006e5 <light_up_right+0x1>
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	0e 94 84 00 	call	0x108	; 0x108 <display_light_sensor_data>
	display_light_sensor_data(LS_DOWN_LEFT, light_down_left);
     dca:	60 91 ee 06 	lds	r22, 0x06EE	; 0x8006ee <light_down_left>
     dce:	70 91 ef 06 	lds	r23, 0x06EF	; 0x8006ef <light_down_left+0x1>
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	0e 94 84 00 	call	0x108	; 0x108 <display_light_sensor_data>
	display_light_sensor_data(LS_DOWN_RIGHT, light_down_right);
     dd8:	60 91 e6 06 	lds	r22, 0x06E6	; 0x8006e6 <light_down_right>
     ddc:	70 91 e7 06 	lds	r23, 0x06E7	; 0x8006e7 <light_down_right+0x1>
     de0:	83 e0       	ldi	r24, 0x03	; 3
     de2:	0e 94 84 00 	call	0x108	; 0x108 <display_light_sensor_data>
	
	up_intensity_average = light_up_left + light_up_right;
     de6:	e0 91 f2 06 	lds	r30, 0x06F2	; 0x8006f2 <light_up_left>
     dea:	f0 91 f3 06 	lds	r31, 0x06F3	; 0x8006f3 <light_up_left+0x1>
     dee:	60 91 e4 06 	lds	r22, 0x06E4	; 0x8006e4 <light_up_right>
     df2:	70 91 e5 06 	lds	r23, 0x06E5	; 0x8006e5 <light_up_right+0x1>
	up_intensity_average >>= 1;
     df6:	af 01       	movw	r20, r30
     df8:	46 0f       	add	r20, r22
     dfa:	57 1f       	adc	r21, r23
     dfc:	55 95       	asr	r21
     dfe:	47 95       	ror	r20
     e00:	50 93 f1 06 	sts	0x06F1, r21	; 0x8006f1 <up_intensity_average+0x1>
     e04:	40 93 f0 06 	sts	0x06F0, r20	; 0x8006f0 <up_intensity_average>
	
	down_intensity_average = light_down_left + light_down_right;
     e08:	20 91 ee 06 	lds	r18, 0x06EE	; 0x8006ee <light_down_left>
     e0c:	30 91 ef 06 	lds	r19, 0x06EF	; 0x8006ef <light_down_left+0x1>
     e10:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <light_down_right>
     e14:	90 91 e7 06 	lds	r25, 0x06E7	; 0x8006e7 <light_down_right+0x1>
	down_intensity_average >>= 1;
     e18:	a9 01       	movw	r20, r18
     e1a:	48 0f       	add	r20, r24
     e1c:	59 1f       	adc	r21, r25
     e1e:	55 95       	asr	r21
     e20:	47 95       	ror	r20
     e22:	50 93 e1 06 	sts	0x06E1, r21	; 0x8006e1 <down_intensity_average+0x1>
     e26:	40 93 e0 06 	sts	0x06E0, r20	; 0x8006e0 <down_intensity_average>
	
	left_intensity_average = light_up_left + light_down_left;
	left_intensity_average >>= 1;
     e2a:	2e 0f       	add	r18, r30
     e2c:	3f 1f       	adc	r19, r31
     e2e:	35 95       	asr	r19
     e30:	27 95       	ror	r18
     e32:	30 93 e3 06 	sts	0x06E3, r19	; 0x8006e3 <left_intensity_average+0x1>
     e36:	20 93 e2 06 	sts	0x06E2, r18	; 0x8006e2 <left_intensity_average>
	
	right_intensity_average = light_up_right + light_down_right;
	right_intensity_average >>= 1;
     e3a:	86 0f       	add	r24, r22
     e3c:	97 1f       	adc	r25, r23
     e3e:	95 95       	asr	r25
     e40:	87 95       	ror	r24
     e42:	90 93 ed 06 	sts	0x06ED, r25	; 0x8006ed <right_intensity_average+0x1>
     e46:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <right_intensity_average>
	
	hx_set_coordinates(42, 2);
     e4a:	62 e0       	ldi	r22, 0x02	; 2
     e4c:	8a e2       	ldi	r24, 0x2A	; 42
     e4e:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	hx_write_char('0' + (up_intensity_average / 10) % 10);
     e52:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <up_intensity_average>
     e56:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <up_intensity_average+0x1>
     e5a:	ca e0       	ldi	r28, 0x0A	; 10
     e5c:	d0 e0       	ldi	r29, 0x00	; 0
     e5e:	be 01       	movw	r22, r28
     e60:	0e 94 b9 08 	call	0x1172	; 0x1172 <__divmodhi4>
     e64:	cb 01       	movw	r24, r22
     e66:	be 01       	movw	r22, r28
     e68:	0e 94 b9 08 	call	0x1172	; 0x1172 <__divmodhi4>
     e6c:	80 5d       	subi	r24, 0xD0	; 208
     e6e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	hx_write_char('0' + up_intensity_average % 10);
     e72:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <up_intensity_average>
     e76:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <up_intensity_average+0x1>
     e7a:	be 01       	movw	r22, r28
     e7c:	0e 94 b9 08 	call	0x1172	; 0x1172 <__divmodhi4>
     e80:	80 5d       	subi	r24, 0xD0	; 208
     e82:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	
	hx_set_coordinates(42, 6);
     e86:	66 e0       	ldi	r22, 0x06	; 6
     e88:	8a e2       	ldi	r24, 0x2A	; 42
     e8a:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	hx_write_char('0' + (down_intensity_average / 10) % 10);
     e8e:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <down_intensity_average>
     e92:	90 91 e1 06 	lds	r25, 0x06E1	; 0x8006e1 <down_intensity_average+0x1>
     e96:	be 01       	movw	r22, r28
     e98:	0e 94 b9 08 	call	0x1172	; 0x1172 <__divmodhi4>
     e9c:	cb 01       	movw	r24, r22
     e9e:	be 01       	movw	r22, r28
     ea0:	0e 94 b9 08 	call	0x1172	; 0x1172 <__divmodhi4>
     ea4:	80 5d       	subi	r24, 0xD0	; 208
     ea6:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	hx_write_char('0' + down_intensity_average % 10);
     eaa:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <down_intensity_average>
     eae:	90 91 e1 06 	lds	r25, 0x06E1	; 0x8006e1 <down_intensity_average+0x1>
     eb2:	be 01       	movw	r22, r28
     eb4:	0e 94 b9 08 	call	0x1172	; 0x1172 <__divmodhi4>
     eb8:	80 5d       	subi	r24, 0xD0	; 208
     eba:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	
	hx_set_coordinates(6, 4);
     ebe:	64 e0       	ldi	r22, 0x04	; 4
     ec0:	86 e0       	ldi	r24, 0x06	; 6
     ec2:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	hx_write_char('0' + (left_intensity_average / 10) % 10);
     ec6:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <left_intensity_average>
     eca:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <left_intensity_average+0x1>
     ece:	be 01       	movw	r22, r28
     ed0:	0e 94 b9 08 	call	0x1172	; 0x1172 <__divmodhi4>
     ed4:	cb 01       	movw	r24, r22
     ed6:	be 01       	movw	r22, r28
     ed8:	0e 94 b9 08 	call	0x1172	; 0x1172 <__divmodhi4>
     edc:	80 5d       	subi	r24, 0xD0	; 208
     ede:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	hx_write_char('0' + left_intensity_average % 10);
     ee2:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <left_intensity_average>
     ee6:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <left_intensity_average+0x1>
     eea:	be 01       	movw	r22, r28
     eec:	0e 94 b9 08 	call	0x1172	; 0x1172 <__divmodhi4>
     ef0:	80 5d       	subi	r24, 0xD0	; 208
     ef2:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	
	hx_set_coordinates(78, 4);
     ef6:	64 e0       	ldi	r22, 0x04	; 4
     ef8:	8e e4       	ldi	r24, 0x4E	; 78
     efa:	0e 94 27 04 	call	0x84e	; 0x84e <hx_set_coordinates>
	hx_write_char('0' + (right_intensity_average / 10) % 10);
     efe:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <right_intensity_average>
     f02:	90 91 ed 06 	lds	r25, 0x06ED	; 0x8006ed <right_intensity_average+0x1>
     f06:	be 01       	movw	r22, r28
     f08:	0e 94 b9 08 	call	0x1172	; 0x1172 <__divmodhi4>
     f0c:	cb 01       	movw	r24, r22
     f0e:	be 01       	movw	r22, r28
     f10:	0e 94 b9 08 	call	0x1172	; 0x1172 <__divmodhi4>
     f14:	80 5d       	subi	r24, 0xD0	; 208
     f16:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	hx_write_char('0' + right_intensity_average % 10);
     f1a:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <right_intensity_average>
     f1e:	90 91 ed 06 	lds	r25, 0x06ED	; 0x8006ed <right_intensity_average+0x1>
     f22:	be 01       	movw	r22, r28
     f24:	0e 94 b9 08 	call	0x1172	; 0x1172 <__divmodhi4>
     f28:	80 5d       	subi	r24, 0xD0	; 208
     f2a:	0e 94 62 04 	call	0x8c4	; 0x8c4 <hx_write_char>
	
	up_down_movement_gradient_request = up_intensity_average - down_intensity_average;
     f2e:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <up_intensity_average>
     f32:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <up_intensity_average+0x1>
     f36:	20 91 e0 06 	lds	r18, 0x06E0	; 0x8006e0 <down_intensity_average>
     f3a:	30 91 e1 06 	lds	r19, 0x06E1	; 0x8006e1 <down_intensity_average+0x1>
     f3e:	82 1b       	sub	r24, r18
     f40:	93 0b       	sbc	r25, r19
     f42:	90 93 e9 06 	sts	0x06E9, r25	; 0x8006e9 <up_down_movement_gradient_request+0x1>
     f46:	80 93 e8 06 	sts	0x06E8, r24	; 0x8006e8 <up_down_movement_gradient_request>
	left_right_movement_gradient_request = left_intensity_average - right_intensity_average;
     f4a:	20 91 e2 06 	lds	r18, 0x06E2	; 0x8006e2 <left_intensity_average>
     f4e:	30 91 e3 06 	lds	r19, 0x06E3	; 0x8006e3 <left_intensity_average+0x1>
     f52:	40 91 ec 06 	lds	r20, 0x06EC	; 0x8006ec <right_intensity_average>
     f56:	50 91 ed 06 	lds	r21, 0x06ED	; 0x8006ed <right_intensity_average+0x1>
     f5a:	24 1b       	sub	r18, r20
     f5c:	35 0b       	sbc	r19, r21
     f5e:	30 93 eb 06 	sts	0x06EB, r19	; 0x8006eb <left_right_movement_gradient_request+0x1>
     f62:	20 93 ea 06 	sts	0x06EA, r18	; 0x8006ea <left_right_movement_gradient_request>
	
	if(abs(up_down_movement_gradient_request) > TRACKING_TOLERANCE)
     f66:	9c 01       	movw	r18, r24
     f68:	99 23       	and	r25, r25
     f6a:	24 f4       	brge	.+8      	; 0xf74 <track+0x202>
     f6c:	22 27       	eor	r18, r18
     f6e:	33 27       	eor	r19, r19
     f70:	28 1b       	sub	r18, r24
     f72:	39 0b       	sbc	r19, r25
     f74:	23 30       	cpi	r18, 0x03	; 3
     f76:	31 05       	cpc	r19, r1
     f78:	84 f0       	brlt	.+32     	; 0xf9a <track+0x228>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER -= up_down_movement_gradient_request / 4;
     f7a:	4a b5       	in	r20, 0x2a	; 42
     f7c:	5b b5       	in	r21, 0x2b	; 43
     f7e:	9c 01       	movw	r18, r24
     f80:	99 23       	and	r25, r25
     f82:	14 f4       	brge	.+4      	; 0xf88 <track+0x216>
     f84:	2d 5f       	subi	r18, 0xFD	; 253
     f86:	3f 4f       	sbci	r19, 0xFF	; 255
     f88:	35 95       	asr	r19
     f8a:	27 95       	ror	r18
     f8c:	35 95       	asr	r19
     f8e:	27 95       	ror	r18
     f90:	ca 01       	movw	r24, r20
     f92:	82 1b       	sub	r24, r18
     f94:	93 0b       	sbc	r25, r19
     f96:	9b bd       	out	0x2b, r25	; 43
     f98:	8a bd       	out	0x2a, r24	; 42
	}
	
	if(abs(left_right_movement_gradient_request) > TRACKING_TOLERANCE)
     f9a:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <left_right_movement_gradient_request>
     f9e:	90 91 eb 06 	lds	r25, 0x06EB	; 0x8006eb <left_right_movement_gradient_request+0x1>
     fa2:	9c 01       	movw	r18, r24
     fa4:	99 23       	and	r25, r25
     fa6:	24 f4       	brge	.+8      	; 0xfb0 <track+0x23e>
     fa8:	22 27       	eor	r18, r18
     faa:	33 27       	eor	r19, r19
     fac:	28 1b       	sub	r18, r24
     fae:	39 0b       	sbc	r19, r25
     fb0:	23 30       	cpi	r18, 0x03	; 3
     fb2:	31 05       	cpc	r19, r1
     fb4:	84 f0       	brlt	.+32     	; 0xfd6 <track+0x264>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER -= left_right_movement_gradient_request / 4;
     fb6:	48 b5       	in	r20, 0x28	; 40
     fb8:	59 b5       	in	r21, 0x29	; 41
     fba:	9c 01       	movw	r18, r24
     fbc:	99 23       	and	r25, r25
     fbe:	14 f4       	brge	.+4      	; 0xfc4 <track+0x252>
     fc0:	2d 5f       	subi	r18, 0xFD	; 253
     fc2:	3f 4f       	sbci	r19, 0xFF	; 255
     fc4:	35 95       	asr	r19
     fc6:	27 95       	ror	r18
     fc8:	35 95       	asr	r19
     fca:	27 95       	ror	r18
     fcc:	ca 01       	movw	r24, r20
     fce:	82 1b       	sub	r24, r18
     fd0:	93 0b       	sbc	r25, r19
     fd2:	99 bd       	out	0x29, r25	; 41
     fd4:	88 bd       	out	0x28, r24	; 40
	}
	if(SG90_INCLINE_DUTY_CYCLE_REGISTER > SG90_UPPER_INCLINE_LIMIT)
     fd6:	4a b5       	in	r20, 0x2a	; 42
     fd8:	5b b5       	in	r21, 0x2b	; 43
     fda:	86 b5       	in	r24, 0x26	; 38
     fdc:	97 b5       	in	r25, 0x27	; 39
     fde:	9c 01       	movw	r18, r24
     fe0:	22 0f       	add	r18, r18
     fe2:	33 1f       	adc	r19, r19
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	28 0f       	add	r18, r24
     ff2:	39 1f       	adc	r19, r25
     ff4:	a1 e6       	ldi	r26, 0x61	; 97
     ff6:	b6 ef       	ldi	r27, 0xF6	; 246
     ff8:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
     ffc:	88 0f       	add	r24, r24
     ffe:	89 2f       	mov	r24, r25
    1000:	88 1f       	adc	r24, r24
    1002:	99 0b       	sbc	r25, r25
    1004:	91 95       	neg	r25
    1006:	88 97       	sbiw	r24, 0x28	; 40
    1008:	84 17       	cp	r24, r20
    100a:	95 07       	cpc	r25, r21
    100c:	b8 f4       	brcc	.+46     	; 0x103c <track+0x2ca>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_UPPER_INCLINE_LIMIT;
    100e:	86 b5       	in	r24, 0x26	; 38
    1010:	97 b5       	in	r25, 0x27	; 39
    1012:	9c 01       	movw	r18, r24
    1014:	22 0f       	add	r18, r18
    1016:	33 1f       	adc	r19, r19
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	28 0f       	add	r18, r24
    1026:	39 1f       	adc	r19, r25
    1028:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
    102c:	88 0f       	add	r24, r24
    102e:	89 2f       	mov	r24, r25
    1030:	88 1f       	adc	r24, r24
    1032:	99 0b       	sbc	r25, r25
    1034:	91 95       	neg	r25
    1036:	88 97       	sbiw	r24, 0x28	; 40
    1038:	9b bd       	out	0x2b, r25	; 43
    103a:	8a bd       	out	0x2a, r24	; 42
	}
	if(SG90_INCLINE_DUTY_CYCLE_REGISTER < SG90_INCLINE_POS_0)
    103c:	4a b5       	in	r20, 0x2a	; 42
    103e:	5b b5       	in	r21, 0x2b	; 43
    1040:	26 b5       	in	r18, 0x26	; 38
    1042:	37 b5       	in	r19, 0x27	; 39
    1044:	ad ec       	ldi	r26, 0xCD	; 205
    1046:	bc ec       	ldi	r27, 0xCC	; 204
    1048:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
    104c:	92 95       	swap	r25
    104e:	82 95       	swap	r24
    1050:	8f 70       	andi	r24, 0x0F	; 15
    1052:	89 27       	eor	r24, r25
    1054:	9f 70       	andi	r25, 0x0F	; 15
    1056:	89 27       	eor	r24, r25
    1058:	81 54       	subi	r24, 0x41	; 65
    105a:	91 09       	sbc	r25, r1
    105c:	48 17       	cp	r20, r24
    105e:	59 07       	cpc	r21, r25
    1060:	70 f4       	brcc	.+28     	; 0x107e <track+0x30c>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_INCLINE_POS_0;
    1062:	26 b5       	in	r18, 0x26	; 38
    1064:	37 b5       	in	r19, 0x27	; 39
    1066:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
    106a:	92 95       	swap	r25
    106c:	82 95       	swap	r24
    106e:	8f 70       	andi	r24, 0x0F	; 15
    1070:	89 27       	eor	r24, r25
    1072:	9f 70       	andi	r25, 0x0F	; 15
    1074:	89 27       	eor	r24, r25
    1076:	81 54       	subi	r24, 0x41	; 65
    1078:	91 09       	sbc	r25, r1
    107a:	9b bd       	out	0x2b, r25	; 43
    107c:	8a bd       	out	0x2a, r24	; 42
	}
	if(SG90_ROTATE_DUTY_CYCLE_REGISTER > SG90_ROTATE_POS_180)
    107e:	48 b5       	in	r20, 0x28	; 40
    1080:	59 b5       	in	r21, 0x29	; 41
    1082:	26 b5       	in	r18, 0x26	; 38
    1084:	37 b5       	in	r19, 0x27	; 39
    1086:	ad ec       	ldi	r26, 0xCD	; 205
    1088:	bc ec       	ldi	r27, 0xCC	; 204
    108a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
    108e:	96 95       	lsr	r25
    1090:	87 95       	ror	r24
    1092:	96 95       	lsr	r25
    1094:	87 95       	ror	r24
    1096:	96 95       	lsr	r25
    1098:	87 95       	ror	r24
    109a:	05 97       	sbiw	r24, 0x05	; 5
    109c:	84 17       	cp	r24, r20
    109e:	95 07       	cpc	r25, r21
    10a0:	68 f4       	brcc	.+26     	; 0x10bc <track+0x34a>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_POS_180;
    10a2:	26 b5       	in	r18, 0x26	; 38
    10a4:	37 b5       	in	r19, 0x27	; 39
    10a6:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
    10aa:	96 95       	lsr	r25
    10ac:	87 95       	ror	r24
    10ae:	96 95       	lsr	r25
    10b0:	87 95       	ror	r24
    10b2:	96 95       	lsr	r25
    10b4:	87 95       	ror	r24
    10b6:	05 97       	sbiw	r24, 0x05	; 5
    10b8:	99 bd       	out	0x29, r25	; 41
    10ba:	88 bd       	out	0x28, r24	; 40
	}
	if(SG90_ROTATE_DUTY_CYCLE_REGISTER < SG90_ROTATE_POS_0)
    10bc:	48 b5       	in	r20, 0x28	; 40
    10be:	59 b5       	in	r21, 0x29	; 41
    10c0:	26 b5       	in	r18, 0x26	; 38
    10c2:	37 b5       	in	r19, 0x27	; 39
    10c4:	ad ec       	ldi	r26, 0xCD	; 205
    10c6:	bc ec       	ldi	r27, 0xCC	; 204
    10c8:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
    10cc:	92 95       	swap	r25
    10ce:	82 95       	swap	r24
    10d0:	8f 70       	andi	r24, 0x0F	; 15
    10d2:	89 27       	eor	r24, r25
    10d4:	9f 70       	andi	r25, 0x0F	; 15
    10d6:	89 27       	eor	r24, r25
    10d8:	cc 97       	sbiw	r24, 0x3c	; 60
    10da:	48 17       	cp	r20, r24
    10dc:	59 07       	cpc	r21, r25
    10de:	68 f4       	brcc	.+26     	; 0x10fa <track+0x388>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_POS_0;
    10e0:	26 b5       	in	r18, 0x26	; 38
    10e2:	37 b5       	in	r19, 0x27	; 39
    10e4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>
    10e8:	92 95       	swap	r25
    10ea:	82 95       	swap	r24
    10ec:	8f 70       	andi	r24, 0x0F	; 15
    10ee:	89 27       	eor	r24, r25
    10f0:	9f 70       	andi	r25, 0x0F	; 15
    10f2:	89 27       	eor	r24, r25
    10f4:	cc 97       	sbiw	r24, 0x3c	; 60
    10f6:	99 bd       	out	0x29, r25	; 41
    10f8:	88 bd       	out	0x28, r24	; 40
    10fa:	2f ef       	ldi	r18, 0xFF	; 255
    10fc:	80 e7       	ldi	r24, 0x70	; 112
    10fe:	92 e0       	ldi	r25, 0x02	; 2
    1100:	21 50       	subi	r18, 0x01	; 1
    1102:	80 40       	sbci	r24, 0x00	; 0
    1104:	90 40       	sbci	r25, 0x00	; 0
    1106:	e1 f7       	brne	.-8      	; 0x1100 <track+0x38e>
    1108:	00 c0       	rjmp	.+0      	; 0x110a <track+0x398>
    110a:	00 00       	nop
	}
	_delay_ms(100);
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	08 95       	ret

00001112 <init_next_state_button>:
}


void init_next_state_button(void)
{
	BUTTON_1_DRR &= ~(1 << BUTTON_1_PIN); // PD2 is input
    1112:	8a 98       	cbi	0x11, 2	; 17

	BUTTON_1_PORT |= (1 << BUTTON_1_PIN);    // turn on the pull-up resistor
    1114:	92 9a       	sbi	0x12, 2	; 18
	// PD2 is now an input with pull-up enabled



	MCUCR &= ~(1 << ISC00 | 1 << ISC01);    // low level of INT0 generates an interrupt request: when BUTTON_1 is pressed
    1116:	85 b7       	in	r24, 0x35	; 53
    1118:	8c 7f       	andi	r24, 0xFC	; 252
    111a:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);     // turns on INT0
    111c:	8b b7       	in	r24, 0x3b	; 59
    111e:	80 64       	ori	r24, 0x40	; 64
    1120:	8b bf       	out	0x3b, r24	; 59
    1122:	08 95       	ret

00001124 <init_user_interface>:



void init_user_interface(void)
{
	init_next_state_button();
    1124:	0e 94 89 08 	call	0x1112	; 0x1112 <init_next_state_button>
    1128:	08 95       	ret

0000112a <__vector_1>:
	MCUCR &= ~(1 << ISC00 | 1 << ISC01);    // low level of INT0 generates an interrupt request: when BUTTON_1 is pressed
	GICR |= (1 << INT0);     // turns on INT0
}

ISR (INT0_vect)
{
    112a:	1f 92       	push	r1
    112c:	0f 92       	push	r0
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	0f 92       	push	r0
    1132:	11 24       	eor	r1, r1
    1134:	8f 93       	push	r24
	cli(); // temporarily disable interrupts
    1136:	f8 94       	cli
	switch(STATE)
    1138:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <STATE>
    113c:	82 30       	cpi	r24, 0x02	; 2
    113e:	41 f0       	breq	.+16     	; 0x1150 <__vector_1+0x26>
    1140:	83 30       	cpi	r24, 0x03	; 3
    1142:	51 f0       	breq	.+20     	; 0x1158 <__vector_1+0x2e>
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	61 f4       	brne	.+24     	; 0x1160 <__vector_1+0x36>
	{
		case STATE_IDLE:
		{
			STATE = STATE_MANUAL;
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <STATE>
			break;
    114e:	0b c0       	rjmp	.+22     	; 0x1166 <__vector_1+0x3c>
		}
		case STATE_MANUAL:
		{
			STATE = STATE_TRACKING;
    1150:	83 e0       	ldi	r24, 0x03	; 3
    1152:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <STATE>
			break;
    1156:	07 c0       	rjmp	.+14     	; 0x1166 <__vector_1+0x3c>
		}
		case STATE_TRACKING:
		{
			STATE = STATE_IDLE;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <STATE>
			break;
    115e:	03 c0       	rjmp	.+6      	; 0x1166 <__vector_1+0x3c>
		}
		default:
		{
			STATE = STATE_IDLE;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <STATE>
			break;
		}
	}
    1166:	8f 91       	pop	r24
    1168:	0f 90       	pop	r0
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	0f 90       	pop	r0
    116e:	1f 90       	pop	r1
    1170:	18 95       	reti

00001172 <__divmodhi4>:
    1172:	97 fb       	bst	r25, 7
    1174:	07 2e       	mov	r0, r23
    1176:	16 f4       	brtc	.+4      	; 0x117c <__divmodhi4+0xa>
    1178:	00 94       	com	r0
    117a:	07 d0       	rcall	.+14     	; 0x118a <__divmodhi4_neg1>
    117c:	77 fd       	sbrc	r23, 7
    117e:	09 d0       	rcall	.+18     	; 0x1192 <__divmodhi4_neg2>
    1180:	0e 94 02 09 	call	0x1204	; 0x1204 <__udivmodhi4>
    1184:	07 fc       	sbrc	r0, 7
    1186:	05 d0       	rcall	.+10     	; 0x1192 <__divmodhi4_neg2>
    1188:	3e f4       	brtc	.+14     	; 0x1198 <__divmodhi4_exit>

0000118a <__divmodhi4_neg1>:
    118a:	90 95       	com	r25
    118c:	81 95       	neg	r24
    118e:	9f 4f       	sbci	r25, 0xFF	; 255
    1190:	08 95       	ret

00001192 <__divmodhi4_neg2>:
    1192:	70 95       	com	r23
    1194:	61 95       	neg	r22
    1196:	7f 4f       	sbci	r23, 0xFF	; 255

00001198 <__divmodhi4_exit>:
    1198:	08 95       	ret

0000119a <__divmodsi4>:
    119a:	05 2e       	mov	r0, r21
    119c:	97 fb       	bst	r25, 7
    119e:	1e f4       	brtc	.+6      	; 0x11a6 <__divmodsi4+0xc>
    11a0:	00 94       	com	r0
    11a2:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__negsi2>
    11a6:	57 fd       	sbrc	r21, 7
    11a8:	07 d0       	rcall	.+14     	; 0x11b8 <__divmodsi4_neg2>
    11aa:	0e 94 16 09 	call	0x122c	; 0x122c <__udivmodsi4>
    11ae:	07 fc       	sbrc	r0, 7
    11b0:	03 d0       	rcall	.+6      	; 0x11b8 <__divmodsi4_neg2>
    11b2:	4e f4       	brtc	.+18     	; 0x11c6 <__divmodsi4_exit>
    11b4:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__negsi2>

000011b8 <__divmodsi4_neg2>:
    11b8:	50 95       	com	r21
    11ba:	40 95       	com	r20
    11bc:	30 95       	com	r19
    11be:	21 95       	neg	r18
    11c0:	3f 4f       	sbci	r19, 0xFF	; 255
    11c2:	4f 4f       	sbci	r20, 0xFF	; 255
    11c4:	5f 4f       	sbci	r21, 0xFF	; 255

000011c6 <__divmodsi4_exit>:
    11c6:	08 95       	ret

000011c8 <__negsi2>:
    11c8:	90 95       	com	r25
    11ca:	80 95       	com	r24
    11cc:	70 95       	com	r23
    11ce:	61 95       	neg	r22
    11d0:	7f 4f       	sbci	r23, 0xFF	; 255
    11d2:	8f 4f       	sbci	r24, 0xFF	; 255
    11d4:	9f 4f       	sbci	r25, 0xFF	; 255
    11d6:	08 95       	ret

000011d8 <__umulhisi3>:
    11d8:	a2 9f       	mul	r26, r18
    11da:	b0 01       	movw	r22, r0
    11dc:	b3 9f       	mul	r27, r19
    11de:	c0 01       	movw	r24, r0
    11e0:	a3 9f       	mul	r26, r19
    11e2:	70 0d       	add	r23, r0
    11e4:	81 1d       	adc	r24, r1
    11e6:	11 24       	eor	r1, r1
    11e8:	91 1d       	adc	r25, r1
    11ea:	b2 9f       	mul	r27, r18
    11ec:	70 0d       	add	r23, r0
    11ee:	81 1d       	adc	r24, r1
    11f0:	11 24       	eor	r1, r1
    11f2:	91 1d       	adc	r25, r1
    11f4:	08 95       	ret

000011f6 <__usmulhisi3>:
    11f6:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__umulhisi3>

000011fa <__usmulhisi3_tail>:
    11fa:	b7 ff       	sbrs	r27, 7
    11fc:	08 95       	ret
    11fe:	82 1b       	sub	r24, r18
    1200:	93 0b       	sbc	r25, r19
    1202:	08 95       	ret

00001204 <__udivmodhi4>:
    1204:	aa 1b       	sub	r26, r26
    1206:	bb 1b       	sub	r27, r27
    1208:	51 e1       	ldi	r21, 0x11	; 17
    120a:	07 c0       	rjmp	.+14     	; 0x121a <__udivmodhi4_ep>

0000120c <__udivmodhi4_loop>:
    120c:	aa 1f       	adc	r26, r26
    120e:	bb 1f       	adc	r27, r27
    1210:	a6 17       	cp	r26, r22
    1212:	b7 07       	cpc	r27, r23
    1214:	10 f0       	brcs	.+4      	; 0x121a <__udivmodhi4_ep>
    1216:	a6 1b       	sub	r26, r22
    1218:	b7 0b       	sbc	r27, r23

0000121a <__udivmodhi4_ep>:
    121a:	88 1f       	adc	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	5a 95       	dec	r21
    1220:	a9 f7       	brne	.-22     	; 0x120c <__udivmodhi4_loop>
    1222:	80 95       	com	r24
    1224:	90 95       	com	r25
    1226:	bc 01       	movw	r22, r24
    1228:	cd 01       	movw	r24, r26
    122a:	08 95       	ret

0000122c <__udivmodsi4>:
    122c:	a1 e2       	ldi	r26, 0x21	; 33
    122e:	1a 2e       	mov	r1, r26
    1230:	aa 1b       	sub	r26, r26
    1232:	bb 1b       	sub	r27, r27
    1234:	fd 01       	movw	r30, r26
    1236:	0d c0       	rjmp	.+26     	; 0x1252 <__udivmodsi4_ep>

00001238 <__udivmodsi4_loop>:
    1238:	aa 1f       	adc	r26, r26
    123a:	bb 1f       	adc	r27, r27
    123c:	ee 1f       	adc	r30, r30
    123e:	ff 1f       	adc	r31, r31
    1240:	a2 17       	cp	r26, r18
    1242:	b3 07       	cpc	r27, r19
    1244:	e4 07       	cpc	r30, r20
    1246:	f5 07       	cpc	r31, r21
    1248:	20 f0       	brcs	.+8      	; 0x1252 <__udivmodsi4_ep>
    124a:	a2 1b       	sub	r26, r18
    124c:	b3 0b       	sbc	r27, r19
    124e:	e4 0b       	sbc	r30, r20
    1250:	f5 0b       	sbc	r31, r21

00001252 <__udivmodsi4_ep>:
    1252:	66 1f       	adc	r22, r22
    1254:	77 1f       	adc	r23, r23
    1256:	88 1f       	adc	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	1a 94       	dec	r1
    125c:	69 f7       	brne	.-38     	; 0x1238 <__udivmodsi4_loop>
    125e:	60 95       	com	r22
    1260:	70 95       	com	r23
    1262:	80 95       	com	r24
    1264:	90 95       	com	r25
    1266:	9b 01       	movw	r18, r22
    1268:	ac 01       	movw	r20, r24
    126a:	bd 01       	movw	r22, r26
    126c:	cf 01       	movw	r24, r30
    126e:	08 95       	ret

00001270 <_exit>:
    1270:	f8 94       	cli

00001272 <__stop_program>:
    1272:	ff cf       	rjmp	.-2      	; 0x1272 <__stop_program>
