
SunTracking32A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000678  00800060  00000fcc  00001060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008006d8  008006d8  000016d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001708  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038be  00000000  00000000  00001944  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f08  00000000  00000000  00005202  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001417  00000000  00000000  0000610a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  00007524  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a4  00000000  00000000  000078cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d54  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00008dc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	16 e0       	ldi	r17, 0x06	; 6
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3d       	cpi	r26, 0xD8	; 216
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	26 e0       	ldi	r18, 0x06	; 6
  78:	a8 ed       	ldi	r26, 0xD8	; 216
  7a:	b6 e0       	ldi	r27, 0x06	; 6
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3e       	cpi	r26, 0xEE	; 238
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bd 04 	call	0x97a	; 0x97a <main>
  8a:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:

#include <avr/io.h>

void ADC_init(void)
{
	DDRC = 0x00;
  92:	14 ba       	out	0x14, r1	; 20
	// AREF = AVcc
	ADMUX = (1<<REFS0);
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	87 b9       	out	0x07, r24	; 7
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  98:	87 e8       	ldi	r24, 0x87	; 135
  9a:	86 b9       	out	0x06, r24	; 6
  9c:	08 95       	ret

0000009e <ADC_get_value>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
  9e:	97 b1       	in	r25, 0x07	; 7
  a0:	98 7f       	andi	r25, 0xF8	; 248
  a2:	87 70       	andi	r24, 0x07	; 7
  a4:	89 2b       	or	r24, r25
  a6:	87 b9       	out	0x07, r24	; 7
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
  a8:	36 9a       	sbi	0x06, 6	; 6
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
  aa:	36 99       	sbic	0x06, 6	; 6
  ac:	fe cf       	rjmp	.-4      	; 0xaa <ADC_get_value+0xc>
	
	return (ADC);
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	95 b1       	in	r25, 0x05	; 5
  b2:	08 95       	ret

000000b4 <display_title>:
#include "joystick_driver.h"
#include <stdlib.h>

void display_title(void)
{
	hx_set_coordinates(0, 0);
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
	hx_write_string("AutoTracking LDR");
  bc:	80 e6       	ldi	r24, 0x60	; 96
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 62 03 	call	0x6c4	; 0x6c4 <hx_write_string>
	hx_set_coordinates(0, 1);
  c4:	61 e0       	ldi	r22, 0x01	; 1
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
	hx_write_string("  ScorpionIPX");
  cc:	81 e7       	ldi	r24, 0x71	; 113
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 62 03 	call	0x6c4	; 0x6c4 <hx_write_string>
  d4:	08 95       	ret

000000d6 <display_data_menu>:
}

void display_data_menu(void)
{
	hx_set_coordinates(0, 3);
  d6:	63 e0       	ldi	r22, 0x03	; 3
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
	hx_write_string("       ||");
  de:	8f e7       	ldi	r24, 0x7F	; 127
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 62 03 	call	0x6c4	; 0x6c4 <hx_write_string>
	hx_set_coordinates(0, 4);
  e6:	64 e0       	ldi	r22, 0x04	; 4
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
	hx_write_string("================");
  ee:	89 e8       	ldi	r24, 0x89	; 137
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 62 03 	call	0x6c4	; 0x6c4 <hx_write_string>
	hx_set_coordinates(0, 5);
  f6:	65 e0       	ldi	r22, 0x05	; 5
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
	hx_write_string("       ||");
  fe:	8f e7       	ldi	r24, 0x7F	; 127
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 62 03 	call	0x6c4	; 0x6c4 <hx_write_string>
 106:	08 95       	ret

00000108 <display_light_sensor_data>:
}

void display_light_sensor_data(uint8_t sensor, int data)
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	eb 01       	movw	r28, r22
	//hx_set_coordinates(60, 3 + sensor);
	hx_set_coordinates(24 + 36 * (sensor & 1), 3 + 2 * (sensor >> 1));
 10e:	68 2f       	mov	r22, r24
 110:	6e 7f       	andi	r22, 0xFE	; 254
 112:	6d 5f       	subi	r22, 0xFD	; 253
 114:	81 70       	andi	r24, 0x01	; 1
 116:	94 e2       	ldi	r25, 0x24	; 36
 118:	89 9f       	mul	r24, r25
 11a:	80 2d       	mov	r24, r0
 11c:	11 24       	eor	r1, r1
 11e:	88 5e       	subi	r24, 0xE8	; 232
 120:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
	
	// hx_write_char('0' + ((data / 100) % 10));
	hx_write_char('0' + ((data / 10) % 10));
 124:	2a e0       	ldi	r18, 0x0A	; 10
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	ce 01       	movw	r24, r28
 12a:	b9 01       	movw	r22, r18
 12c:	0e 94 65 07 	call	0xeca	; 0xeca <__divmodhi4>
 130:	c8 2f       	mov	r28, r24
 132:	cb 01       	movw	r24, r22
 134:	b9 01       	movw	r22, r18
 136:	0e 94 65 07 	call	0xeca	; 0xeca <__divmodhi4>
 13a:	80 5d       	subi	r24, 0xD0	; 208
 13c:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	hx_write_char('0' + (data % 10));
 140:	80 e3       	ldi	r24, 0x30	; 48
 142:	8c 0f       	add	r24, r28
 144:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	
	hx_set_coordinates(18, 7);
 148:	67 e0       	ldi	r22, 0x07	; 7
 14a:	82 e1       	ldi	r24, 0x12	; 18
 14c:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
	hx_write_char('0' + OCR1A / 100);
 150:	2a b5       	in	r18, 0x2a	; 42
 152:	3b b5       	in	r19, 0x2b	; 43
 154:	36 95       	lsr	r19
 156:	27 95       	ror	r18
 158:	36 95       	lsr	r19
 15a:	27 95       	ror	r18
 15c:	ab e7       	ldi	r26, 0x7B	; 123
 15e:	b4 e1       	ldi	r27, 0x14	; 20
 160:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 164:	96 95       	lsr	r25
 166:	87 95       	ror	r24
 168:	80 5d       	subi	r24, 0xD0	; 208
 16a:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	hx_write_char('0' + (OCR1A / 10) % 10);
 16e:	2a b5       	in	r18, 0x2a	; 42
 170:	3b b5       	in	r19, 0x2b	; 43
 172:	ad ec       	ldi	r26, 0xCD	; 205
 174:	bc ec       	ldi	r27, 0xCC	; 204
 176:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 17a:	ac 01       	movw	r20, r24
 17c:	56 95       	lsr	r21
 17e:	47 95       	ror	r20
 180:	56 95       	lsr	r21
 182:	47 95       	ror	r20
 184:	56 95       	lsr	r21
 186:	47 95       	ror	r20
 188:	9a 01       	movw	r18, r20
 18a:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 18e:	96 95       	lsr	r25
 190:	87 95       	ror	r24
 192:	96 95       	lsr	r25
 194:	87 95       	ror	r24
 196:	96 95       	lsr	r25
 198:	87 95       	ror	r24
 19a:	9c 01       	movw	r18, r24
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	82 0f       	add	r24, r18
 1ae:	93 1f       	adc	r25, r19
 1b0:	9a 01       	movw	r18, r20
 1b2:	28 1b       	sub	r18, r24
 1b4:	39 0b       	sbc	r19, r25
 1b6:	c9 01       	movw	r24, r18
 1b8:	80 5d       	subi	r24, 0xD0	; 208
 1ba:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	hx_write_char('0' + OCR1A % 10);
 1be:	4a b5       	in	r20, 0x2a	; 42
 1c0:	5b b5       	in	r21, 0x2b	; 43
 1c2:	9a 01       	movw	r18, r20
 1c4:	ad ec       	ldi	r26, 0xCD	; 205
 1c6:	bc ec       	ldi	r27, 0xCC	; 204
 1c8:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 1cc:	96 95       	lsr	r25
 1ce:	87 95       	ror	r24
 1d0:	96 95       	lsr	r25
 1d2:	87 95       	ror	r24
 1d4:	96 95       	lsr	r25
 1d6:	87 95       	ror	r24
 1d8:	9c 01       	movw	r18, r24
 1da:	22 0f       	add	r18, r18
 1dc:	33 1f       	adc	r19, r19
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	82 0f       	add	r24, r18
 1ec:	93 1f       	adc	r25, r19
 1ee:	9a 01       	movw	r18, r20
 1f0:	28 1b       	sub	r18, r24
 1f2:	39 0b       	sbc	r19, r25
 1f4:	c9 01       	movw	r24, r18
 1f6:	80 5d       	subi	r24, 0xD0	; 208
 1f8:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	
	hx_set_coordinates(66, 7);
 1fc:	67 e0       	ldi	r22, 0x07	; 7
 1fe:	82 e4       	ldi	r24, 0x42	; 66
 200:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
	hx_write_char('0' + OCR1B / 100);
 204:	28 b5       	in	r18, 0x28	; 40
 206:	39 b5       	in	r19, 0x29	; 41
 208:	36 95       	lsr	r19
 20a:	27 95       	ror	r18
 20c:	36 95       	lsr	r19
 20e:	27 95       	ror	r18
 210:	ab e7       	ldi	r26, 0x7B	; 123
 212:	b4 e1       	ldi	r27, 0x14	; 20
 214:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 218:	96 95       	lsr	r25
 21a:	87 95       	ror	r24
 21c:	80 5d       	subi	r24, 0xD0	; 208
 21e:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	hx_write_char('0' + (OCR1B / 10) % 10);
 222:	28 b5       	in	r18, 0x28	; 40
 224:	39 b5       	in	r19, 0x29	; 41
 226:	ad ec       	ldi	r26, 0xCD	; 205
 228:	bc ec       	ldi	r27, 0xCC	; 204
 22a:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 22e:	ac 01       	movw	r20, r24
 230:	56 95       	lsr	r21
 232:	47 95       	ror	r20
 234:	56 95       	lsr	r21
 236:	47 95       	ror	r20
 238:	56 95       	lsr	r21
 23a:	47 95       	ror	r20
 23c:	9a 01       	movw	r18, r20
 23e:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 242:	96 95       	lsr	r25
 244:	87 95       	ror	r24
 246:	96 95       	lsr	r25
 248:	87 95       	ror	r24
 24a:	96 95       	lsr	r25
 24c:	87 95       	ror	r24
 24e:	9c 01       	movw	r18, r24
 250:	22 0f       	add	r18, r18
 252:	33 1f       	adc	r19, r19
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	82 0f       	add	r24, r18
 262:	93 1f       	adc	r25, r19
 264:	9a 01       	movw	r18, r20
 266:	28 1b       	sub	r18, r24
 268:	39 0b       	sbc	r19, r25
 26a:	c9 01       	movw	r24, r18
 26c:	80 5d       	subi	r24, 0xD0	; 208
 26e:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	hx_write_char('0' + OCR1B % 10);
 272:	48 b5       	in	r20, 0x28	; 40
 274:	59 b5       	in	r21, 0x29	; 41
 276:	9a 01       	movw	r18, r20
 278:	ad ec       	ldi	r26, 0xCD	; 205
 27a:	bc ec       	ldi	r27, 0xCC	; 204
 27c:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 280:	96 95       	lsr	r25
 282:	87 95       	ror	r24
 284:	96 95       	lsr	r25
 286:	87 95       	ror	r24
 288:	96 95       	lsr	r25
 28a:	87 95       	ror	r24
 28c:	9c 01       	movw	r18, r24
 28e:	22 0f       	add	r18, r18
 290:	33 1f       	adc	r19, r19
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	82 0f       	add	r24, r18
 2a0:	93 1f       	adc	r25, r19
 2a2:	9a 01       	movw	r18, r20
 2a4:	28 1b       	sub	r18, r24
 2a6:	39 0b       	sbc	r19, r25
 2a8:	c9 01       	movw	r24, r18
 2aa:	80 5d       	subi	r24, 0xD0	; 208
 2ac:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <display_idle_state_message>:

void display_idle_state_message(void)
{
	hx_set_coordinates(0, 3);
 2b6:	63 e0       	ldi	r22, 0x03	; 3
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
	hx_write_string("- system is in ");
 2be:	8a e9       	ldi	r24, 0x9A	; 154
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 62 03 	call	0x6c4	; 0x6c4 <hx_write_string>
	hx_set_coordinates(0, 4);
 2c6:	64 e0       	ldi	r22, 0x04	; 4
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
	hx_write_string("IDLE mode");
 2ce:	8a ea       	ldi	r24, 0xAA	; 170
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 62 03 	call	0x6c4	; 0x6c4 <hx_write_string>
	hx_set_coordinates(0, 6);
 2d6:	66 e0       	ldi	r22, 0x06	; 6
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
	hx_write_string("going to sleep");
 2de:	84 eb       	ldi	r24, 0xB4	; 180
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 62 03 	call	0x6c4	; 0x6c4 <hx_write_string>
 2e6:	08 95       	ret

000002e8 <display_manual_state_message>:
}


void display_manual_state_message(void)
{
	hx_set_coordinates(0, 3);
 2e8:	63 e0       	ldi	r22, 0x03	; 3
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
	hx_write_string("- system is in ");
 2f0:	8a e9       	ldi	r24, 0x9A	; 154
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <hx_write_string>
	hx_set_coordinates(0, 4);
 2f8:	64 e0       	ldi	r22, 0x04	; 4
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
	hx_write_string("MANUAL mode");
 300:	83 ec       	ldi	r24, 0xC3	; 195
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 62 03 	call	0x6c4	; 0x6c4 <hx_write_string>
	
	hx_set_coordinates(0, 6);
 308:	66 e0       	ldi	r22, 0x06	; 6
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
	hx_write_string("JX:");
 310:	8f ec       	ldi	r24, 0xCF	; 207
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 62 03 	call	0x6c4	; 0x6c4 <hx_write_string>
	hx_set_coordinates(0, 7);
 318:	67 e0       	ldi	r22, 0x07	; 7
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
	hx_write_string("JY:");
 320:	83 ed       	ldi	r24, 0xD3	; 211
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 62 03 	call	0x6c4	; 0x6c4 <hx_write_string>
 328:	08 95       	ret

0000032a <display_joystick_data>:
}

void display_joystick_data(unsigned int x, unsigned int y)
{	 
 32a:	ef 92       	push	r14
 32c:	ff 92       	push	r15
 32e:	0f 93       	push	r16
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	7c 01       	movw	r14, r24
 338:	8b 01       	movw	r16, r22
	hx_set_coordinates(24, 6);
 33a:	66 e0       	ldi	r22, 0x06	; 6
 33c:	88 e1       	ldi	r24, 0x18	; 24
 33e:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
	
	hx_write_char('0' + x / 1000);
 342:	97 01       	movw	r18, r14
 344:	36 95       	lsr	r19
 346:	27 95       	ror	r18
 348:	36 95       	lsr	r19
 34a:	27 95       	ror	r18
 34c:	36 95       	lsr	r19
 34e:	27 95       	ror	r18
 350:	a5 ec       	ldi	r26, 0xC5	; 197
 352:	b0 e2       	ldi	r27, 0x20	; 32
 354:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 358:	92 95       	swap	r25
 35a:	82 95       	swap	r24
 35c:	8f 70       	andi	r24, 0x0F	; 15
 35e:	89 27       	eor	r24, r25
 360:	9f 70       	andi	r25, 0x0F	; 15
 362:	89 27       	eor	r24, r25
 364:	80 5d       	subi	r24, 0xD0	; 208
 366:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	hx_write_char('0' + (x / 100) % 10);
 36a:	97 01       	movw	r18, r14
 36c:	36 95       	lsr	r19
 36e:	27 95       	ror	r18
 370:	36 95       	lsr	r19
 372:	27 95       	ror	r18
 374:	ab e7       	ldi	r26, 0x7B	; 123
 376:	b4 e1       	ldi	r27, 0x14	; 20
 378:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 37c:	ac 01       	movw	r20, r24
 37e:	56 95       	lsr	r21
 380:	47 95       	ror	r20
 382:	9a 01       	movw	r18, r20
 384:	ad ec       	ldi	r26, 0xCD	; 205
 386:	bc ec       	ldi	r27, 0xCC	; 204
 388:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 38c:	96 95       	lsr	r25
 38e:	87 95       	ror	r24
 390:	96 95       	lsr	r25
 392:	87 95       	ror	r24
 394:	96 95       	lsr	r25
 396:	87 95       	ror	r24
 398:	9c 01       	movw	r18, r24
 39a:	22 0f       	add	r18, r18
 39c:	33 1f       	adc	r19, r19
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	82 0f       	add	r24, r18
 3ac:	93 1f       	adc	r25, r19
 3ae:	9a 01       	movw	r18, r20
 3b0:	28 1b       	sub	r18, r24
 3b2:	39 0b       	sbc	r19, r25
 3b4:	c9 01       	movw	r24, r18
 3b6:	80 5d       	subi	r24, 0xD0	; 208
 3b8:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	hx_write_char('0' + (x / 10) % 10);
 3bc:	97 01       	movw	r18, r14
 3be:	ad ec       	ldi	r26, 0xCD	; 205
 3c0:	bc ec       	ldi	r27, 0xCC	; 204
 3c2:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 3c6:	ec 01       	movw	r28, r24
 3c8:	d6 95       	lsr	r29
 3ca:	c7 95       	ror	r28
 3cc:	d6 95       	lsr	r29
 3ce:	c7 95       	ror	r28
 3d0:	d6 95       	lsr	r29
 3d2:	c7 95       	ror	r28
 3d4:	9e 01       	movw	r18, r28
 3d6:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 3da:	96 95       	lsr	r25
 3dc:	87 95       	ror	r24
 3de:	96 95       	lsr	r25
 3e0:	87 95       	ror	r24
 3e2:	96 95       	lsr	r25
 3e4:	87 95       	ror	r24
 3e6:	9c 01       	movw	r18, r24
 3e8:	22 0f       	add	r18, r18
 3ea:	33 1f       	adc	r19, r19
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	82 0f       	add	r24, r18
 3fa:	93 1f       	adc	r25, r19
 3fc:	9e 01       	movw	r18, r28
 3fe:	28 1b       	sub	r18, r24
 400:	39 0b       	sbc	r19, r25
 402:	c9 01       	movw	r24, r18
 404:	80 5d       	subi	r24, 0xD0	; 208
 406:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	hx_write_char('0' + x % 10);
 40a:	ce 01       	movw	r24, r28
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	cc 0f       	add	r28, r28
 412:	dd 1f       	adc	r29, r29
 414:	cc 0f       	add	r28, r28
 416:	dd 1f       	adc	r29, r29
 418:	cc 0f       	add	r28, r28
 41a:	dd 1f       	adc	r29, r29
 41c:	c8 0f       	add	r28, r24
 41e:	d9 1f       	adc	r29, r25
 420:	c7 01       	movw	r24, r14
 422:	8c 1b       	sub	r24, r28
 424:	9d 0b       	sbc	r25, r29
 426:	80 5d       	subi	r24, 0xD0	; 208
 428:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	
	hx_set_coordinates(24, 7);
 42c:	67 e0       	ldi	r22, 0x07	; 7
 42e:	88 e1       	ldi	r24, 0x18	; 24
 430:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
	
	hx_write_char('0' + y / 1000);
 434:	98 01       	movw	r18, r16
 436:	36 95       	lsr	r19
 438:	27 95       	ror	r18
 43a:	36 95       	lsr	r19
 43c:	27 95       	ror	r18
 43e:	36 95       	lsr	r19
 440:	27 95       	ror	r18
 442:	a5 ec       	ldi	r26, 0xC5	; 197
 444:	b0 e2       	ldi	r27, 0x20	; 32
 446:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 44a:	92 95       	swap	r25
 44c:	82 95       	swap	r24
 44e:	8f 70       	andi	r24, 0x0F	; 15
 450:	89 27       	eor	r24, r25
 452:	9f 70       	andi	r25, 0x0F	; 15
 454:	89 27       	eor	r24, r25
 456:	80 5d       	subi	r24, 0xD0	; 208
 458:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	hx_write_char('0' + (y / 100) % 10);
 45c:	98 01       	movw	r18, r16
 45e:	36 95       	lsr	r19
 460:	27 95       	ror	r18
 462:	36 95       	lsr	r19
 464:	27 95       	ror	r18
 466:	ab e7       	ldi	r26, 0x7B	; 123
 468:	b4 e1       	ldi	r27, 0x14	; 20
 46a:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 46e:	ac 01       	movw	r20, r24
 470:	56 95       	lsr	r21
 472:	47 95       	ror	r20
 474:	9a 01       	movw	r18, r20
 476:	ad ec       	ldi	r26, 0xCD	; 205
 478:	bc ec       	ldi	r27, 0xCC	; 204
 47a:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 47e:	96 95       	lsr	r25
 480:	87 95       	ror	r24
 482:	96 95       	lsr	r25
 484:	87 95       	ror	r24
 486:	96 95       	lsr	r25
 488:	87 95       	ror	r24
 48a:	9c 01       	movw	r18, r24
 48c:	22 0f       	add	r18, r18
 48e:	33 1f       	adc	r19, r19
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	82 0f       	add	r24, r18
 49e:	93 1f       	adc	r25, r19
 4a0:	9a 01       	movw	r18, r20
 4a2:	28 1b       	sub	r18, r24
 4a4:	39 0b       	sbc	r19, r25
 4a6:	c9 01       	movw	r24, r18
 4a8:	80 5d       	subi	r24, 0xD0	; 208
 4aa:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	hx_write_char('0' + (y / 10) % 10);
 4ae:	98 01       	movw	r18, r16
 4b0:	ad ec       	ldi	r26, 0xCD	; 205
 4b2:	bc ec       	ldi	r27, 0xCC	; 204
 4b4:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 4b8:	ec 01       	movw	r28, r24
 4ba:	d6 95       	lsr	r29
 4bc:	c7 95       	ror	r28
 4be:	d6 95       	lsr	r29
 4c0:	c7 95       	ror	r28
 4c2:	d6 95       	lsr	r29
 4c4:	c7 95       	ror	r28
 4c6:	9e 01       	movw	r18, r28
 4c8:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 4cc:	96 95       	lsr	r25
 4ce:	87 95       	ror	r24
 4d0:	96 95       	lsr	r25
 4d2:	87 95       	ror	r24
 4d4:	96 95       	lsr	r25
 4d6:	87 95       	ror	r24
 4d8:	9c 01       	movw	r18, r24
 4da:	22 0f       	add	r18, r18
 4dc:	33 1f       	adc	r19, r19
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	82 0f       	add	r24, r18
 4ec:	93 1f       	adc	r25, r19
 4ee:	9e 01       	movw	r18, r28
 4f0:	28 1b       	sub	r18, r24
 4f2:	39 0b       	sbc	r19, r25
 4f4:	c9 01       	movw	r24, r18
 4f6:	80 5d       	subi	r24, 0xD0	; 208
 4f8:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	hx_write_char('0' + y % 10);
 4fc:	ce 01       	movw	r24, r28
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	cc 0f       	add	r28, r28
 504:	dd 1f       	adc	r29, r29
 506:	cc 0f       	add	r28, r28
 508:	dd 1f       	adc	r29, r29
 50a:	cc 0f       	add	r28, r28
 50c:	dd 1f       	adc	r29, r29
 50e:	c8 0f       	add	r28, r24
 510:	d9 1f       	adc	r29, r25
 512:	c8 01       	movw	r24, r16
 514:	8c 1b       	sub	r24, r28
 516:	9d 0b       	sbc	r25, r29
 518:	80 5d       	subi	r24, 0xD0	; 208
 51a:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	1f 91       	pop	r17
 524:	0f 91       	pop	r16
 526:	ff 90       	pop	r15
 528:	ef 90       	pop	r14
 52a:	08 95       	ret

0000052c <hx_send_data>:
}

void hx_send_data(unsigned char _data)
{
	// activate hx1230
	CLEAR_HX_CE;
 52c:	a9 98       	cbi	0x15, 1	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	
	// configure communication for data transfer
	SET_HX_DIN;
 52e:	ae 9a       	sbi	0x15, 6	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	
	// toggle clock
	SET_HX_CLK;
 530:	af 9a       	sbi	0x15, 7	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	CLEAR_HX_CLK;
 532:	af 98       	cbi	0x15, 7	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	
	// send the actual data, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
 534:	27 e0       	ldi	r18, 0x07	; 7
 536:	30 e0       	ldi	r19, 0x00	; 0
	{
		// calculate bit to be send
		if(((_data >> bit_position) & 1) == 1)
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	ac 01       	movw	r20, r24
 53c:	02 2e       	mov	r0, r18
 53e:	02 c0       	rjmp	.+4      	; 0x544 <hx_send_data+0x18>
 540:	55 95       	asr	r21
 542:	47 95       	ror	r20
 544:	0a 94       	dec	r0
 546:	e2 f7       	brpl	.-8      	; 0x540 <hx_send_data+0x14>
 548:	40 ff       	sbrs	r20, 0
 54a:	02 c0       	rjmp	.+4      	; 0x550 <hx_send_data+0x24>
		{
			SET_HX_DIN;
 54c:	ae 9a       	sbi	0x15, 6	; 21
 54e:	01 c0       	rjmp	.+2      	; 0x552 <hx_send_data+0x26>
			_delay_us(HX_DELAY_US);
			#endif
		}
		else
		{
			CLEAR_HX_DIN;
 550:	ae 98       	cbi	0x15, 6	; 21
			_delay_us(HX_DELAY_US);
			#endif
		}
		
		// toggle clock
		SET_HX_CLK;
 552:	af 9a       	sbi	0x15, 7	; 21
		#ifdef HX_DELAY_ENABLED
		_delay_us(HX_DELAY_US);
		#endif
		CLEAR_HX_CLK;
 554:	af 98       	cbi	0x15, 7	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	
	// send the actual data, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
 556:	21 50       	subi	r18, 0x01	; 1
 558:	31 09       	sbc	r19, r1
 55a:	78 f7       	brcc	.-34     	; 0x53a <hx_send_data+0xe>
		_delay_us(HX_DELAY_US);
		#endif
	}
	
	// deactivate hx1230
	SET_HX_CE;
 55c:	a9 9a       	sbi	0x15, 1	; 21
 55e:	08 95       	ret

00000560 <hx_send_command>:
}

void hx_send_command(unsigned char _command)
{
	// activate hx1230
	CLEAR_HX_CE;
 560:	a9 98       	cbi	0x15, 1	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	
	// configure communication for command transfer
	CLEAR_HX_DIN;
 562:	ae 98       	cbi	0x15, 6	; 21
	
	// toggle clock
	SET_HX_CLK;
 564:	af 9a       	sbi	0x15, 7	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	CLEAR_HX_CLK;
 566:	af 98       	cbi	0x15, 7	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	
	// send the actual command, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
 568:	27 e0       	ldi	r18, 0x07	; 7
 56a:	30 e0       	ldi	r19, 0x00	; 0
	{
		// calculate bit to be send
		if(((_command >> bit_position) & 1) == 1)
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	ac 01       	movw	r20, r24
 570:	02 2e       	mov	r0, r18
 572:	02 c0       	rjmp	.+4      	; 0x578 <hx_send_command+0x18>
 574:	55 95       	asr	r21
 576:	47 95       	ror	r20
 578:	0a 94       	dec	r0
 57a:	e2 f7       	brpl	.-8      	; 0x574 <hx_send_command+0x14>
 57c:	40 ff       	sbrs	r20, 0
 57e:	02 c0       	rjmp	.+4      	; 0x584 <hx_send_command+0x24>
		{
			SET_HX_DIN;
 580:	ae 9a       	sbi	0x15, 6	; 21
 582:	01 c0       	rjmp	.+2      	; 0x586 <hx_send_command+0x26>
			_delay_us(HX_DELAY_US);
			#endif
		}
		else
		{
			CLEAR_HX_DIN;
 584:	ae 98       	cbi	0x15, 6	; 21
			_delay_us(HX_DELAY_US);
			#endif
		}
		
		// toggle clock
		SET_HX_CLK;
 586:	af 9a       	sbi	0x15, 7	; 21
		#ifdef HX_DELAY_ENABLED
		_delay_us(HX_DELAY_US);
		#endif
		CLEAR_HX_CLK;
 588:	af 98       	cbi	0x15, 7	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	
	// send the actual command, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
 58a:	21 50       	subi	r18, 0x01	; 1
 58c:	31 09       	sbc	r19, r1
 58e:	78 f7       	brcc	.-34     	; 0x56e <hx_send_command+0xe>
		_delay_us(HX_DELAY_US);
		#endif
	}
	
	// deactivate hx1230
	SET_HX_CE;
 590:	a9 9a       	sbi	0x15, 1	; 21
 592:	08 95       	ret

00000594 <init_hx1230_control>:


void init_hx1230_control(void)
{
	// set required pins as output
	HX1230_DDR |= ((1 << HX_RST) | (1 << HX_CE) | (1 << HX_DIN) | (1 << HX_CLK));
 594:	84 b3       	in	r24, 0x14	; 20
 596:	83 6c       	ori	r24, 0xC3	; 195
 598:	84 bb       	out	0x14, r24	; 20
	
	// set idle state
	CLEAR_HX_CLK;
 59a:	af 98       	cbi	0x15, 7	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	CLEAR_HX_RST;
 59c:	a8 98       	cbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 59e:	2f e7       	ldi	r18, 0x7F	; 127
 5a0:	88 e3       	ldi	r24, 0x38	; 56
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	21 50       	subi	r18, 0x01	; 1
 5a6:	80 40       	sbci	r24, 0x00	; 0
 5a8:	90 40       	sbci	r25, 0x00	; 0
 5aa:	e1 f7       	brne	.-8      	; 0x5a4 <init_hx1230_control+0x10>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <init_hx1230_control+0x1a>
 5ae:	00 00       	nop
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	_delay_ms(50);
	SET_HX_RST;
 5b0:	a8 9a       	sbi	0x15, 0	; 21
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	CLEAR_HX_CE;
 5b2:	a9 98       	cbi	0x15, 1	; 21
 5b4:	8f ec       	ldi	r24, 0xCF	; 207
 5b6:	97 e0       	ldi	r25, 0x07	; 7
 5b8:	01 97       	sbiw	r24, 0x01	; 1
 5ba:	f1 f7       	brne	.-4      	; 0x5b8 <init_hx1230_control+0x24>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <init_hx1230_control+0x2a>
 5be:	00 00       	nop
	#ifdef HX_DELAY_ENABLED
	_delay_us(HX_DELAY_US);
	#endif
	_delay_ms(1);
	SET_HX_CE;
 5c0:	a9 9a       	sbi	0x15, 1	; 21
 5c2:	8f ec       	ldi	r24, 0xCF	; 207
 5c4:	97 e0       	ldi	r25, 0x07	; 7
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	f1 f7       	brne	.-4      	; 0x5c6 <init_hx1230_control+0x32>
 5ca:	00 c0       	rjmp	.+0      	; 0x5cc <init_hx1230_control+0x38>
 5cc:	00 00       	nop
	_delay_ms(1);
	
	// commands needed to initialize hx1230 display
	// found within a chinese data sheet
	
	hx_send_command(0x2f);
 5ce:	8f e2       	ldi	r24, 0x2F	; 47
 5d0:	0e 94 b0 02 	call	0x560	; 0x560 <hx_send_command>
	hx_send_command(0x90);
 5d4:	80 e9       	ldi	r24, 0x90	; 144
 5d6:	0e 94 b0 02 	call	0x560	; 0x560 <hx_send_command>
	hx_send_command(0xa6);
 5da:	86 ea       	ldi	r24, 0xA6	; 166
 5dc:	0e 94 b0 02 	call	0x560	; 0x560 <hx_send_command>
	hx_send_command(0xa4);
 5e0:	84 ea       	ldi	r24, 0xA4	; 164
 5e2:	0e 94 b0 02 	call	0x560	; 0x560 <hx_send_command>
	hx_send_command(0xaf);
 5e6:	8f ea       	ldi	r24, 0xAF	; 175
 5e8:	0e 94 b0 02 	call	0x560	; 0x560 <hx_send_command>
	
	hx_send_command(0x40);
 5ec:	80 e4       	ldi	r24, 0x40	; 64
 5ee:	0e 94 b0 02 	call	0x560	; 0x560 <hx_send_command>
	hx_send_command(0xb0);
 5f2:	80 eb       	ldi	r24, 0xB0	; 176
 5f4:	0e 94 b0 02 	call	0x560	; 0x560 <hx_send_command>
	hx_send_command(0x10);
 5f8:	80 e1       	ldi	r24, 0x10	; 16
 5fa:	0e 94 b0 02 	call	0x560	; 0x560 <hx_send_command>
	hx_send_command(0x00);
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	0e 94 b0 02 	call	0x560	; 0x560 <hx_send_command>
 604:	08 95       	ret

00000606 <hx_set_coordinates>:
	// deactivate hx1230
	SET_HX_CE;
}

void hx_set_coordinates(unsigned char _x, unsigned char _y)
{
 606:	cf 93       	push	r28
 608:	c8 2f       	mov	r28, r24
	// 0, 0 is the upper left corner
	
	hx_send_command(0xB0 + _y);
 60a:	80 eb       	ldi	r24, 0xB0	; 176
 60c:	86 0f       	add	r24, r22
 60e:	0e 94 b0 02 	call	0x560	; 0x560 <hx_send_command>
	hx_send_command(0x10 | ((_x & 0x7F) >> 4));
 612:	8c 2f       	mov	r24, r28
 614:	8f 77       	andi	r24, 0x7F	; 127
 616:	82 95       	swap	r24
 618:	8f 70       	andi	r24, 0x0F	; 15
 61a:	80 61       	ori	r24, 0x10	; 16
 61c:	0e 94 b0 02 	call	0x560	; 0x560 <hx_send_command>
	hx_send_command(0x0F & _x);
 620:	8c 2f       	mov	r24, r28
 622:	8f 70       	andi	r24, 0x0F	; 15
 624:	0e 94 b0 02 	call	0x560	; 0x560 <hx_send_command>
}
 628:	cf 91       	pop	r28
 62a:	08 95       	ret

0000062c <hx_clear_screen>:

void hx_clear_screen(void)
{
 62c:	cf 93       	push	r28
 62e:	df 93       	push	r29
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
 630:	60 e0       	ldi	r22, 0x00	; 0
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
 638:	d9 e0       	ldi	r29, 0x09	; 9
 63a:	07 c0       	rjmp	.+14     	; 0x64a <hx_clear_screen+0x1e>
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
	{
		for(col = 0; col <= HX_MAX_COL; col ++)
		{
			hx_send_data(0x00);
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	0e 94 96 02 	call	0x52c	; 0x52c <hx_send_data>
 642:	c1 50       	subi	r28, 0x01	; 1
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
	{
		for(col = 0; col <= HX_MAX_COL; col ++)
 644:	d9 f7       	brne	.-10     	; 0x63c <hx_clear_screen+0x10>
 646:	d1 50       	subi	r29, 0x01	; 1
{
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
 648:	11 f0       	breq	.+4      	; 0x64e <hx_clear_screen+0x22>
	hx_send_command(0x10 | ((_x & 0x7F) >> 4));
	hx_send_command(0x0F & _x);
}

void hx_clear_screen(void)
{
 64a:	c1 e6       	ldi	r28, 0x61	; 97
 64c:	f7 cf       	rjmp	.-18     	; 0x63c <hx_clear_screen+0x10>
		for(col = 0; col <= HX_MAX_COL; col ++)
		{
			hx_send_data(0x00);
		}
	}
}
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	08 95       	ret

00000654 <hx_fill_screen>:

void hx_fill_screen(void)
{
 654:	cf 93       	push	r28
 656:	df 93       	push	r29
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
 658:	60 e0       	ldi	r22, 0x00	; 0
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
 660:	d9 e0       	ldi	r29, 0x09	; 9
 662:	07 c0       	rjmp	.+14     	; 0x672 <hx_fill_screen+0x1e>
	
	for(row = 0; row < 9; row ++)
	{
		for(col = 0; col < 96; col ++)
		{
			hx_send_data(0xFF);
 664:	8f ef       	ldi	r24, 0xFF	; 255
 666:	0e 94 96 02 	call	0x52c	; 0x52c <hx_send_data>
 66a:	c1 50       	subi	r28, 0x01	; 1
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row < 9; row ++)
	{
		for(col = 0; col < 96; col ++)
 66c:	d9 f7       	brne	.-10     	; 0x664 <hx_fill_screen+0x10>
 66e:	d1 50       	subi	r29, 0x01	; 1
{
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row < 9; row ++)
 670:	11 f0       	breq	.+4      	; 0x676 <hx_fill_screen+0x22>
		}
	}
}

void hx_fill_screen(void)
{
 672:	c0 e6       	ldi	r28, 0x60	; 96
 674:	f7 cf       	rjmp	.-18     	; 0x664 <hx_fill_screen+0x10>
		for(col = 0; col < 96; col ++)
		{
			hx_send_data(0xFF);
		}
	}
}
 676:	df 91       	pop	r29
 678:	cf 91       	pop	r28
 67a:	08 95       	ret

0000067c <hx_write_char>:

void hx_write_char(const unsigned char _character)
{
 67c:	0f 93       	push	r16
 67e:	1f 93       	push	r17
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	ec 01       	movw	r28, r24
 688:	cc 0f       	add	r28, r28
 68a:	dd 1f       	adc	r29, r29
 68c:	c8 0f       	add	r28, r24
 68e:	d9 1f       	adc	r29, r25
 690:	cc 0f       	add	r28, r28
 692:	dd 1f       	adc	r29, r29
 694:	c9 52       	subi	r28, 0x29	; 41
 696:	df 4f       	sbci	r29, 0xFF	; 255
 698:	01 96       	adiw	r24, 0x01	; 1
 69a:	8c 01       	movw	r16, r24
 69c:	00 0f       	add	r16, r16
 69e:	11 1f       	adc	r17, r17
 6a0:	80 0f       	add	r24, r16
 6a2:	91 1f       	adc	r25, r17
 6a4:	8c 01       	movw	r16, r24
 6a6:	00 0f       	add	r16, r16
 6a8:	11 1f       	adc	r17, r17
 6aa:	09 52       	subi	r16, 0x29	; 41
 6ac:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(int row_index = 0; row_index < 6; row_index ++)
	{
		hx_send_data(HX_character[_character][row_index]);
 6ae:	89 91       	ld	r24, Y+
 6b0:	0e 94 96 02 	call	0x52c	; 0x52c <hx_send_data>
}

void hx_write_char(const unsigned char _character)
{
	
	for(int row_index = 0; row_index < 6; row_index ++)
 6b4:	c0 17       	cp	r28, r16
 6b6:	d1 07       	cpc	r29, r17
 6b8:	d1 f7       	brne	.-12     	; 0x6ae <hx_write_char+0x32>
	{
		hx_send_data(HX_character[_character][row_index]);
	}
}
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	1f 91       	pop	r17
 6c0:	0f 91       	pop	r16
 6c2:	08 95       	ret

000006c4 <hx_write_string>:

void hx_write_string(const char *_characters_array)
{
 6c4:	0f 93       	push	r16
 6c6:	1f 93       	push	r17
 6c8:	cf 93       	push	r28
 6ca:	df 93       	push	r29
	int string_length = strlen(_characters_array);
 6cc:	fc 01       	movw	r30, r24
 6ce:	01 90       	ld	r0, Z+
 6d0:	00 20       	and	r0, r0
 6d2:	e9 f7       	brne	.-6      	; 0x6ce <hx_write_string+0xa>
 6d4:	31 97       	sbiw	r30, 0x01	; 1
 6d6:	e8 1b       	sub	r30, r24
 6d8:	f9 0b       	sbc	r31, r25
	for(int char_index = 0; char_index < string_length; char_index++)
 6da:	1e 16       	cp	r1, r30
 6dc:	1f 06       	cpc	r1, r31
 6de:	54 f4       	brge	.+20     	; 0x6f4 <hx_write_string+0x30>
 6e0:	ec 01       	movw	r28, r24
 6e2:	8c 01       	movw	r16, r24
 6e4:	0e 0f       	add	r16, r30
 6e6:	1f 1f       	adc	r17, r31
	{
		hx_write_char((const unsigned char)(_characters_array[char_index]));
 6e8:	89 91       	ld	r24, Y+
 6ea:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
}

void hx_write_string(const char *_characters_array)
{
	int string_length = strlen(_characters_array);
	for(int char_index = 0; char_index < string_length; char_index++)
 6ee:	c0 17       	cp	r28, r16
 6f0:	d1 07       	cpc	r29, r17
 6f2:	d1 f7       	brne	.-12     	; 0x6e8 <hx_write_string+0x24>
	{
		hx_write_char((const unsigned char)(_characters_array[char_index]));
	}
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	1f 91       	pop	r17
 6fa:	0f 91       	pop	r16
 6fc:	08 95       	ret

000006fe <manual_control>:
#include "graphics.h"
#include "joystick_driver.h"
#include "sg90_driver.h"

void manual_control(void)
{
 6fe:	0f 93       	push	r16
 700:	1f 93       	push	r17
 702:	cf 93       	push	r28
 704:	df 93       	push	r29
	unsigned int x = ADC_get_value(ADC_CHANNEL_X_AXIS);
 706:	84 e0       	ldi	r24, 0x04	; 4
 708:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_get_value>
 70c:	ec 01       	movw	r28, r24
	unsigned int y = ADC_get_value(ADC_CHANNEL_Y_AXIS);
 70e:	85 e0       	ldi	r24, 0x05	; 5
 710:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_get_value>
 714:	8c 01       	movw	r16, r24
	
	display_joystick_data(x, y);
 716:	bc 01       	movw	r22, r24
 718:	ce 01       	movw	r24, r28
 71a:	0e 94 95 01 	call	0x32a	; 0x32a <display_joystick_data>
	
	if(y > (JOYSTICK_IDLE_VALUE + JOYSTICK_DEAD_ZONE))
 71e:	05 36       	cpi	r16, 0x65	; 101
 720:	82 e0       	ldi	r24, 0x02	; 2
 722:	18 07       	cpc	r17, r24
 724:	30 f0       	brcs	.+12     	; 0x732 <manual_control+0x34>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER ++;
 726:	8a b5       	in	r24, 0x2a	; 42
 728:	9b b5       	in	r25, 0x2b	; 43
 72a:	01 96       	adiw	r24, 0x01	; 1
 72c:	9b bd       	out	0x2b, r25	; 43
 72e:	8a bd       	out	0x2a, r24	; 42
 730:	08 c0       	rjmp	.+16     	; 0x742 <manual_control+0x44>
	}
	else if(y < (JOYSTICK_IDLE_VALUE - JOYSTICK_DEAD_ZONE))
 732:	0c 39       	cpi	r16, 0x9C	; 156
 734:	11 40       	sbci	r17, 0x01	; 1
 736:	28 f4       	brcc	.+10     	; 0x742 <manual_control+0x44>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER --;
 738:	8a b5       	in	r24, 0x2a	; 42
 73a:	9b b5       	in	r25, 0x2b	; 43
 73c:	01 97       	sbiw	r24, 0x01	; 1
 73e:	9b bd       	out	0x2b, r25	; 43
 740:	8a bd       	out	0x2a, r24	; 42
	}
	
	if(x > (JOYSTICK_IDLE_VALUE + JOYSTICK_DEAD_ZONE))
 742:	c5 36       	cpi	r28, 0x65	; 101
 744:	82 e0       	ldi	r24, 0x02	; 2
 746:	d8 07       	cpc	r29, r24
 748:	30 f0       	brcs	.+12     	; 0x756 <manual_control+0x58>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER --;
 74a:	88 b5       	in	r24, 0x28	; 40
 74c:	99 b5       	in	r25, 0x29	; 41
 74e:	01 97       	sbiw	r24, 0x01	; 1
 750:	99 bd       	out	0x29, r25	; 41
 752:	88 bd       	out	0x28, r24	; 40
 754:	08 c0       	rjmp	.+16     	; 0x766 <manual_control+0x68>
	}
	else if(x < (JOYSTICK_IDLE_VALUE - JOYSTICK_DEAD_ZONE))
 756:	cc 39       	cpi	r28, 0x9C	; 156
 758:	d1 40       	sbci	r29, 0x01	; 1
 75a:	28 f4       	brcc	.+10     	; 0x766 <manual_control+0x68>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER ++;
 75c:	88 b5       	in	r24, 0x28	; 40
 75e:	99 b5       	in	r25, 0x29	; 41
 760:	01 96       	adiw	r24, 0x01	; 1
 762:	99 bd       	out	0x29, r25	; 41
 764:	88 bd       	out	0x28, r24	; 40
	}
	
	
	if(SG90_INCLINE_DUTY_CYCLE_REGISTER > SG90_INCLINE_POS_180)
 766:	4a b5       	in	r20, 0x2a	; 42
 768:	5b b5       	in	r21, 0x2b	; 43
 76a:	26 b5       	in	r18, 0x26	; 38
 76c:	37 b5       	in	r19, 0x27	; 39
 76e:	ad ec       	ldi	r26, 0xCD	; 205
 770:	bc ec       	ldi	r27, 0xCC	; 204
 772:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 776:	96 95       	lsr	r25
 778:	87 95       	ror	r24
 77a:	96 95       	lsr	r25
 77c:	87 95       	ror	r24
 77e:	96 95       	lsr	r25
 780:	87 95       	ror	r24
 782:	0f 96       	adiw	r24, 0x0f	; 15
 784:	84 17       	cp	r24, r20
 786:	95 07       	cpc	r25, r21
 788:	68 f4       	brcc	.+26     	; 0x7a4 <manual_control+0xa6>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_INCLINE_POS_180;
 78a:	26 b5       	in	r18, 0x26	; 38
 78c:	37 b5       	in	r19, 0x27	; 39
 78e:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 792:	96 95       	lsr	r25
 794:	87 95       	ror	r24
 796:	96 95       	lsr	r25
 798:	87 95       	ror	r24
 79a:	96 95       	lsr	r25
 79c:	87 95       	ror	r24
 79e:	0f 96       	adiw	r24, 0x0f	; 15
 7a0:	9b bd       	out	0x2b, r25	; 43
 7a2:	8a bd       	out	0x2a, r24	; 42
	}
	if(SG90_INCLINE_DUTY_CYCLE_REGISTER < SG90_INCLINE_POS_0)
 7a4:	4a b5       	in	r20, 0x2a	; 42
 7a6:	5b b5       	in	r21, 0x2b	; 43
 7a8:	26 b5       	in	r18, 0x26	; 38
 7aa:	37 b5       	in	r19, 0x27	; 39
 7ac:	ad ec       	ldi	r26, 0xCD	; 205
 7ae:	bc ec       	ldi	r27, 0xCC	; 204
 7b0:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 7b4:	92 95       	swap	r25
 7b6:	82 95       	swap	r24
 7b8:	8f 70       	andi	r24, 0x0F	; 15
 7ba:	89 27       	eor	r24, r25
 7bc:	9f 70       	andi	r25, 0x0F	; 15
 7be:	89 27       	eor	r24, r25
 7c0:	82 54       	subi	r24, 0x42	; 66
 7c2:	91 09       	sbc	r25, r1
 7c4:	48 17       	cp	r20, r24
 7c6:	59 07       	cpc	r21, r25
 7c8:	70 f4       	brcc	.+28     	; 0x7e6 <manual_control+0xe8>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_INCLINE_POS_0;
 7ca:	26 b5       	in	r18, 0x26	; 38
 7cc:	37 b5       	in	r19, 0x27	; 39
 7ce:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 7d2:	92 95       	swap	r25
 7d4:	82 95       	swap	r24
 7d6:	8f 70       	andi	r24, 0x0F	; 15
 7d8:	89 27       	eor	r24, r25
 7da:	9f 70       	andi	r25, 0x0F	; 15
 7dc:	89 27       	eor	r24, r25
 7de:	82 54       	subi	r24, 0x42	; 66
 7e0:	91 09       	sbc	r25, r1
 7e2:	9b bd       	out	0x2b, r25	; 43
 7e4:	8a bd       	out	0x2a, r24	; 42
	}
	if(SG90_ROTATE_DUTY_CYCLE_REGISTER > SG90_ROTATE_POS_180)
 7e6:	48 b5       	in	r20, 0x28	; 40
 7e8:	59 b5       	in	r21, 0x29	; 41
 7ea:	26 b5       	in	r18, 0x26	; 38
 7ec:	37 b5       	in	r19, 0x27	; 39
 7ee:	ad ec       	ldi	r26, 0xCD	; 205
 7f0:	bc ec       	ldi	r27, 0xCC	; 204
 7f2:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 7f6:	96 95       	lsr	r25
 7f8:	87 95       	ror	r24
 7fa:	96 95       	lsr	r25
 7fc:	87 95       	ror	r24
 7fe:	96 95       	lsr	r25
 800:	87 95       	ror	r24
 802:	05 96       	adiw	r24, 0x05	; 5
 804:	84 17       	cp	r24, r20
 806:	95 07       	cpc	r25, r21
 808:	68 f4       	brcc	.+26     	; 0x824 <manual_control+0x126>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_POS_180;
 80a:	26 b5       	in	r18, 0x26	; 38
 80c:	37 b5       	in	r19, 0x27	; 39
 80e:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 812:	96 95       	lsr	r25
 814:	87 95       	ror	r24
 816:	96 95       	lsr	r25
 818:	87 95       	ror	r24
 81a:	96 95       	lsr	r25
 81c:	87 95       	ror	r24
 81e:	05 96       	adiw	r24, 0x05	; 5
 820:	99 bd       	out	0x29, r25	; 41
 822:	88 bd       	out	0x28, r24	; 40
	}
	if(SG90_ROTATE_DUTY_CYCLE_REGISTER < SG90_ROTATE_POS_0)
 824:	48 b5       	in	r20, 0x28	; 40
 826:	59 b5       	in	r21, 0x29	; 41
 828:	26 b5       	in	r18, 0x26	; 38
 82a:	37 b5       	in	r19, 0x27	; 39
 82c:	ad ec       	ldi	r26, 0xCD	; 205
 82e:	bc ec       	ldi	r27, 0xCC	; 204
 830:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 834:	92 95       	swap	r25
 836:	82 95       	swap	r24
 838:	8f 70       	andi	r24, 0x0F	; 15
 83a:	89 27       	eor	r24, r25
 83c:	9f 70       	andi	r25, 0x0F	; 15
 83e:	89 27       	eor	r24, r25
 840:	82 54       	subi	r24, 0x42	; 66
 842:	91 09       	sbc	r25, r1
 844:	48 17       	cp	r20, r24
 846:	59 07       	cpc	r21, r25
 848:	70 f4       	brcc	.+28     	; 0x866 <__stack+0x7>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_POS_0;
 84a:	26 b5       	in	r18, 0x26	; 38
 84c:	37 b5       	in	r19, 0x27	; 39
 84e:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 852:	92 95       	swap	r25
 854:	82 95       	swap	r24
 856:	8f 70       	andi	r24, 0x0F	; 15
 858:	89 27       	eor	r24, r25
 85a:	9f 70       	andi	r25, 0x0F	; 15
 85c:	89 27       	eor	r24, r25
 85e:	82 54       	subi	r24, 0x42	; 66
 860:	91 09       	sbc	r25, r1
 862:	99 bd       	out	0x29, r25	; 41
 864:	88 bd       	out	0x28, r24	; 40
 866:	8f e4       	ldi	r24, 0x4F	; 79
 868:	93 ec       	ldi	r25, 0xC3	; 195
 86a:	01 97       	sbiw	r24, 0x01	; 1
 86c:	f1 f7       	brne	.-4      	; 0x86a <__stack+0xb>
 86e:	00 c0       	rjmp	.+0      	; 0x870 <__stack+0x11>
 870:	00 00       	nop
	}
	_delay_ms(25);
}
 872:	df 91       	pop	r29
 874:	cf 91       	pop	r28
 876:	1f 91       	pop	r17
 878:	0f 91       	pop	r16
 87a:	08 95       	ret

0000087c <get_filtered_light_intensity>:
	adc_value = percentage_value(adc_value);
	return adc_value;
}

int get_filtered_light_intensity(uint8_t sensor)
{
 87c:	0f 93       	push	r16
 87e:	1f 93       	push	r17
 880:	cf 93       	push	r28
 882:	df 93       	push	r29
 884:	d8 2f       	mov	r29, r24
 886:	cf e0       	ldi	r28, 0x0F	; 15
	uint16_t adc_value = 0;
 888:	00 e0       	ldi	r16, 0x00	; 0
 88a:	10 e0       	ldi	r17, 0x00	; 0
	for(char i = 0; i < FILTLER_RANK; i++)
	{
		adc_value += ADC_get_value(sensor);
 88c:	8d 2f       	mov	r24, r29
 88e:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_get_value>
 892:	08 0f       	add	r16, r24
 894:	19 1f       	adc	r17, r25
 896:	c1 50       	subi	r28, 0x01	; 1
}

int get_filtered_light_intensity(uint8_t sensor)
{
	uint16_t adc_value = 0;
	for(char i = 0; i < FILTLER_RANK; i++)
 898:	c9 f7       	brne	.-14     	; 0x88c <get_filtered_light_intensity+0x10>
	return adc_value;
}

int percentage_value(int raw_value)
{
	raw_value = raw_value*((long)100)/1023;
 89a:	98 01       	movw	r18, r16
 89c:	a9 e8       	ldi	r26, 0x89	; 137
 89e:	b8 e8       	ldi	r27, 0x88	; 136
 8a0:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 8a4:	dc 01       	movw	r26, r24
 8a6:	b6 95       	lsr	r27
 8a8:	a7 95       	ror	r26
 8aa:	b6 95       	lsr	r27
 8ac:	a7 95       	ror	r26
 8ae:	b6 95       	lsr	r27
 8b0:	a7 95       	ror	r26
 8b2:	24 e6       	ldi	r18, 0x64	; 100
 8b4:	30 e0       	ldi	r19, 0x00	; 0
 8b6:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__usmulhisi3>
 8ba:	2f ef       	ldi	r18, 0xFF	; 255
 8bc:	33 e0       	ldi	r19, 0x03	; 3
 8be:	40 e0       	ldi	r20, 0x00	; 0
 8c0:	50 e0       	ldi	r21, 0x00	; 0
 8c2:	0e 94 79 07 	call	0xef2	; 0xef2 <__divmodsi4>
		adc_value += ADC_get_value(sensor);
	}
	adc_value /= FILTLER_RANK;
	adc_value = percentage_value(adc_value);
	return adc_value;
}
 8c6:	84 e6       	ldi	r24, 0x64	; 100
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	82 1b       	sub	r24, r18
 8cc:	93 0b       	sbc	r25, r19
 8ce:	df 91       	pop	r29
 8d0:	cf 91       	pop	r28
 8d2:	1f 91       	pop	r17
 8d4:	0f 91       	pop	r16
 8d6:	08 95       	ret

000008d8 <uC_init>:
 8d8:	2f ef       	ldi	r18, 0xFF	; 255
 8da:	80 e7       	ldi	r24, 0x70	; 112
 8dc:	92 e0       	ldi	r25, 0x02	; 2
 8de:	21 50       	subi	r18, 0x01	; 1
 8e0:	80 40       	sbci	r24, 0x00	; 0
 8e2:	90 40       	sbci	r25, 0x00	; 0
 8e4:	e1 f7       	brne	.-8      	; 0x8de <uC_init+0x6>
 8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <uC_init+0x10>
 8e8:	00 00       	nop
{
	// Wait for system to get fully powered up
	_delay_ms(100);
	
	// initialize required modules
	ADC_init();
 8ea:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
 8ee:	2f e7       	ldi	r18, 0x7F	; 127
 8f0:	88 e3       	ldi	r24, 0x38	; 56
 8f2:	91 e0       	ldi	r25, 0x01	; 1
 8f4:	21 50       	subi	r18, 0x01	; 1
 8f6:	80 40       	sbci	r24, 0x00	; 0
 8f8:	90 40       	sbci	r25, 0x00	; 0
 8fa:	e1 f7       	brne	.-8      	; 0x8f4 <uC_init+0x1c>
 8fc:	00 c0       	rjmp	.+0      	; 0x8fe <uC_init+0x26>
 8fe:	00 00       	nop
	_delay_ms(50);
	
	init_pwm_channels();
 900:	0e 94 11 05 	call	0xa22	; 0xa22 <init_pwm_channels>
 904:	2f e7       	ldi	r18, 0x7F	; 127
 906:	88 e3       	ldi	r24, 0x38	; 56
 908:	91 e0       	ldi	r25, 0x01	; 1
 90a:	21 50       	subi	r18, 0x01	; 1
 90c:	80 40       	sbci	r24, 0x00	; 0
 90e:	90 40       	sbci	r25, 0x00	; 0
 910:	e1 f7       	brne	.-8      	; 0x90a <uC_init+0x32>
 912:	00 c0       	rjmp	.+0      	; 0x914 <uC_init+0x3c>
 914:	00 00       	nop
	_delay_ms(50);
	
	init_user_interface();
 916:	0e 94 3e 07 	call	0xe7c	; 0xe7c <init_user_interface>
 91a:	2f e7       	ldi	r18, 0x7F	; 127
 91c:	88 e3       	ldi	r24, 0x38	; 56
 91e:	91 e0       	ldi	r25, 0x01	; 1
 920:	21 50       	subi	r18, 0x01	; 1
 922:	80 40       	sbci	r24, 0x00	; 0
 924:	90 40       	sbci	r25, 0x00	; 0
 926:	e1 f7       	brne	.-8      	; 0x920 <uC_init+0x48>
 928:	00 c0       	rjmp	.+0      	; 0x92a <uC_init+0x52>
 92a:	00 00       	nop
	_delay_ms(50);
	
	init_hx1230_control();
 92c:	0e 94 ca 02 	call	0x594	; 0x594 <init_hx1230_control>
 930:	2f e7       	ldi	r18, 0x7F	; 127
 932:	88 e3       	ldi	r24, 0x38	; 56
 934:	91 e0       	ldi	r25, 0x01	; 1
 936:	21 50       	subi	r18, 0x01	; 1
 938:	80 40       	sbci	r24, 0x00	; 0
 93a:	90 40       	sbci	r25, 0x00	; 0
 93c:	e1 f7       	brne	.-8      	; 0x936 <uC_init+0x5e>
 93e:	00 c0       	rjmp	.+0      	; 0x940 <uC_init+0x68>
 940:	00 00       	nop
	_delay_ms(50);
	hx_fill_screen();
 942:	0e 94 2a 03 	call	0x654	; 0x654 <hx_fill_screen>
 946:	2f ef       	ldi	r18, 0xFF	; 255
 948:	84 e3       	ldi	r24, 0x34	; 52
 94a:	9c e0       	ldi	r25, 0x0C	; 12
 94c:	21 50       	subi	r18, 0x01	; 1
 94e:	80 40       	sbci	r24, 0x00	; 0
 950:	90 40       	sbci	r25, 0x00	; 0
 952:	e1 f7       	brne	.-8      	; 0x94c <uC_init+0x74>
 954:	00 c0       	rjmp	.+0      	; 0x956 <uC_init+0x7e>
 956:	00 00       	nop
	_delay_ms(500);
	hx_clear_screen();
 958:	0e 94 16 03 	call	0x62c	; 0x62c <hx_clear_screen>
 95c:	2f e7       	ldi	r18, 0x7F	; 127
 95e:	88 e3       	ldi	r24, 0x38	; 56
 960:	91 e0       	ldi	r25, 0x01	; 1
 962:	21 50       	subi	r18, 0x01	; 1
 964:	80 40       	sbci	r24, 0x00	; 0
 966:	90 40       	sbci	r25, 0x00	; 0
 968:	e1 f7       	brne	.-8      	; 0x962 <uC_init+0x8a>
 96a:	00 c0       	rjmp	.+0      	; 0x96c <uC_init+0x94>
 96c:	00 00       	nop
	_delay_ms(50);
	
	display_title();
 96e:	0e 94 5a 00 	call	0xb4	; 0xb4 <display_title>
	display_idle_state_message();
 972:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <display_idle_state_message>
	
	sei(); // enable global interrupts
 976:	78 94       	sei
 978:	08 95       	ret

0000097a <main>:

void uC_init(void);

int main(void)
{
	STATE = STATE_INIT;
 97a:	10 92 d9 06 	sts	0x06D9, r1	; 0x8006d9 <STATE>
	OLD_STATE = STATE_INIT;
 97e:	10 92 d8 06 	sts	0x06D8, r1	; 0x8006d8 <__data_end>
	uC_init();
 982:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <uC_init>
	
	SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_INCLINE_POS_0;
 986:	26 b5       	in	r18, 0x26	; 38
 988:	37 b5       	in	r19, 0x27	; 39
 98a:	ad ec       	ldi	r26, 0xCD	; 205
 98c:	bc ec       	ldi	r27, 0xCC	; 204
 98e:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 992:	92 95       	swap	r25
 994:	82 95       	swap	r24
 996:	8f 70       	andi	r24, 0x0F	; 15
 998:	89 27       	eor	r24, r25
 99a:	9f 70       	andi	r25, 0x0F	; 15
 99c:	89 27       	eor	r24, r25
 99e:	82 54       	subi	r24, 0x42	; 66
 9a0:	91 09       	sbc	r25, r1
 9a2:	9b bd       	out	0x2b, r25	; 43
 9a4:	8a bd       	out	0x2a, r24	; 42
	SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_INIT_POS;
 9a6:	86 b5       	in	r24, 0x26	; 38
 9a8:	97 b5       	in	r25, 0x27	; 39
 9aa:	9c 01       	movw	r18, r24
 9ac:	22 0f       	add	r18, r18
 9ae:	33 1f       	adc	r19, r19
 9b0:	88 0f       	add	r24, r24
 9b2:	99 1f       	adc	r25, r25
 9b4:	88 0f       	add	r24, r24
 9b6:	99 1f       	adc	r25, r25
 9b8:	88 0f       	add	r24, r24
 9ba:	99 1f       	adc	r25, r25
 9bc:	28 0f       	add	r18, r24
 9be:	39 1f       	adc	r19, r25
 9c0:	a1 e6       	ldi	r26, 0x61	; 97
 9c2:	b6 ef       	ldi	r27, 0xF6	; 246
 9c4:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 9c8:	88 0f       	add	r24, r24
 9ca:	89 2f       	mov	r24, r25
 9cc:	88 1f       	adc	r24, r24
 9ce:	99 0b       	sbc	r25, r25
 9d0:	91 95       	neg	r25
 9d2:	88 97       	sbiw	r24, 0x28	; 40
 9d4:	99 bd       	out	0x29, r25	; 41
 9d6:	88 bd       	out	0x28, r24	; 40
	turn_on_pwm_channels();
 9d8:	0e 94 29 05 	call	0xa52	; 0xa52 <turn_on_pwm_channels>
	
	
	STATE = STATE_IDLE;
 9dc:	81 e0       	ldi	r24, 0x01	; 1
 9de:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <STATE>
	while (1)
	{
		/*PORTC = ~PORTC;
		_delay_ms(100);*/
		
		if(STATE_CHANGED)
 9e2:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <STATE>
 9e6:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <__data_end>
 9ea:	98 17       	cp	r25, r24
 9ec:	71 f0       	breq	.+28     	; 0xa0a <main+0x90>
		{
			OLD_STATE = STATE; // update state
 9ee:	80 93 d8 06 	sts	0x06D8, r24	; 0x8006d8 <__data_end>
			go_to_state(STATE);
 9f2:	0e 94 66 05 	call	0xacc	; 0xacc <go_to_state>
 9f6:	2f e7       	ldi	r18, 0x7F	; 127
 9f8:	8a e1       	ldi	r24, 0x1A	; 26
 9fa:	96 e0       	ldi	r25, 0x06	; 6
 9fc:	21 50       	subi	r18, 0x01	; 1
 9fe:	80 40       	sbci	r24, 0x00	; 0
 a00:	90 40       	sbci	r25, 0x00	; 0
 a02:	e1 f7       	brne	.-8      	; 0x9fc <main+0x82>
 a04:	00 c0       	rjmp	.+0      	; 0xa06 <main+0x8c>
 a06:	00 00       	nop
			_delay_ms(250);
			sei(); // enable interrupts
 a08:	78 94       	sei
		}
		
		switch(OLD_STATE)
 a0a:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <__data_end>
 a0e:	82 30       	cpi	r24, 0x02	; 2
 a10:	29 f0       	breq	.+10     	; 0xa1c <main+0xa2>
 a12:	83 30       	cpi	r24, 0x03	; 3
 a14:	31 f7       	brne	.-52     	; 0x9e2 <main+0x68>
		{
			case STATE_TRACKING:
			{
				track();
 a16:	0e 94 83 05 	call	0xb06	; 0xb06 <track>
				break;
 a1a:	e3 cf       	rjmp	.-58     	; 0x9e2 <main+0x68>
			}
			case STATE_MANUAL:
			{
				manual_control();
 a1c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <manual_control>
				break;
 a20:	e0 cf       	rjmp	.-64     	; 0x9e2 <main+0x68>

00000a22 <init_pwm_channels>:
#include "global.h"
#include <avr/io.h>

void init_pwm_channels(void)
{
	DDRD |= (1 << DDD4)|(1 << DDD5);
 a22:	81 b3       	in	r24, 0x11	; 17
 a24:	80 63       	ori	r24, 0x30	; 48
 a26:	81 bb       	out	0x11, r24	; 17
	// PD4 and PD5 as output of 16bits Timer1
	
	 ICR1 = 2485;
 a28:	85 eb       	ldi	r24, 0xB5	; 181
 a2a:	99 e0       	ldi	r25, 0x09	; 9
 a2c:	97 bd       	out	0x27, r25	; 39
 a2e:	86 bd       	out	0x26, r24	; 38
	 // set TOP to count 20ms
	 // TOP calculated by the formula: F_PWM = F_CPU/(PRESCALER*(1 + TOP))
	 // Atmel-42735-8-bit-AVR-Microcontroller-ATmega328-328P_Datasheet, page 164

	 OCR1A = 00;
 a30:	1b bc       	out	0x2b, r1	; 43
 a32:	1a bc       	out	0x2a, r1	; 42
	 // set PWM for 0% duty cycle

	 OCR1B = 00;
 a34:	19 bc       	out	0x29, r1	; 41
 a36:	18 bc       	out	0x28, r1	; 40
	 // set PWM for 0% duty cycle

	 TCCR1A &= ~((1 << COM1A1)|(1 << COM1B1));
 a38:	8f b5       	in	r24, 0x2f	; 47
 a3a:	8f 75       	andi	r24, 0x5F	; 95
 a3c:	8f bd       	out	0x2f, r24	; 47
	 // make sure PWM signal is off

	TCCR1B |= (1 << CS11);
 a3e:	8e b5       	in	r24, 0x2e	; 46
 a40:	82 60       	ori	r24, 0x02	; 2
 a42:	8e bd       	out	0x2e, r24	; 46
	// START the timer with 8 prescaler

	 TCCR1A |= (1 << WGM11);
 a44:	8f b5       	in	r24, 0x2f	; 47
 a46:	82 60       	ori	r24, 0x02	; 2
 a48:	8f bd       	out	0x2f, r24	; 47
	 TCCR1B |= (1 << WGM12)|(1 << WGM13);
 a4a:	8e b5       	in	r24, 0x2e	; 46
 a4c:	88 61       	ori	r24, 0x18	; 24
 a4e:	8e bd       	out	0x2e, r24	; 46
 a50:	08 95       	ret

00000a52 <turn_on_pwm_channels>:
	 // set Fast PWM mode using ICR1 as TOP
}

void turn_on_pwm_channels(void)
{
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1);
 a52:	8f b5       	in	r24, 0x2f	; 47
 a54:	80 6a       	ori	r24, 0xA0	; 160
 a56:	8f bd       	out	0x2f, r24	; 47
 a58:	08 95       	ret

00000a5a <idle_state_setup>:
 a5a:	2f ef       	ldi	r18, 0xFF	; 255
 a5c:	81 ee       	ldi	r24, 0xE1	; 225
 a5e:	94 e0       	ldi	r25, 0x04	; 4
 a60:	21 50       	subi	r18, 0x01	; 1
 a62:	80 40       	sbci	r24, 0x00	; 0
 a64:	90 40       	sbci	r25, 0x00	; 0
 a66:	e1 f7       	brne	.-8      	; 0xa60 <idle_state_setup+0x6>
 a68:	00 c0       	rjmp	.+0      	; 0xa6a <idle_state_setup+0x10>
 a6a:	00 00       	nop
}

void idle_state_setup(void)
{
	_delay_ms(200);
	hx_clear_screen();
 a6c:	0e 94 16 03 	call	0x62c	; 0x62c <hx_clear_screen>
	display_title();
 a70:	0e 94 5a 00 	call	0xb4	; 0xb4 <display_title>
	display_idle_state_message();
 a74:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <display_idle_state_message>
 a78:	08 95       	ret

00000a7a <manual_state_setup>:
 a7a:	2f ef       	ldi	r18, 0xFF	; 255
 a7c:	81 ee       	ldi	r24, 0xE1	; 225
 a7e:	94 e0       	ldi	r25, 0x04	; 4
 a80:	21 50       	subi	r18, 0x01	; 1
 a82:	80 40       	sbci	r24, 0x00	; 0
 a84:	90 40       	sbci	r25, 0x00	; 0
 a86:	e1 f7       	brne	.-8      	; 0xa80 <manual_state_setup+0x6>
 a88:	00 c0       	rjmp	.+0      	; 0xa8a <manual_state_setup+0x10>
 a8a:	00 00       	nop
}

void manual_state_setup(void)
{
	_delay_ms(200);
	hx_clear_screen();
 a8c:	0e 94 16 03 	call	0x62c	; 0x62c <hx_clear_screen>
	display_title();
 a90:	0e 94 5a 00 	call	0xb4	; 0xb4 <display_title>
	display_manual_state_message();
 a94:	0e 94 74 01 	call	0x2e8	; 0x2e8 <display_manual_state_message>
 a98:	08 95       	ret

00000a9a <tracking_state_setup>:
 a9a:	2f ef       	ldi	r18, 0xFF	; 255
 a9c:	81 ee       	ldi	r24, 0xE1	; 225
 a9e:	94 e0       	ldi	r25, 0x04	; 4
 aa0:	21 50       	subi	r18, 0x01	; 1
 aa2:	80 40       	sbci	r24, 0x00	; 0
 aa4:	90 40       	sbci	r25, 0x00	; 0
 aa6:	e1 f7       	brne	.-8      	; 0xaa0 <tracking_state_setup+0x6>
 aa8:	00 c0       	rjmp	.+0      	; 0xaaa <tracking_state_setup+0x10>
 aaa:	00 00       	nop
}

void tracking_state_setup(void)
{
	_delay_ms(200);
	hx_clear_screen();
 aac:	0e 94 16 03 	call	0x62c	; 0x62c <hx_clear_screen>
	display_title();
 ab0:	0e 94 5a 00 	call	0xb4	; 0xb4 <display_title>
	display_data_menu();
 ab4:	0e 94 6b 00 	call	0xd6	; 0xd6 <display_data_menu>
 ab8:	2f ef       	ldi	r18, 0xFF	; 255
 aba:	84 e3       	ldi	r24, 0x34	; 52
 abc:	9c e0       	ldi	r25, 0x0C	; 12
 abe:	21 50       	subi	r18, 0x01	; 1
 ac0:	80 40       	sbci	r24, 0x00	; 0
 ac2:	90 40       	sbci	r25, 0x00	; 0
 ac4:	e1 f7       	brne	.-8      	; 0xabe <tracking_state_setup+0x24>
 ac6:	00 c0       	rjmp	.+0      	; 0xac8 <tracking_state_setup+0x2e>
 ac8:	00 00       	nop
 aca:	08 95       	ret

00000acc <go_to_state>:
#include "graphics.h"
#include "state_handler.h"
#include "hx1230.h"

void go_to_state(unsigned char state)
{
 acc:	cf 93       	push	r28
 ace:	c8 2f       	mov	r28, r24
	hx_clear_screen();
 ad0:	0e 94 16 03 	call	0x62c	; 0x62c <hx_clear_screen>
	switch(state)
 ad4:	c2 30       	cpi	r28, 0x02	; 2
 ad6:	51 f0       	breq	.+20     	; 0xaec <go_to_state+0x20>
 ad8:	c3 30       	cpi	r28, 0x03	; 3
 ada:	71 f0       	breq	.+28     	; 0xaf8 <go_to_state+0x2c>
 adc:	c1 30       	cpi	r28, 0x01	; 1
 ade:	89 f4       	brne	.+34     	; 0xb02 <go_to_state+0x36>
	{
		case STATE_IDLE:
		{
			STATE = STATE_IDLE; // update global state
 ae0:	81 e0       	ldi	r24, 0x01	; 1
 ae2:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <STATE>
			idle_state_setup();
 ae6:	0e 94 2d 05 	call	0xa5a	; 0xa5a <idle_state_setup>
			break;
 aea:	0b c0       	rjmp	.+22     	; 0xb02 <go_to_state+0x36>
		}
		case STATE_MANUAL:
		{
			STATE = STATE_MANUAL; // update global state
 aec:	82 e0       	ldi	r24, 0x02	; 2
 aee:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <STATE>
			manual_state_setup();
 af2:	0e 94 3d 05 	call	0xa7a	; 0xa7a <manual_state_setup>
			break;
 af6:	05 c0       	rjmp	.+10     	; 0xb02 <go_to_state+0x36>
		}
		case STATE_TRACKING:
		{
			STATE = STATE_TRACKING; // update global state
 af8:	83 e0       	ldi	r24, 0x03	; 3
 afa:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <STATE>
			tracking_state_setup();
 afe:	0e 94 4d 05 	call	0xa9a	; 0xa9a <tracking_state_setup>
			break;
		}
	}
}
 b02:	cf 91       	pop	r28
 b04:	08 95       	ret

00000b06 <track>:

int up_down_movement_gradient_request;
int left_right_movement_gradient_request;

void track(void)
{
 b06:	cf 93       	push	r28
 b08:	df 93       	push	r29
	light_up_left = get_filtered_light_intensity(LS_UP_LEFT);
 b0a:	80 e0       	ldi	r24, 0x00	; 0
 b0c:	0e 94 3e 04 	call	0x87c	; 0x87c <get_filtered_light_intensity>
 b10:	90 93 ed 06 	sts	0x06ED, r25	; 0x8006ed <light_up_left+0x1>
 b14:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <light_up_left>
	light_up_right = get_filtered_light_intensity(LS_UP_RIGHT);
 b18:	81 e0       	ldi	r24, 0x01	; 1
 b1a:	0e 94 3e 04 	call	0x87c	; 0x87c <get_filtered_light_intensity>
 b1e:	90 93 df 06 	sts	0x06DF, r25	; 0x8006df <light_up_right+0x1>
 b22:	80 93 de 06 	sts	0x06DE, r24	; 0x8006de <light_up_right>
	light_down_left = get_filtered_light_intensity(LS_DOWN_LEFT);
 b26:	82 e0       	ldi	r24, 0x02	; 2
 b28:	0e 94 3e 04 	call	0x87c	; 0x87c <get_filtered_light_intensity>
 b2c:	90 93 e9 06 	sts	0x06E9, r25	; 0x8006e9 <light_down_left+0x1>
 b30:	80 93 e8 06 	sts	0x06E8, r24	; 0x8006e8 <light_down_left>
	light_down_right = get_filtered_light_intensity(LS_DOWN_RIGHT);
 b34:	83 e0       	ldi	r24, 0x03	; 3
 b36:	0e 94 3e 04 	call	0x87c	; 0x87c <get_filtered_light_intensity>
 b3a:	90 93 e1 06 	sts	0x06E1, r25	; 0x8006e1 <light_down_right+0x1>
 b3e:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <light_down_right>
	
	display_light_sensor_data(LS_UP_LEFT, light_up_left);
 b42:	60 91 ec 06 	lds	r22, 0x06EC	; 0x8006ec <light_up_left>
 b46:	70 91 ed 06 	lds	r23, 0x06ED	; 0x8006ed <light_up_left+0x1>
 b4a:	80 e0       	ldi	r24, 0x00	; 0
 b4c:	0e 94 84 00 	call	0x108	; 0x108 <display_light_sensor_data>
	display_light_sensor_data(LS_UP_RIGHT, light_up_right);
 b50:	60 91 de 06 	lds	r22, 0x06DE	; 0x8006de <light_up_right>
 b54:	70 91 df 06 	lds	r23, 0x06DF	; 0x8006df <light_up_right+0x1>
 b58:	81 e0       	ldi	r24, 0x01	; 1
 b5a:	0e 94 84 00 	call	0x108	; 0x108 <display_light_sensor_data>
	display_light_sensor_data(LS_DOWN_LEFT, light_down_left);
 b5e:	60 91 e8 06 	lds	r22, 0x06E8	; 0x8006e8 <light_down_left>
 b62:	70 91 e9 06 	lds	r23, 0x06E9	; 0x8006e9 <light_down_left+0x1>
 b66:	82 e0       	ldi	r24, 0x02	; 2
 b68:	0e 94 84 00 	call	0x108	; 0x108 <display_light_sensor_data>
	display_light_sensor_data(LS_DOWN_RIGHT, light_down_right);
 b6c:	60 91 e0 06 	lds	r22, 0x06E0	; 0x8006e0 <light_down_right>
 b70:	70 91 e1 06 	lds	r23, 0x06E1	; 0x8006e1 <light_down_right+0x1>
 b74:	83 e0       	ldi	r24, 0x03	; 3
 b76:	0e 94 84 00 	call	0x108	; 0x108 <display_light_sensor_data>
	
	up_intensity_average = light_up_left + light_up_right;
 b7a:	e0 91 ec 06 	lds	r30, 0x06EC	; 0x8006ec <light_up_left>
 b7e:	f0 91 ed 06 	lds	r31, 0x06ED	; 0x8006ed <light_up_left+0x1>
 b82:	60 91 de 06 	lds	r22, 0x06DE	; 0x8006de <light_up_right>
 b86:	70 91 df 06 	lds	r23, 0x06DF	; 0x8006df <light_up_right+0x1>
	up_intensity_average >>= 1;
 b8a:	af 01       	movw	r20, r30
 b8c:	46 0f       	add	r20, r22
 b8e:	57 1f       	adc	r21, r23
 b90:	55 95       	asr	r21
 b92:	47 95       	ror	r20
 b94:	50 93 eb 06 	sts	0x06EB, r21	; 0x8006eb <up_intensity_average+0x1>
 b98:	40 93 ea 06 	sts	0x06EA, r20	; 0x8006ea <up_intensity_average>
	
	down_intensity_average = light_down_left + light_down_right;
 b9c:	20 91 e8 06 	lds	r18, 0x06E8	; 0x8006e8 <light_down_left>
 ba0:	30 91 e9 06 	lds	r19, 0x06E9	; 0x8006e9 <light_down_left+0x1>
 ba4:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <light_down_right>
 ba8:	90 91 e1 06 	lds	r25, 0x06E1	; 0x8006e1 <light_down_right+0x1>
	down_intensity_average >>= 1;
 bac:	a9 01       	movw	r20, r18
 bae:	48 0f       	add	r20, r24
 bb0:	59 1f       	adc	r21, r25
 bb2:	55 95       	asr	r21
 bb4:	47 95       	ror	r20
 bb6:	50 93 db 06 	sts	0x06DB, r21	; 0x8006db <down_intensity_average+0x1>
 bba:	40 93 da 06 	sts	0x06DA, r20	; 0x8006da <down_intensity_average>
	
	left_intensity_average = light_up_left + light_down_left;
	left_intensity_average >>= 1;
 bbe:	2e 0f       	add	r18, r30
 bc0:	3f 1f       	adc	r19, r31
 bc2:	35 95       	asr	r19
 bc4:	27 95       	ror	r18
 bc6:	30 93 dd 06 	sts	0x06DD, r19	; 0x8006dd <left_intensity_average+0x1>
 bca:	20 93 dc 06 	sts	0x06DC, r18	; 0x8006dc <left_intensity_average>
	
	right_intensity_average = light_up_right + light_down_right;
	right_intensity_average >>= 1;
 bce:	86 0f       	add	r24, r22
 bd0:	97 1f       	adc	r25, r23
 bd2:	95 95       	asr	r25
 bd4:	87 95       	ror	r24
 bd6:	90 93 e7 06 	sts	0x06E7, r25	; 0x8006e7 <right_intensity_average+0x1>
 bda:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <right_intensity_average>
	
	hx_set_coordinates(42, 2);
 bde:	62 e0       	ldi	r22, 0x02	; 2
 be0:	8a e2       	ldi	r24, 0x2A	; 42
 be2:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
	hx_write_char('0' + (up_intensity_average / 10) % 10);
 be6:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <up_intensity_average>
 bea:	90 91 eb 06 	lds	r25, 0x06EB	; 0x8006eb <up_intensity_average+0x1>
 bee:	ca e0       	ldi	r28, 0x0A	; 10
 bf0:	d0 e0       	ldi	r29, 0x00	; 0
 bf2:	be 01       	movw	r22, r28
 bf4:	0e 94 65 07 	call	0xeca	; 0xeca <__divmodhi4>
 bf8:	cb 01       	movw	r24, r22
 bfa:	be 01       	movw	r22, r28
 bfc:	0e 94 65 07 	call	0xeca	; 0xeca <__divmodhi4>
 c00:	80 5d       	subi	r24, 0xD0	; 208
 c02:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	hx_write_char('0' + up_intensity_average % 10);
 c06:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <up_intensity_average>
 c0a:	90 91 eb 06 	lds	r25, 0x06EB	; 0x8006eb <up_intensity_average+0x1>
 c0e:	be 01       	movw	r22, r28
 c10:	0e 94 65 07 	call	0xeca	; 0xeca <__divmodhi4>
 c14:	80 5d       	subi	r24, 0xD0	; 208
 c16:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	
	hx_set_coordinates(42, 6);
 c1a:	66 e0       	ldi	r22, 0x06	; 6
 c1c:	8a e2       	ldi	r24, 0x2A	; 42
 c1e:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
	hx_write_char('0' + (down_intensity_average / 10) % 10);
 c22:	80 91 da 06 	lds	r24, 0x06DA	; 0x8006da <down_intensity_average>
 c26:	90 91 db 06 	lds	r25, 0x06DB	; 0x8006db <down_intensity_average+0x1>
 c2a:	be 01       	movw	r22, r28
 c2c:	0e 94 65 07 	call	0xeca	; 0xeca <__divmodhi4>
 c30:	cb 01       	movw	r24, r22
 c32:	be 01       	movw	r22, r28
 c34:	0e 94 65 07 	call	0xeca	; 0xeca <__divmodhi4>
 c38:	80 5d       	subi	r24, 0xD0	; 208
 c3a:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	hx_write_char('0' + down_intensity_average % 10);
 c3e:	80 91 da 06 	lds	r24, 0x06DA	; 0x8006da <down_intensity_average>
 c42:	90 91 db 06 	lds	r25, 0x06DB	; 0x8006db <down_intensity_average+0x1>
 c46:	be 01       	movw	r22, r28
 c48:	0e 94 65 07 	call	0xeca	; 0xeca <__divmodhi4>
 c4c:	80 5d       	subi	r24, 0xD0	; 208
 c4e:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	
	hx_set_coordinates(6, 4);
 c52:	64 e0       	ldi	r22, 0x04	; 4
 c54:	86 e0       	ldi	r24, 0x06	; 6
 c56:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
	hx_write_char('0' + (left_intensity_average / 10) % 10);
 c5a:	80 91 dc 06 	lds	r24, 0x06DC	; 0x8006dc <left_intensity_average>
 c5e:	90 91 dd 06 	lds	r25, 0x06DD	; 0x8006dd <left_intensity_average+0x1>
 c62:	be 01       	movw	r22, r28
 c64:	0e 94 65 07 	call	0xeca	; 0xeca <__divmodhi4>
 c68:	cb 01       	movw	r24, r22
 c6a:	be 01       	movw	r22, r28
 c6c:	0e 94 65 07 	call	0xeca	; 0xeca <__divmodhi4>
 c70:	80 5d       	subi	r24, 0xD0	; 208
 c72:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	hx_write_char('0' + left_intensity_average % 10);
 c76:	80 91 dc 06 	lds	r24, 0x06DC	; 0x8006dc <left_intensity_average>
 c7a:	90 91 dd 06 	lds	r25, 0x06DD	; 0x8006dd <left_intensity_average+0x1>
 c7e:	be 01       	movw	r22, r28
 c80:	0e 94 65 07 	call	0xeca	; 0xeca <__divmodhi4>
 c84:	80 5d       	subi	r24, 0xD0	; 208
 c86:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	
	hx_set_coordinates(78, 4);
 c8a:	64 e0       	ldi	r22, 0x04	; 4
 c8c:	8e e4       	ldi	r24, 0x4E	; 78
 c8e:	0e 94 03 03 	call	0x606	; 0x606 <hx_set_coordinates>
	hx_write_char('0' + (right_intensity_average / 10) % 10);
 c92:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <right_intensity_average>
 c96:	90 91 e7 06 	lds	r25, 0x06E7	; 0x8006e7 <right_intensity_average+0x1>
 c9a:	be 01       	movw	r22, r28
 c9c:	0e 94 65 07 	call	0xeca	; 0xeca <__divmodhi4>
 ca0:	cb 01       	movw	r24, r22
 ca2:	be 01       	movw	r22, r28
 ca4:	0e 94 65 07 	call	0xeca	; 0xeca <__divmodhi4>
 ca8:	80 5d       	subi	r24, 0xD0	; 208
 caa:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	hx_write_char('0' + right_intensity_average % 10);
 cae:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <right_intensity_average>
 cb2:	90 91 e7 06 	lds	r25, 0x06E7	; 0x8006e7 <right_intensity_average+0x1>
 cb6:	be 01       	movw	r22, r28
 cb8:	0e 94 65 07 	call	0xeca	; 0xeca <__divmodhi4>
 cbc:	80 5d       	subi	r24, 0xD0	; 208
 cbe:	0e 94 3e 03 	call	0x67c	; 0x67c <hx_write_char>
	
	up_down_movement_gradient_request = up_intensity_average - down_intensity_average;
 cc2:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <up_intensity_average>
 cc6:	90 91 eb 06 	lds	r25, 0x06EB	; 0x8006eb <up_intensity_average+0x1>
 cca:	20 91 da 06 	lds	r18, 0x06DA	; 0x8006da <down_intensity_average>
 cce:	30 91 db 06 	lds	r19, 0x06DB	; 0x8006db <down_intensity_average+0x1>
 cd2:	82 1b       	sub	r24, r18
 cd4:	93 0b       	sbc	r25, r19
 cd6:	90 93 e3 06 	sts	0x06E3, r25	; 0x8006e3 <up_down_movement_gradient_request+0x1>
 cda:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <up_down_movement_gradient_request>
	left_right_movement_gradient_request = left_intensity_average - right_intensity_average;
 cde:	20 91 dc 06 	lds	r18, 0x06DC	; 0x8006dc <left_intensity_average>
 ce2:	30 91 dd 06 	lds	r19, 0x06DD	; 0x8006dd <left_intensity_average+0x1>
 ce6:	40 91 e6 06 	lds	r20, 0x06E6	; 0x8006e6 <right_intensity_average>
 cea:	50 91 e7 06 	lds	r21, 0x06E7	; 0x8006e7 <right_intensity_average+0x1>
 cee:	24 1b       	sub	r18, r20
 cf0:	35 0b       	sbc	r19, r21
 cf2:	30 93 e5 06 	sts	0x06E5, r19	; 0x8006e5 <left_right_movement_gradient_request+0x1>
 cf6:	20 93 e4 06 	sts	0x06E4, r18	; 0x8006e4 <left_right_movement_gradient_request>
	
	if(abs(up_down_movement_gradient_request) > TRACKING_TOLERANCE)
 cfa:	9c 01       	movw	r18, r24
 cfc:	99 23       	and	r25, r25
 cfe:	24 f4       	brge	.+8      	; 0xd08 <track+0x202>
 d00:	22 27       	eor	r18, r18
 d02:	33 27       	eor	r19, r19
 d04:	28 1b       	sub	r18, r24
 d06:	39 0b       	sbc	r19, r25
 d08:	23 30       	cpi	r18, 0x03	; 3
 d0a:	31 05       	cpc	r19, r1
 d0c:	54 f0       	brlt	.+20     	; 0xd22 <track+0x21c>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER -= up_down_movement_gradient_request / 10;
 d0e:	2a b5       	in	r18, 0x2a	; 42
 d10:	3b b5       	in	r19, 0x2b	; 43
 d12:	6a e0       	ldi	r22, 0x0A	; 10
 d14:	70 e0       	ldi	r23, 0x00	; 0
 d16:	0e 94 65 07 	call	0xeca	; 0xeca <__divmodhi4>
 d1a:	26 1b       	sub	r18, r22
 d1c:	37 0b       	sbc	r19, r23
 d1e:	3b bd       	out	0x2b, r19	; 43
 d20:	2a bd       	out	0x2a, r18	; 42
	}
	
	if(abs(left_right_movement_gradient_request) > TRACKING_TOLERANCE)
 d22:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <left_right_movement_gradient_request>
 d26:	90 91 e5 06 	lds	r25, 0x06E5	; 0x8006e5 <left_right_movement_gradient_request+0x1>
 d2a:	9c 01       	movw	r18, r24
 d2c:	99 23       	and	r25, r25
 d2e:	24 f4       	brge	.+8      	; 0xd38 <track+0x232>
 d30:	22 27       	eor	r18, r18
 d32:	33 27       	eor	r19, r19
 d34:	28 1b       	sub	r18, r24
 d36:	39 0b       	sbc	r19, r25
 d38:	23 30       	cpi	r18, 0x03	; 3
 d3a:	31 05       	cpc	r19, r1
 d3c:	54 f0       	brlt	.+20     	; 0xd52 <track+0x24c>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER -= left_right_movement_gradient_request / 10;
 d3e:	28 b5       	in	r18, 0x28	; 40
 d40:	39 b5       	in	r19, 0x29	; 41
 d42:	6a e0       	ldi	r22, 0x0A	; 10
 d44:	70 e0       	ldi	r23, 0x00	; 0
 d46:	0e 94 65 07 	call	0xeca	; 0xeca <__divmodhi4>
 d4a:	26 1b       	sub	r18, r22
 d4c:	37 0b       	sbc	r19, r23
 d4e:	39 bd       	out	0x29, r19	; 41
 d50:	28 bd       	out	0x28, r18	; 40
	}
	if(SG90_INCLINE_DUTY_CYCLE_REGISTER > SG90_INCLINE_POS_180)
 d52:	4a b5       	in	r20, 0x2a	; 42
 d54:	5b b5       	in	r21, 0x2b	; 43
 d56:	26 b5       	in	r18, 0x26	; 38
 d58:	37 b5       	in	r19, 0x27	; 39
 d5a:	ad ec       	ldi	r26, 0xCD	; 205
 d5c:	bc ec       	ldi	r27, 0xCC	; 204
 d5e:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 d62:	96 95       	lsr	r25
 d64:	87 95       	ror	r24
 d66:	96 95       	lsr	r25
 d68:	87 95       	ror	r24
 d6a:	96 95       	lsr	r25
 d6c:	87 95       	ror	r24
 d6e:	0f 96       	adiw	r24, 0x0f	; 15
 d70:	84 17       	cp	r24, r20
 d72:	95 07       	cpc	r25, r21
 d74:	68 f4       	brcc	.+26     	; 0xd90 <track+0x28a>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_INCLINE_POS_180;
 d76:	26 b5       	in	r18, 0x26	; 38
 d78:	37 b5       	in	r19, 0x27	; 39
 d7a:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 d7e:	96 95       	lsr	r25
 d80:	87 95       	ror	r24
 d82:	96 95       	lsr	r25
 d84:	87 95       	ror	r24
 d86:	96 95       	lsr	r25
 d88:	87 95       	ror	r24
 d8a:	0f 96       	adiw	r24, 0x0f	; 15
 d8c:	9b bd       	out	0x2b, r25	; 43
 d8e:	8a bd       	out	0x2a, r24	; 42
	}
	if(SG90_INCLINE_DUTY_CYCLE_REGISTER < SG90_INCLINE_POS_0)
 d90:	4a b5       	in	r20, 0x2a	; 42
 d92:	5b b5       	in	r21, 0x2b	; 43
 d94:	26 b5       	in	r18, 0x26	; 38
 d96:	37 b5       	in	r19, 0x27	; 39
 d98:	ad ec       	ldi	r26, 0xCD	; 205
 d9a:	bc ec       	ldi	r27, 0xCC	; 204
 d9c:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 da0:	92 95       	swap	r25
 da2:	82 95       	swap	r24
 da4:	8f 70       	andi	r24, 0x0F	; 15
 da6:	89 27       	eor	r24, r25
 da8:	9f 70       	andi	r25, 0x0F	; 15
 daa:	89 27       	eor	r24, r25
 dac:	82 54       	subi	r24, 0x42	; 66
 dae:	91 09       	sbc	r25, r1
 db0:	48 17       	cp	r20, r24
 db2:	59 07       	cpc	r21, r25
 db4:	70 f4       	brcc	.+28     	; 0xdd2 <track+0x2cc>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_INCLINE_POS_0;
 db6:	26 b5       	in	r18, 0x26	; 38
 db8:	37 b5       	in	r19, 0x27	; 39
 dba:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 dbe:	92 95       	swap	r25
 dc0:	82 95       	swap	r24
 dc2:	8f 70       	andi	r24, 0x0F	; 15
 dc4:	89 27       	eor	r24, r25
 dc6:	9f 70       	andi	r25, 0x0F	; 15
 dc8:	89 27       	eor	r24, r25
 dca:	82 54       	subi	r24, 0x42	; 66
 dcc:	91 09       	sbc	r25, r1
 dce:	9b bd       	out	0x2b, r25	; 43
 dd0:	8a bd       	out	0x2a, r24	; 42
	}
	if(SG90_ROTATE_DUTY_CYCLE_REGISTER > SG90_ROTATE_POS_180)
 dd2:	48 b5       	in	r20, 0x28	; 40
 dd4:	59 b5       	in	r21, 0x29	; 41
 dd6:	26 b5       	in	r18, 0x26	; 38
 dd8:	37 b5       	in	r19, 0x27	; 39
 dda:	ad ec       	ldi	r26, 0xCD	; 205
 ddc:	bc ec       	ldi	r27, 0xCC	; 204
 dde:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 de2:	96 95       	lsr	r25
 de4:	87 95       	ror	r24
 de6:	96 95       	lsr	r25
 de8:	87 95       	ror	r24
 dea:	96 95       	lsr	r25
 dec:	87 95       	ror	r24
 dee:	05 96       	adiw	r24, 0x05	; 5
 df0:	84 17       	cp	r24, r20
 df2:	95 07       	cpc	r25, r21
 df4:	68 f4       	brcc	.+26     	; 0xe10 <track+0x30a>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_POS_180;
 df6:	26 b5       	in	r18, 0x26	; 38
 df8:	37 b5       	in	r19, 0x27	; 39
 dfa:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 dfe:	96 95       	lsr	r25
 e00:	87 95       	ror	r24
 e02:	96 95       	lsr	r25
 e04:	87 95       	ror	r24
 e06:	96 95       	lsr	r25
 e08:	87 95       	ror	r24
 e0a:	05 96       	adiw	r24, 0x05	; 5
 e0c:	99 bd       	out	0x29, r25	; 41
 e0e:	88 bd       	out	0x28, r24	; 40
	}
	if(SG90_ROTATE_DUTY_CYCLE_REGISTER < SG90_ROTATE_POS_0)
 e10:	48 b5       	in	r20, 0x28	; 40
 e12:	59 b5       	in	r21, 0x29	; 41
 e14:	26 b5       	in	r18, 0x26	; 38
 e16:	37 b5       	in	r19, 0x27	; 39
 e18:	ad ec       	ldi	r26, 0xCD	; 205
 e1a:	bc ec       	ldi	r27, 0xCC	; 204
 e1c:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 e20:	92 95       	swap	r25
 e22:	82 95       	swap	r24
 e24:	8f 70       	andi	r24, 0x0F	; 15
 e26:	89 27       	eor	r24, r25
 e28:	9f 70       	andi	r25, 0x0F	; 15
 e2a:	89 27       	eor	r24, r25
 e2c:	82 54       	subi	r24, 0x42	; 66
 e2e:	91 09       	sbc	r25, r1
 e30:	48 17       	cp	r20, r24
 e32:	59 07       	cpc	r21, r25
 e34:	70 f4       	brcc	.+28     	; 0xe52 <track+0x34c>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_POS_0;
 e36:	26 b5       	in	r18, 0x26	; 38
 e38:	37 b5       	in	r19, 0x27	; 39
 e3a:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>
 e3e:	92 95       	swap	r25
 e40:	82 95       	swap	r24
 e42:	8f 70       	andi	r24, 0x0F	; 15
 e44:	89 27       	eor	r24, r25
 e46:	9f 70       	andi	r25, 0x0F	; 15
 e48:	89 27       	eor	r24, r25
 e4a:	82 54       	subi	r24, 0x42	; 66
 e4c:	91 09       	sbc	r25, r1
 e4e:	99 bd       	out	0x29, r25	; 41
 e50:	88 bd       	out	0x28, r24	; 40
 e52:	2f e7       	ldi	r18, 0x7F	; 127
 e54:	88 e3       	ldi	r24, 0x38	; 56
 e56:	91 e0       	ldi	r25, 0x01	; 1
 e58:	21 50       	subi	r18, 0x01	; 1
 e5a:	80 40       	sbci	r24, 0x00	; 0
 e5c:	90 40       	sbci	r25, 0x00	; 0
 e5e:	e1 f7       	brne	.-8      	; 0xe58 <track+0x352>
 e60:	00 c0       	rjmp	.+0      	; 0xe62 <track+0x35c>
 e62:	00 00       	nop
	}
	_delay_ms(50);
 e64:	df 91       	pop	r29
 e66:	cf 91       	pop	r28
 e68:	08 95       	ret

00000e6a <init_next_state_button>:
}


void init_next_state_button(void)
{
	BUTTON_1_DRR &= ~(1 << BUTTON_1_PIN); // PD2 is input
 e6a:	8a 98       	cbi	0x11, 2	; 17

	BUTTON_1_PORT |= (1 << BUTTON_1_PIN);    // turn on the pull-up resistor
 e6c:	92 9a       	sbi	0x12, 2	; 18
	// PD2 is now an input with pull-up enabled



	MCUCR &= ~(1 << ISC00 | 1 << ISC01);    // low level of INT0 generates an interrupt request: when BUTTON_1 is pressed
 e6e:	85 b7       	in	r24, 0x35	; 53
 e70:	8c 7f       	andi	r24, 0xFC	; 252
 e72:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);     // turns on INT0
 e74:	8b b7       	in	r24, 0x3b	; 59
 e76:	80 64       	ori	r24, 0x40	; 64
 e78:	8b bf       	out	0x3b, r24	; 59
 e7a:	08 95       	ret

00000e7c <init_user_interface>:



void init_user_interface(void)
{
	init_next_state_button();
 e7c:	0e 94 35 07 	call	0xe6a	; 0xe6a <init_next_state_button>
 e80:	08 95       	ret

00000e82 <__vector_1>:
	MCUCR &= ~(1 << ISC00 | 1 << ISC01);    // low level of INT0 generates an interrupt request: when BUTTON_1 is pressed
	GICR |= (1 << INT0);     // turns on INT0
}

ISR (INT0_vect)
{
 e82:	1f 92       	push	r1
 e84:	0f 92       	push	r0
 e86:	0f b6       	in	r0, 0x3f	; 63
 e88:	0f 92       	push	r0
 e8a:	11 24       	eor	r1, r1
 e8c:	8f 93       	push	r24
	cli(); // temporarily disable interrupts
 e8e:	f8 94       	cli
	switch(STATE)
 e90:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <STATE>
 e94:	82 30       	cpi	r24, 0x02	; 2
 e96:	41 f0       	breq	.+16     	; 0xea8 <__vector_1+0x26>
 e98:	83 30       	cpi	r24, 0x03	; 3
 e9a:	51 f0       	breq	.+20     	; 0xeb0 <__vector_1+0x2e>
 e9c:	81 30       	cpi	r24, 0x01	; 1
 e9e:	61 f4       	brne	.+24     	; 0xeb8 <__vector_1+0x36>
	{
		case STATE_IDLE:
		{
			STATE = STATE_MANUAL;
 ea0:	82 e0       	ldi	r24, 0x02	; 2
 ea2:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <STATE>
			break;
 ea6:	0b c0       	rjmp	.+22     	; 0xebe <__vector_1+0x3c>
		}
		case STATE_MANUAL:
		{
			STATE = STATE_TRACKING;
 ea8:	83 e0       	ldi	r24, 0x03	; 3
 eaa:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <STATE>
			break;
 eae:	07 c0       	rjmp	.+14     	; 0xebe <__vector_1+0x3c>
		}
		case STATE_TRACKING:
		{
			STATE = STATE_IDLE;
 eb0:	81 e0       	ldi	r24, 0x01	; 1
 eb2:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <STATE>
			break;
 eb6:	03 c0       	rjmp	.+6      	; 0xebe <__vector_1+0x3c>
		}
		default:
		{
			STATE = STATE_IDLE;
 eb8:	81 e0       	ldi	r24, 0x01	; 1
 eba:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <STATE>
			break;
		}
	}
 ebe:	8f 91       	pop	r24
 ec0:	0f 90       	pop	r0
 ec2:	0f be       	out	0x3f, r0	; 63
 ec4:	0f 90       	pop	r0
 ec6:	1f 90       	pop	r1
 ec8:	18 95       	reti

00000eca <__divmodhi4>:
 eca:	97 fb       	bst	r25, 7
 ecc:	07 2e       	mov	r0, r23
 ece:	16 f4       	brtc	.+4      	; 0xed4 <__divmodhi4+0xa>
 ed0:	00 94       	com	r0
 ed2:	07 d0       	rcall	.+14     	; 0xee2 <__divmodhi4_neg1>
 ed4:	77 fd       	sbrc	r23, 7
 ed6:	09 d0       	rcall	.+18     	; 0xeea <__divmodhi4_neg2>
 ed8:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__udivmodhi4>
 edc:	07 fc       	sbrc	r0, 7
 ede:	05 d0       	rcall	.+10     	; 0xeea <__divmodhi4_neg2>
 ee0:	3e f4       	brtc	.+14     	; 0xef0 <__divmodhi4_exit>

00000ee2 <__divmodhi4_neg1>:
 ee2:	90 95       	com	r25
 ee4:	81 95       	neg	r24
 ee6:	9f 4f       	sbci	r25, 0xFF	; 255
 ee8:	08 95       	ret

00000eea <__divmodhi4_neg2>:
 eea:	70 95       	com	r23
 eec:	61 95       	neg	r22
 eee:	7f 4f       	sbci	r23, 0xFF	; 255

00000ef0 <__divmodhi4_exit>:
 ef0:	08 95       	ret

00000ef2 <__divmodsi4>:
 ef2:	05 2e       	mov	r0, r21
 ef4:	97 fb       	bst	r25, 7
 ef6:	1e f4       	brtc	.+6      	; 0xefe <__divmodsi4+0xc>
 ef8:	00 94       	com	r0
 efa:	0e 94 90 07 	call	0xf20	; 0xf20 <__negsi2>
 efe:	57 fd       	sbrc	r21, 7
 f00:	07 d0       	rcall	.+14     	; 0xf10 <__divmodsi4_neg2>
 f02:	0e 94 c2 07 	call	0xf84	; 0xf84 <__udivmodsi4>
 f06:	07 fc       	sbrc	r0, 7
 f08:	03 d0       	rcall	.+6      	; 0xf10 <__divmodsi4_neg2>
 f0a:	4e f4       	brtc	.+18     	; 0xf1e <__divmodsi4_exit>
 f0c:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__negsi2>

00000f10 <__divmodsi4_neg2>:
 f10:	50 95       	com	r21
 f12:	40 95       	com	r20
 f14:	30 95       	com	r19
 f16:	21 95       	neg	r18
 f18:	3f 4f       	sbci	r19, 0xFF	; 255
 f1a:	4f 4f       	sbci	r20, 0xFF	; 255
 f1c:	5f 4f       	sbci	r21, 0xFF	; 255

00000f1e <__divmodsi4_exit>:
 f1e:	08 95       	ret

00000f20 <__negsi2>:
 f20:	90 95       	com	r25
 f22:	80 95       	com	r24
 f24:	70 95       	com	r23
 f26:	61 95       	neg	r22
 f28:	7f 4f       	sbci	r23, 0xFF	; 255
 f2a:	8f 4f       	sbci	r24, 0xFF	; 255
 f2c:	9f 4f       	sbci	r25, 0xFF	; 255
 f2e:	08 95       	ret

00000f30 <__umulhisi3>:
 f30:	a2 9f       	mul	r26, r18
 f32:	b0 01       	movw	r22, r0
 f34:	b3 9f       	mul	r27, r19
 f36:	c0 01       	movw	r24, r0
 f38:	a3 9f       	mul	r26, r19
 f3a:	70 0d       	add	r23, r0
 f3c:	81 1d       	adc	r24, r1
 f3e:	11 24       	eor	r1, r1
 f40:	91 1d       	adc	r25, r1
 f42:	b2 9f       	mul	r27, r18
 f44:	70 0d       	add	r23, r0
 f46:	81 1d       	adc	r24, r1
 f48:	11 24       	eor	r1, r1
 f4a:	91 1d       	adc	r25, r1
 f4c:	08 95       	ret

00000f4e <__usmulhisi3>:
 f4e:	0e 94 98 07 	call	0xf30	; 0xf30 <__umulhisi3>

00000f52 <__usmulhisi3_tail>:
 f52:	b7 ff       	sbrs	r27, 7
 f54:	08 95       	ret
 f56:	82 1b       	sub	r24, r18
 f58:	93 0b       	sbc	r25, r19
 f5a:	08 95       	ret

00000f5c <__udivmodhi4>:
 f5c:	aa 1b       	sub	r26, r26
 f5e:	bb 1b       	sub	r27, r27
 f60:	51 e1       	ldi	r21, 0x11	; 17
 f62:	07 c0       	rjmp	.+14     	; 0xf72 <__udivmodhi4_ep>

00000f64 <__udivmodhi4_loop>:
 f64:	aa 1f       	adc	r26, r26
 f66:	bb 1f       	adc	r27, r27
 f68:	a6 17       	cp	r26, r22
 f6a:	b7 07       	cpc	r27, r23
 f6c:	10 f0       	brcs	.+4      	; 0xf72 <__udivmodhi4_ep>
 f6e:	a6 1b       	sub	r26, r22
 f70:	b7 0b       	sbc	r27, r23

00000f72 <__udivmodhi4_ep>:
 f72:	88 1f       	adc	r24, r24
 f74:	99 1f       	adc	r25, r25
 f76:	5a 95       	dec	r21
 f78:	a9 f7       	brne	.-22     	; 0xf64 <__udivmodhi4_loop>
 f7a:	80 95       	com	r24
 f7c:	90 95       	com	r25
 f7e:	bc 01       	movw	r22, r24
 f80:	cd 01       	movw	r24, r26
 f82:	08 95       	ret

00000f84 <__udivmodsi4>:
 f84:	a1 e2       	ldi	r26, 0x21	; 33
 f86:	1a 2e       	mov	r1, r26
 f88:	aa 1b       	sub	r26, r26
 f8a:	bb 1b       	sub	r27, r27
 f8c:	fd 01       	movw	r30, r26
 f8e:	0d c0       	rjmp	.+26     	; 0xfaa <__udivmodsi4_ep>

00000f90 <__udivmodsi4_loop>:
 f90:	aa 1f       	adc	r26, r26
 f92:	bb 1f       	adc	r27, r27
 f94:	ee 1f       	adc	r30, r30
 f96:	ff 1f       	adc	r31, r31
 f98:	a2 17       	cp	r26, r18
 f9a:	b3 07       	cpc	r27, r19
 f9c:	e4 07       	cpc	r30, r20
 f9e:	f5 07       	cpc	r31, r21
 fa0:	20 f0       	brcs	.+8      	; 0xfaa <__udivmodsi4_ep>
 fa2:	a2 1b       	sub	r26, r18
 fa4:	b3 0b       	sbc	r27, r19
 fa6:	e4 0b       	sbc	r30, r20
 fa8:	f5 0b       	sbc	r31, r21

00000faa <__udivmodsi4_ep>:
 faa:	66 1f       	adc	r22, r22
 fac:	77 1f       	adc	r23, r23
 fae:	88 1f       	adc	r24, r24
 fb0:	99 1f       	adc	r25, r25
 fb2:	1a 94       	dec	r1
 fb4:	69 f7       	brne	.-38     	; 0xf90 <__udivmodsi4_loop>
 fb6:	60 95       	com	r22
 fb8:	70 95       	com	r23
 fba:	80 95       	com	r24
 fbc:	90 95       	com	r25
 fbe:	9b 01       	movw	r18, r22
 fc0:	ac 01       	movw	r20, r24
 fc2:	bd 01       	movw	r22, r26
 fc4:	cf 01       	movw	r24, r30
 fc6:	08 95       	ret

00000fc8 <_exit>:
 fc8:	f8 94       	cli

00000fca <__stop_program>:
 fca:	ff cf       	rjmp	.-2      	; 0xfca <__stop_program>
