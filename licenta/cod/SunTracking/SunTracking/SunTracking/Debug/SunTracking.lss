
SunTracking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000664  00800100  00000b02  00000b96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800764  00800764  000011fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000122c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b48  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd4  00000000  00000000  00003f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dfa  00000000  00000000  00004be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  000059e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000740  00000000  00000000  00005c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000900  00000000  00000000  00006394  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00006c94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	17 e0       	ldi	r17, 0x07	; 7
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 36       	cpi	r26, 0x64	; 100
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a4 e6       	ldi	r26, 0x64	; 100
  8e:	b7 e0       	ldi	r27, 0x07	; 7
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 37       	cpi	r26, 0x79	; 121
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 be 02 	call	0x57c	; 0x57c <main>
  9e:	0c 94 7f 05 	jmp	0xafe	; 0xafe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
  a6:	17 b8       	out	0x07, r1	; 7
  a8:	80 e4       	ldi	r24, 0x40	; 64
  aa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  ae:	87 e8       	ldi	r24, 0x87	; 135
  b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  b4:	08 95       	ret

000000b6 <ADC_get_value>:
  b6:	ec e7       	ldi	r30, 0x7C	; 124
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	90 81       	ld	r25, Z
  bc:	98 7f       	andi	r25, 0xF8	; 248
  be:	87 70       	andi	r24, 0x07	; 7
  c0:	89 2b       	or	r24, r25
  c2:	80 83       	st	Z, r24
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	80 83       	st	Z, r24
  ce:	80 81       	ld	r24, Z
  d0:	86 fd       	sbrc	r24, 6
  d2:	fd cf       	rjmp	.-6      	; 0xce <ADC_get_value+0x18>
  d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  d8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  dc:	08 95       	ret

000000de <display_title>:
	hx_set_coordinates(0, 3);
	hx_write_string("       ||");
	hx_set_coordinates(0, 4);
	hx_write_string("================");
	hx_set_coordinates(0, 5);
	hx_write_string("       ||");
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 de 01 	call	0x3bc	; 0x3bc <hx_set_coordinates>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	0e 94 3d 02 	call	0x47a	; 0x47a <hx_write_string>
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 de 01 	call	0x3bc	; 0x3bc <hx_set_coordinates>
  f6:	81 e1       	ldi	r24, 0x11	; 17
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	0e 94 3d 02 	call	0x47a	; 0x47a <hx_write_string>
  fe:	08 95       	ret

00000100 <display_light_sensor_data>:
}

void display_light_sensor_data(uint8_t sensor, int data)
{
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	eb 01       	movw	r28, r22
	//hx_set_coordinates(60, 3 + sensor);
	hx_set_coordinates(24 + 36 * (sensor & 1), 3 + 2 * (sensor >> 1));
 106:	68 2f       	mov	r22, r24
 108:	6e 7f       	andi	r22, 0xFE	; 254
 10a:	6d 5f       	subi	r22, 0xFD	; 253
 10c:	81 70       	andi	r24, 0x01	; 1
 10e:	94 e2       	ldi	r25, 0x24	; 36
 110:	89 9f       	mul	r24, r25
 112:	80 2d       	mov	r24, r0
 114:	11 24       	eor	r1, r1
 116:	88 5e       	subi	r24, 0xE8	; 232
 118:	0e 94 de 01 	call	0x3bc	; 0x3bc <hx_set_coordinates>
	
	// hx_write_char('0' + ((data / 100) % 10));
	hx_write_char('0' + ((data / 10) % 10));
 11c:	2a e0       	ldi	r18, 0x0A	; 10
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	ce 01       	movw	r24, r28
 122:	b9 01       	movw	r22, r18
 124:	0e 94 00 05 	call	0xa00	; 0xa00 <__divmodhi4>
 128:	c8 2f       	mov	r28, r24
 12a:	cb 01       	movw	r24, r22
 12c:	b9 01       	movw	r22, r18
 12e:	0e 94 00 05 	call	0xa00	; 0xa00 <__divmodhi4>
 132:	80 5d       	subi	r24, 0xD0	; 208
 134:	0e 94 19 02 	call	0x432	; 0x432 <hx_write_char>
	hx_write_char('0' + (data % 10));
 138:	80 e3       	ldi	r24, 0x30	; 48
 13a:	8c 0f       	add	r24, r28
 13c:	0e 94 19 02 	call	0x432	; 0x432 <hx_write_char>
	
	hx_set_coordinates(18, 7);
 140:	67 e0       	ldi	r22, 0x07	; 7
 142:	82 e1       	ldi	r24, 0x12	; 18
 144:	0e 94 de 01 	call	0x3bc	; 0x3bc <hx_set_coordinates>
	hx_write_char('0' + OCR1A / 100);
 148:	c8 e8       	ldi	r28, 0x88	; 136
 14a:	d0 e0       	ldi	r29, 0x00	; 0
 14c:	28 81       	ld	r18, Y
 14e:	39 81       	ldd	r19, Y+1	; 0x01
 150:	36 95       	lsr	r19
 152:	27 95       	ror	r18
 154:	36 95       	lsr	r19
 156:	27 95       	ror	r18
 158:	ab e7       	ldi	r26, 0x7B	; 123
 15a:	b4 e1       	ldi	r27, 0x14	; 20
 15c:	0e 94 33 05 	call	0xa66	; 0xa66 <__umulhisi3>
 160:	96 95       	lsr	r25
 162:	87 95       	ror	r24
 164:	80 5d       	subi	r24, 0xD0	; 208
 166:	0e 94 19 02 	call	0x432	; 0x432 <hx_write_char>
	hx_write_char('0' + (OCR1A / 10) % 10);
 16a:	28 81       	ld	r18, Y
 16c:	39 81       	ldd	r19, Y+1	; 0x01
 16e:	ad ec       	ldi	r26, 0xCD	; 205
 170:	bc ec       	ldi	r27, 0xCC	; 204
 172:	0e 94 33 05 	call	0xa66	; 0xa66 <__umulhisi3>
 176:	ac 01       	movw	r20, r24
 178:	56 95       	lsr	r21
 17a:	47 95       	ror	r20
 17c:	56 95       	lsr	r21
 17e:	47 95       	ror	r20
 180:	56 95       	lsr	r21
 182:	47 95       	ror	r20
 184:	9a 01       	movw	r18, r20
 186:	0e 94 33 05 	call	0xa66	; 0xa66 <__umulhisi3>
 18a:	96 95       	lsr	r25
 18c:	87 95       	ror	r24
 18e:	96 95       	lsr	r25
 190:	87 95       	ror	r24
 192:	96 95       	lsr	r25
 194:	87 95       	ror	r24
 196:	9c 01       	movw	r18, r24
 198:	22 0f       	add	r18, r18
 19a:	33 1f       	adc	r19, r19
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	82 0f       	add	r24, r18
 1aa:	93 1f       	adc	r25, r19
 1ac:	9a 01       	movw	r18, r20
 1ae:	28 1b       	sub	r18, r24
 1b0:	39 0b       	sbc	r19, r25
 1b2:	c9 01       	movw	r24, r18
 1b4:	80 5d       	subi	r24, 0xD0	; 208
 1b6:	0e 94 19 02 	call	0x432	; 0x432 <hx_write_char>
	hx_write_char('0' + OCR1A % 10);
 1ba:	48 81       	ld	r20, Y
 1bc:	59 81       	ldd	r21, Y+1	; 0x01
 1be:	9a 01       	movw	r18, r20
 1c0:	ad ec       	ldi	r26, 0xCD	; 205
 1c2:	bc ec       	ldi	r27, 0xCC	; 204
 1c4:	0e 94 33 05 	call	0xa66	; 0xa66 <__umulhisi3>
 1c8:	96 95       	lsr	r25
 1ca:	87 95       	ror	r24
 1cc:	96 95       	lsr	r25
 1ce:	87 95       	ror	r24
 1d0:	96 95       	lsr	r25
 1d2:	87 95       	ror	r24
 1d4:	9c 01       	movw	r18, r24
 1d6:	22 0f       	add	r18, r18
 1d8:	33 1f       	adc	r19, r19
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	82 0f       	add	r24, r18
 1e8:	93 1f       	adc	r25, r19
 1ea:	9a 01       	movw	r18, r20
 1ec:	28 1b       	sub	r18, r24
 1ee:	39 0b       	sbc	r19, r25
 1f0:	c9 01       	movw	r24, r18
 1f2:	80 5d       	subi	r24, 0xD0	; 208
 1f4:	0e 94 19 02 	call	0x432	; 0x432 <hx_write_char>
	
	hx_set_coordinates(66, 7);
 1f8:	67 e0       	ldi	r22, 0x07	; 7
 1fa:	82 e4       	ldi	r24, 0x42	; 66
 1fc:	0e 94 de 01 	call	0x3bc	; 0x3bc <hx_set_coordinates>
	hx_write_char('0' + OCR1B / 100);
 200:	ca e8       	ldi	r28, 0x8A	; 138
 202:	d0 e0       	ldi	r29, 0x00	; 0
 204:	28 81       	ld	r18, Y
 206:	39 81       	ldd	r19, Y+1	; 0x01
 208:	36 95       	lsr	r19
 20a:	27 95       	ror	r18
 20c:	36 95       	lsr	r19
 20e:	27 95       	ror	r18
 210:	ab e7       	ldi	r26, 0x7B	; 123
 212:	b4 e1       	ldi	r27, 0x14	; 20
 214:	0e 94 33 05 	call	0xa66	; 0xa66 <__umulhisi3>
 218:	96 95       	lsr	r25
 21a:	87 95       	ror	r24
 21c:	80 5d       	subi	r24, 0xD0	; 208
 21e:	0e 94 19 02 	call	0x432	; 0x432 <hx_write_char>
	hx_write_char('0' + (OCR1B / 10) % 10);
 222:	28 81       	ld	r18, Y
 224:	39 81       	ldd	r19, Y+1	; 0x01
 226:	ad ec       	ldi	r26, 0xCD	; 205
 228:	bc ec       	ldi	r27, 0xCC	; 204
 22a:	0e 94 33 05 	call	0xa66	; 0xa66 <__umulhisi3>
 22e:	ac 01       	movw	r20, r24
 230:	56 95       	lsr	r21
 232:	47 95       	ror	r20
 234:	56 95       	lsr	r21
 236:	47 95       	ror	r20
 238:	56 95       	lsr	r21
 23a:	47 95       	ror	r20
 23c:	9a 01       	movw	r18, r20
 23e:	0e 94 33 05 	call	0xa66	; 0xa66 <__umulhisi3>
 242:	96 95       	lsr	r25
 244:	87 95       	ror	r24
 246:	96 95       	lsr	r25
 248:	87 95       	ror	r24
 24a:	96 95       	lsr	r25
 24c:	87 95       	ror	r24
 24e:	9c 01       	movw	r18, r24
 250:	22 0f       	add	r18, r18
 252:	33 1f       	adc	r19, r19
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	82 0f       	add	r24, r18
 262:	93 1f       	adc	r25, r19
 264:	9a 01       	movw	r18, r20
 266:	28 1b       	sub	r18, r24
 268:	39 0b       	sbc	r19, r25
 26a:	c9 01       	movw	r24, r18
 26c:	80 5d       	subi	r24, 0xD0	; 208
 26e:	0e 94 19 02 	call	0x432	; 0x432 <hx_write_char>
	hx_write_char('0' + OCR1B % 10);
 272:	48 81       	ld	r20, Y
 274:	59 81       	ldd	r21, Y+1	; 0x01
 276:	9a 01       	movw	r18, r20
 278:	ad ec       	ldi	r26, 0xCD	; 205
 27a:	bc ec       	ldi	r27, 0xCC	; 204
 27c:	0e 94 33 05 	call	0xa66	; 0xa66 <__umulhisi3>
 280:	96 95       	lsr	r25
 282:	87 95       	ror	r24
 284:	96 95       	lsr	r25
 286:	87 95       	ror	r24
 288:	96 95       	lsr	r25
 28a:	87 95       	ror	r24
 28c:	9c 01       	movw	r18, r24
 28e:	22 0f       	add	r18, r18
 290:	33 1f       	adc	r19, r19
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	82 0f       	add	r24, r18
 2a0:	93 1f       	adc	r25, r19
 2a2:	9a 01       	movw	r18, r20
 2a4:	28 1b       	sub	r18, r24
 2a6:	39 0b       	sbc	r19, r25
 2a8:	c9 01       	movw	r24, r18
 2aa:	80 5d       	subi	r24, 0xD0	; 208
 2ac:	0e 94 19 02 	call	0x432	; 0x432 <hx_write_char>
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <display_idle_state_message>:

void display_idle_state_message(void)
{
	hx_set_coordinates(0, 3);
 2b6:	63 e0       	ldi	r22, 0x03	; 3
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 de 01 	call	0x3bc	; 0x3bc <hx_set_coordinates>
	hx_write_string("- system is in ");
 2be:	8a e3       	ldi	r24, 0x3A	; 58
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	0e 94 3d 02 	call	0x47a	; 0x47a <hx_write_string>
	hx_set_coordinates(0, 4);
 2c6:	64 e0       	ldi	r22, 0x04	; 4
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 de 01 	call	0x3bc	; 0x3bc <hx_set_coordinates>
	hx_write_string("IDLE mode");
 2ce:	8a e4       	ldi	r24, 0x4A	; 74
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 3d 02 	call	0x47a	; 0x47a <hx_write_string>
	hx_set_coordinates(0, 6);
 2d6:	66 e0       	ldi	r22, 0x06	; 6
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 de 01 	call	0x3bc	; 0x3bc <hx_set_coordinates>
	hx_write_string("going to sleep");
 2de:	84 e5       	ldi	r24, 0x54	; 84
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	0e 94 3d 02 	call	0x47a	; 0x47a <hx_write_string>
 2e6:	08 95       	ret

000002e8 <hx_send_data>:
}

void hx_send_data(unsigned char _data)
{
	// activate hx1230
	CLEAR_HX_CE;
 2e8:	5d 98       	cbi	0x0b, 5	; 11
	
	// configure communication for data transfer
	SET_HX_DIN;
 2ea:	59 9a       	sbi	0x0b, 1	; 11
	
	// toggle clock
	SET_HX_CLK;
 2ec:	58 9a       	sbi	0x0b, 0	; 11
	CLEAR_HX_CLK;
 2ee:	58 98       	cbi	0x0b, 0	; 11
	
	// send the actual data, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
 2f0:	27 e0       	ldi	r18, 0x07	; 7
 2f2:	30 e0       	ldi	r19, 0x00	; 0
	{
		// calculate bit to be send
		if(((_data >> bit_position) & 1) == 1)
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	ac 01       	movw	r20, r24
 2f8:	02 2e       	mov	r0, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <hx_send_data+0x18>
 2fc:	55 95       	asr	r21
 2fe:	47 95       	ror	r20
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <hx_send_data+0x14>
 304:	40 ff       	sbrs	r20, 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <hx_send_data+0x24>
		{
			SET_HX_DIN;
 308:	59 9a       	sbi	0x0b, 1	; 11
 30a:	01 c0       	rjmp	.+2      	; 0x30e <hx_send_data+0x26>
		}
		else
		{
			CLEAR_HX_DIN;
 30c:	59 98       	cbi	0x0b, 1	; 11
		}
		
		// toggle clock
		SET_HX_CLK;
 30e:	58 9a       	sbi	0x0b, 0	; 11
		CLEAR_HX_CLK;
 310:	58 98       	cbi	0x0b, 0	; 11
	// toggle clock
	SET_HX_CLK;
	CLEAR_HX_CLK;
	
	// send the actual data, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
 312:	21 50       	subi	r18, 0x01	; 1
 314:	31 09       	sbc	r19, r1
 316:	78 f7       	brcc	.-34     	; 0x2f6 <hx_send_data+0xe>
		SET_HX_CLK;
		CLEAR_HX_CLK;
	}
	
	// deactivate hx1230
	SET_HX_CE;
 318:	5d 9a       	sbi	0x0b, 5	; 11
 31a:	08 95       	ret

0000031c <hx_send_command>:
}

void hx_send_command(unsigned char _command)
{
	// activate hx1230
	CLEAR_HX_CE;
 31c:	5d 98       	cbi	0x0b, 5	; 11
	
	// configure communication for command transfer
	CLEAR_HX_DIN;
 31e:	59 98       	cbi	0x0b, 1	; 11
	
	// toggle clock
	SET_HX_CLK;
 320:	58 9a       	sbi	0x0b, 0	; 11
	CLEAR_HX_CLK;
 322:	58 98       	cbi	0x0b, 0	; 11
	
	// send the actual command, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
 324:	27 e0       	ldi	r18, 0x07	; 7
 326:	30 e0       	ldi	r19, 0x00	; 0
	{
		// calculate bit to be send
		if(((_command >> bit_position) & 1) == 1)
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	ac 01       	movw	r20, r24
 32c:	02 2e       	mov	r0, r18
 32e:	02 c0       	rjmp	.+4      	; 0x334 <hx_send_command+0x18>
 330:	55 95       	asr	r21
 332:	47 95       	ror	r20
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <hx_send_command+0x14>
 338:	40 ff       	sbrs	r20, 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <hx_send_command+0x24>
		{
			SET_HX_DIN;
 33c:	59 9a       	sbi	0x0b, 1	; 11
 33e:	01 c0       	rjmp	.+2      	; 0x342 <hx_send_command+0x26>
		}
		else
		{
			CLEAR_HX_DIN;
 340:	59 98       	cbi	0x0b, 1	; 11
		}
		
		// toggle clock
		SET_HX_CLK;
 342:	58 9a       	sbi	0x0b, 0	; 11
		CLEAR_HX_CLK;
 344:	58 98       	cbi	0x0b, 0	; 11
	// toggle clock
	SET_HX_CLK;
	CLEAR_HX_CLK;
	
	// send the actual command, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
 346:	21 50       	subi	r18, 0x01	; 1
 348:	31 09       	sbc	r19, r1
 34a:	78 f7       	brcc	.-34     	; 0x32a <hx_send_command+0xe>
		SET_HX_CLK;
		CLEAR_HX_CLK;
	}
	
	// deactivate hx1230
	SET_HX_CE;
 34c:	5d 9a       	sbi	0x0b, 5	; 11
 34e:	08 95       	ret

00000350 <init_hx1230_control>:


void init_hx1230_control(void)
{
	// set required pins as output
	HX1230_DDR |= ((1 << HX_RST) | (1 << HX_CE) | (1 << HX_DIN) | (1 << HX_CLK));
 350:	8a b1       	in	r24, 0x0a	; 10
 352:	83 66       	ori	r24, 0x63	; 99
 354:	8a b9       	out	0x0a, r24	; 10
	
	// set idle state
	CLEAR_HX_CLK;
 356:	58 98       	cbi	0x0b, 0	; 11
	CLEAR_HX_RST;
 358:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35a:	83 ed       	ldi	r24, 0xD3	; 211
 35c:	90 e3       	ldi	r25, 0x30	; 48
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <init_hx1230_control+0xe>
 362:	00 c0       	rjmp	.+0      	; 0x364 <init_hx1230_control+0x14>
 364:	00 00       	nop
	_delay_ms(50);
	SET_HX_RST;
 366:	5e 9a       	sbi	0x0b, 6	; 11
	CLEAR_HX_CE;
 368:	5d 98       	cbi	0x0b, 5	; 11
 36a:	89 ef       	ldi	r24, 0xF9	; 249
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <init_hx1230_control+0x1e>
 372:	00 c0       	rjmp	.+0      	; 0x374 <init_hx1230_control+0x24>
 374:	00 00       	nop
	_delay_ms(1);
	SET_HX_CE;
 376:	5d 9a       	sbi	0x0b, 5	; 11
 378:	89 ef       	ldi	r24, 0xF9	; 249
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <init_hx1230_control+0x2c>
 380:	00 c0       	rjmp	.+0      	; 0x382 <init_hx1230_control+0x32>
 382:	00 00       	nop
	_delay_ms(1);
	
	// commands needed to initialize hx1230 display
	// found within a chinese data sheet
	
	hx_send_command(0x2f);
 384:	8f e2       	ldi	r24, 0x2F	; 47
 386:	0e 94 8e 01 	call	0x31c	; 0x31c <hx_send_command>
	hx_send_command(0x90);
 38a:	80 e9       	ldi	r24, 0x90	; 144
 38c:	0e 94 8e 01 	call	0x31c	; 0x31c <hx_send_command>
	hx_send_command(0xa6);
 390:	86 ea       	ldi	r24, 0xA6	; 166
 392:	0e 94 8e 01 	call	0x31c	; 0x31c <hx_send_command>
	hx_send_command(0xa4);
 396:	84 ea       	ldi	r24, 0xA4	; 164
 398:	0e 94 8e 01 	call	0x31c	; 0x31c <hx_send_command>
	hx_send_command(0xaf);
 39c:	8f ea       	ldi	r24, 0xAF	; 175
 39e:	0e 94 8e 01 	call	0x31c	; 0x31c <hx_send_command>
	
	hx_send_command(0x40);
 3a2:	80 e4       	ldi	r24, 0x40	; 64
 3a4:	0e 94 8e 01 	call	0x31c	; 0x31c <hx_send_command>
	hx_send_command(0xb0);
 3a8:	80 eb       	ldi	r24, 0xB0	; 176
 3aa:	0e 94 8e 01 	call	0x31c	; 0x31c <hx_send_command>
	hx_send_command(0x10);
 3ae:	80 e1       	ldi	r24, 0x10	; 16
 3b0:	0e 94 8e 01 	call	0x31c	; 0x31c <hx_send_command>
	hx_send_command(0x00);
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	0e 94 8e 01 	call	0x31c	; 0x31c <hx_send_command>
 3ba:	08 95       	ret

000003bc <hx_set_coordinates>:
	// deactivate hx1230
	SET_HX_CE;
}

void hx_set_coordinates(unsigned char _x, unsigned char _y)
{
 3bc:	cf 93       	push	r28
 3be:	c8 2f       	mov	r28, r24
	// 0, 0 is the upper left corner
	
	hx_send_command(0xB0 + _y);
 3c0:	80 eb       	ldi	r24, 0xB0	; 176
 3c2:	86 0f       	add	r24, r22
 3c4:	0e 94 8e 01 	call	0x31c	; 0x31c <hx_send_command>
	hx_send_command(0x10 | ((_x & 0x7F) >> 4));
 3c8:	8c 2f       	mov	r24, r28
 3ca:	8f 77       	andi	r24, 0x7F	; 127
 3cc:	82 95       	swap	r24
 3ce:	8f 70       	andi	r24, 0x0F	; 15
 3d0:	80 61       	ori	r24, 0x10	; 16
 3d2:	0e 94 8e 01 	call	0x31c	; 0x31c <hx_send_command>
	hx_send_command(0x0F & _x);
 3d6:	8c 2f       	mov	r24, r28
 3d8:	8f 70       	andi	r24, 0x0F	; 15
 3da:	0e 94 8e 01 	call	0x31c	; 0x31c <hx_send_command>
}
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <hx_clear_screen>:

void hx_clear_screen(void)
{
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 de 01 	call	0x3bc	; 0x3bc <hx_set_coordinates>
 3ee:	d9 e0       	ldi	r29, 0x09	; 9
 3f0:	07 c0       	rjmp	.+14     	; 0x400 <__LOCK_REGION_LENGTH__>
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
	{
		for(col = 0; col <= HX_MAX_COL; col ++)
		{
			hx_send_data(0x00);
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <hx_send_data>
 3f8:	c1 50       	subi	r28, 0x01	; 1
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
	{
		for(col = 0; col <= HX_MAX_COL; col ++)
 3fa:	d9 f7       	brne	.-10     	; 0x3f2 <hx_clear_screen+0x10>
 3fc:	d1 50       	subi	r29, 0x01	; 1
{
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
 3fe:	11 f0       	breq	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	hx_send_command(0x10 | ((_x & 0x7F) >> 4));
	hx_send_command(0x0F & _x);
}

void hx_clear_screen(void)
{
 400:	c1 e6       	ldi	r28, 0x61	; 97
 402:	f7 cf       	rjmp	.-18     	; 0x3f2 <hx_clear_screen+0x10>
		for(col = 0; col <= HX_MAX_COL; col ++)
		{
			hx_send_data(0x00);
		}
	}
}
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <hx_fill_screen>:

void hx_fill_screen(void)
{
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	0e 94 de 01 	call	0x3bc	; 0x3bc <hx_set_coordinates>
 416:	d9 e0       	ldi	r29, 0x09	; 9
 418:	07 c0       	rjmp	.+14     	; 0x428 <hx_fill_screen+0x1e>
	
	for(row = 0; row < 9; row ++)
	{
		for(col = 0; col < 96; col ++)
		{
			hx_send_data(0xFF);
 41a:	8f ef       	ldi	r24, 0xFF	; 255
 41c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <hx_send_data>
 420:	c1 50       	subi	r28, 0x01	; 1
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row < 9; row ++)
	{
		for(col = 0; col < 96; col ++)
 422:	d9 f7       	brne	.-10     	; 0x41a <hx_fill_screen+0x10>
 424:	d1 50       	subi	r29, 0x01	; 1
{
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row < 9; row ++)
 426:	11 f0       	breq	.+4      	; 0x42c <hx_fill_screen+0x22>
		}
	}
}

void hx_fill_screen(void)
{
 428:	c0 e6       	ldi	r28, 0x60	; 96
 42a:	f7 cf       	rjmp	.-18     	; 0x41a <hx_fill_screen+0x10>
		for(col = 0; col < 96; col ++)
		{
			hx_send_data(0xFF);
		}
	}
}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <hx_write_char>:

void hx_write_char(const unsigned char _character)
{
 432:	0f 93       	push	r16
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	ec 01       	movw	r28, r24
 43e:	cc 0f       	add	r28, r28
 440:	dd 1f       	adc	r29, r29
 442:	c8 0f       	add	r28, r24
 444:	d9 1f       	adc	r29, r25
 446:	cc 0f       	add	r28, r28
 448:	dd 1f       	adc	r29, r29
 44a:	cd 59       	subi	r28, 0x9D	; 157
 44c:	de 4f       	sbci	r29, 0xFE	; 254
 44e:	01 96       	adiw	r24, 0x01	; 1
 450:	8c 01       	movw	r16, r24
 452:	00 0f       	add	r16, r16
 454:	11 1f       	adc	r17, r17
 456:	80 0f       	add	r24, r16
 458:	91 1f       	adc	r25, r17
 45a:	8c 01       	movw	r16, r24
 45c:	00 0f       	add	r16, r16
 45e:	11 1f       	adc	r17, r17
 460:	0d 59       	subi	r16, 0x9D	; 157
 462:	1e 4f       	sbci	r17, 0xFE	; 254
	
	for(int row_index = 0; row_index < 6; row_index ++)
	{
		hx_send_data(HX_character[_character][row_index]);
 464:	89 91       	ld	r24, Y+
 466:	0e 94 74 01 	call	0x2e8	; 0x2e8 <hx_send_data>
}

void hx_write_char(const unsigned char _character)
{
	
	for(int row_index = 0; row_index < 6; row_index ++)
 46a:	c0 17       	cp	r28, r16
 46c:	d1 07       	cpc	r29, r17
 46e:	d1 f7       	brne	.-12     	; 0x464 <hx_write_char+0x32>
	{
		hx_send_data(HX_character[_character][row_index]);
	}
}
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	1f 91       	pop	r17
 476:	0f 91       	pop	r16
 478:	08 95       	ret

0000047a <hx_write_string>:

void hx_write_string(const char *_characters_array)
{
 47a:	0f 93       	push	r16
 47c:	1f 93       	push	r17
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
	int string_length = strlen(_characters_array);
 482:	fc 01       	movw	r30, r24
 484:	01 90       	ld	r0, Z+
 486:	00 20       	and	r0, r0
 488:	e9 f7       	brne	.-6      	; 0x484 <hx_write_string+0xa>
 48a:	31 97       	sbiw	r30, 0x01	; 1
 48c:	e8 1b       	sub	r30, r24
 48e:	f9 0b       	sbc	r31, r25
	for(int char_index = 0; char_index < string_length; char_index++)
 490:	1e 16       	cp	r1, r30
 492:	1f 06       	cpc	r1, r31
 494:	54 f4       	brge	.+20     	; 0x4aa <hx_write_string+0x30>
 496:	ec 01       	movw	r28, r24
 498:	8c 01       	movw	r16, r24
 49a:	0e 0f       	add	r16, r30
 49c:	1f 1f       	adc	r17, r31
	{
		hx_write_char((const unsigned char)(_characters_array[char_index]));
 49e:	89 91       	ld	r24, Y+
 4a0:	0e 94 19 02 	call	0x432	; 0x432 <hx_write_char>
}

void hx_write_string(const char *_characters_array)
{
	int string_length = strlen(_characters_array);
	for(int char_index = 0; char_index < string_length; char_index++)
 4a4:	c0 17       	cp	r28, r16
 4a6:	d1 07       	cpc	r29, r17
 4a8:	d1 f7       	brne	.-12     	; 0x49e <hx_write_string+0x24>
	{
		hx_write_char((const unsigned char)(_characters_array[char_index]));
	}
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	1f 91       	pop	r17
 4b0:	0f 91       	pop	r16
 4b2:	08 95       	ret

000004b4 <get_filtered_light_intensity>:
 4b4:	0f 93       	push	r16
 4b6:	1f 93       	push	r17
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	d8 2f       	mov	r29, r24
 4be:	cf e0       	ldi	r28, 0x0F	; 15
 4c0:	00 e0       	ldi	r16, 0x00	; 0
 4c2:	10 e0       	ldi	r17, 0x00	; 0
 4c4:	8d 2f       	mov	r24, r29
 4c6:	0e 94 5b 00 	call	0xb6	; 0xb6 <ADC_get_value>
 4ca:	08 0f       	add	r16, r24
 4cc:	19 1f       	adc	r17, r25
 4ce:	c1 50       	subi	r28, 0x01	; 1
 4d0:	c9 f7       	brne	.-14     	; 0x4c4 <get_filtered_light_intensity+0x10>
 4d2:	98 01       	movw	r18, r16
 4d4:	a9 e8       	ldi	r26, 0x89	; 137
 4d6:	b8 e8       	ldi	r27, 0x88	; 136
 4d8:	0e 94 33 05 	call	0xa66	; 0xa66 <__umulhisi3>
 4dc:	dc 01       	movw	r26, r24
 4de:	b6 95       	lsr	r27
 4e0:	a7 95       	ror	r26
 4e2:	b6 95       	lsr	r27
 4e4:	a7 95       	ror	r26
 4e6:	b6 95       	lsr	r27
 4e8:	a7 95       	ror	r26
 4ea:	24 e6       	ldi	r18, 0x64	; 100
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	0e 94 42 05 	call	0xa84	; 0xa84 <__usmulhisi3>
 4f2:	2f ef       	ldi	r18, 0xFF	; 255
 4f4:	33 e0       	ldi	r19, 0x03	; 3
 4f6:	40 e0       	ldi	r20, 0x00	; 0
 4f8:	50 e0       	ldi	r21, 0x00	; 0
 4fa:	0e 94 14 05 	call	0xa28	; 0xa28 <__divmodsi4>
 4fe:	84 e6       	ldi	r24, 0x64	; 100
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	82 1b       	sub	r24, r18
 504:	93 0b       	sbc	r25, r19
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	1f 91       	pop	r17
 50c:	0f 91       	pop	r16
 50e:	08 95       	ret

00000510 <uC_init>:
 510:	87 ea       	ldi	r24, 0xA7	; 167
 512:	91 e6       	ldi	r25, 0x61	; 97
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <uC_init+0x4>
 518:	00 c0       	rjmp	.+0      	; 0x51a <uC_init+0xa>
 51a:	00 00       	nop
{
	// Wait for system to get fully powered up
	_delay_ms(100);
	
	// initialize required modules
	ADC_init();
 51c:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
 520:	83 ed       	ldi	r24, 0xD3	; 211
 522:	90 e3       	ldi	r25, 0x30	; 48
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	f1 f7       	brne	.-4      	; 0x524 <uC_init+0x14>
 528:	00 c0       	rjmp	.+0      	; 0x52a <uC_init+0x1a>
 52a:	00 00       	nop
	_delay_ms(50);
	
	init_pwm_channels();
 52c:	0e 94 05 03 	call	0x60a	; 0x60a <init_pwm_channels>
 530:	83 ed       	ldi	r24, 0xD3	; 211
 532:	90 e3       	ldi	r25, 0x30	; 48
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <uC_init+0x24>
 538:	00 c0       	rjmp	.+0      	; 0x53a <uC_init+0x2a>
 53a:	00 00       	nop
	_delay_ms(50);
	
	init_hx1230_control();
 53c:	0e 94 a8 01 	call	0x350	; 0x350 <init_hx1230_control>
 540:	83 ed       	ldi	r24, 0xD3	; 211
 542:	90 e3       	ldi	r25, 0x30	; 48
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <uC_init+0x34>
 548:	00 c0       	rjmp	.+0      	; 0x54a <uC_init+0x3a>
 54a:	00 00       	nop
	_delay_ms(50);
	hx_fill_screen();
 54c:	0e 94 05 02 	call	0x40a	; 0x40a <hx_fill_screen>
 550:	9f e9       	ldi	r25, 0x9F	; 159
 552:	26 e8       	ldi	r18, 0x86	; 134
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	91 50       	subi	r25, 0x01	; 1
 558:	20 40       	sbci	r18, 0x00	; 0
 55a:	80 40       	sbci	r24, 0x00	; 0
 55c:	e1 f7       	brne	.-8      	; 0x556 <uC_init+0x46>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <uC_init+0x50>
 560:	00 00       	nop
	_delay_ms(500);
	hx_clear_screen();
 562:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <hx_clear_screen>
 566:	83 ed       	ldi	r24, 0xD3	; 211
 568:	90 e3       	ldi	r25, 0x30	; 48
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	f1 f7       	brne	.-4      	; 0x56a <uC_init+0x5a>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <uC_init+0x60>
 570:	00 00       	nop
	_delay_ms(50);
	
	display_title();
 572:	0e 94 6f 00 	call	0xde	; 0xde <display_title>
	display_idle_state_message();
 576:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <display_idle_state_message>
 57a:	08 95       	ret

0000057c <main>:

void uC_init(void);

int main(void)
{
	STATE = STATE_INIT;
 57c:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <__data_end>
	uC_init();
 580:	0e 94 88 02 	call	0x510	; 0x510 <uC_init>
	
	SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_INCLINE_POS_0;
 584:	e6 e8       	ldi	r30, 0x86	; 134
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	20 81       	ld	r18, Z
 58a:	31 81       	ldd	r19, Z+1	; 0x01
 58c:	ad ec       	ldi	r26, 0xCD	; 205
 58e:	bc ec       	ldi	r27, 0xCC	; 204
 590:	0e 94 33 05 	call	0xa66	; 0xa66 <__umulhisi3>
 594:	92 95       	swap	r25
 596:	82 95       	swap	r24
 598:	8f 70       	andi	r24, 0x0F	; 15
 59a:	89 27       	eor	r24, r25
 59c:	9f 70       	andi	r25, 0x0F	; 15
 59e:	89 27       	eor	r24, r25
 5a0:	82 54       	subi	r24, 0x42	; 66
 5a2:	91 09       	sbc	r25, r1
 5a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 5a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_INIT_POS;
 5ac:	80 81       	ld	r24, Z
 5ae:	91 81       	ldd	r25, Z+1	; 0x01
 5b0:	9c 01       	movw	r18, r24
 5b2:	22 0f       	add	r18, r18
 5b4:	33 1f       	adc	r19, r19
 5b6:	88 0f       	add	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	88 0f       	add	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	28 0f       	add	r18, r24
 5c4:	39 1f       	adc	r19, r25
 5c6:	a1 e6       	ldi	r26, 0x61	; 97
 5c8:	b6 ef       	ldi	r27, 0xF6	; 246
 5ca:	0e 94 33 05 	call	0xa66	; 0xa66 <__umulhisi3>
 5ce:	88 0f       	add	r24, r24
 5d0:	89 2f       	mov	r24, r25
 5d2:	88 1f       	adc	r24, r24
 5d4:	99 0b       	sbc	r25, r25
 5d6:	91 95       	neg	r25
 5d8:	88 97       	sbiw	r24, 0x28	; 40
 5da:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 5de:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	turn_on_pwm_channels();
 5e2:	0e 94 27 03 	call	0x64e	; 0x64e <turn_on_pwm_channels>
	
	
	STATE = STATE_IDLE;
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <__data_end>
				track();
				break;
			}
			default:
			{
				STATE = STATE_MANUAL;
 5ec:	c2 e0       	ldi	r28, 0x02	; 2
	
	STATE = STATE_IDLE;
	
    while (1) 
    {
		switch(STATE)
 5ee:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <__data_end>
 5f2:	81 30       	cpi	r24, 0x01	; 1
 5f4:	38 f0       	brcs	.+14     	; 0x604 <main+0x88>
 5f6:	83 30       	cpi	r24, 0x03	; 3
 5f8:	e0 f3       	brcs	.-8      	; 0x5f2 <main+0x76>
 5fa:	83 30       	cpi	r24, 0x03	; 3
 5fc:	19 f4       	brne	.+6      	; 0x604 <main+0x88>
			{
				break;
			}
			case STATE_TRACKING:
			{
				track();
 5fe:	0e 94 2d 03 	call	0x65a	; 0x65a <track>
				break;
 602:	f5 cf       	rjmp	.-22     	; 0x5ee <main+0x72>
			}
			default:
			{
				STATE = STATE_MANUAL;
 604:	c0 93 64 07 	sts	0x0764, r28	; 0x800764 <__data_end>
				break;
 608:	f2 cf       	rjmp	.-28     	; 0x5ee <main+0x72>

0000060a <init_pwm_channels>:
#include "global.h"
#include <avr/io.h>

void init_pwm_channels(void)
{
	DDRB |= (1 << DDB1)|(1 << DDB2);
 60a:	84 b1       	in	r24, 0x04	; 4
 60c:	86 60       	ori	r24, 0x06	; 6
 60e:	84 b9       	out	0x04, r24	; 4
	// PB1 and PB2 as output of 16bits Timer1
	
	 ICR1 = 2485;
 610:	85 eb       	ldi	r24, 0xB5	; 181
 612:	99 e0       	ldi	r25, 0x09	; 9
 614:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 618:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	 // set TOP to count 20ms
	 // TOP calculated by the formula: F_PWM = F_CPU/(PRESCALER*(1 + TOP))
	 // Atmel-42735-8-bit-AVR-Microcontroller-ATmega328-328P_Datasheet, page 164

	 OCR1A = 00;
 61c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 620:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	 // set PWM for 0% duty cycle

	 OCR1B = 00;
 624:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 628:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	 // set PWM for 0% duty cycle

	 TCCR1A &= ~((1 << COM1A1)|(1 << COM1B1));
 62c:	a0 e8       	ldi	r26, 0x80	; 128
 62e:	b0 e0       	ldi	r27, 0x00	; 0
 630:	8c 91       	ld	r24, X
 632:	8f 75       	andi	r24, 0x5F	; 95
 634:	8c 93       	st	X, r24
	 // make sure PWM signal is off

	TCCR1B |= (1 << CS11);
 636:	e1 e8       	ldi	r30, 0x81	; 129
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	80 81       	ld	r24, Z
 63c:	82 60       	ori	r24, 0x02	; 2
 63e:	80 83       	st	Z, r24
	// START the timer with 8 prescaler

	 TCCR1A |= (1 << WGM11);
 640:	8c 91       	ld	r24, X
 642:	82 60       	ori	r24, 0x02	; 2
 644:	8c 93       	st	X, r24
	 TCCR1B |= (1 << WGM12)|(1 << WGM13);
 646:	80 81       	ld	r24, Z
 648:	88 61       	ori	r24, 0x18	; 24
 64a:	80 83       	st	Z, r24
 64c:	08 95       	ret

0000064e <turn_on_pwm_channels>:
	 // set Fast PWM mode using ICR1 as TOP
}

void turn_on_pwm_channels(void)
{
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1);
 64e:	e0 e8       	ldi	r30, 0x80	; 128
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	80 81       	ld	r24, Z
 654:	80 6a       	ori	r24, 0xA0	; 160
 656:	80 83       	st	Z, r24
 658:	08 95       	ret

0000065a <track>:

int up_down_movement_gradient_request;
int left_right_movement_gradient_request;

void track(void)
{
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
	light_up_left = get_filtered_light_intensity(LS_UP_LEFT);
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <get_filtered_light_intensity>
 664:	90 93 78 07 	sts	0x0778, r25	; 0x800778 <light_up_left+0x1>
 668:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <light_up_left>
	light_up_right = get_filtered_light_intensity(LS_UP_RIGHT);
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <get_filtered_light_intensity>
 672:	90 93 6a 07 	sts	0x076A, r25	; 0x80076a <light_up_right+0x1>
 676:	80 93 69 07 	sts	0x0769, r24	; 0x800769 <light_up_right>
	light_down_left = get_filtered_light_intensity(LS_DOWN_LEFT);
 67a:	82 e0       	ldi	r24, 0x02	; 2
 67c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <get_filtered_light_intensity>
 680:	90 93 74 07 	sts	0x0774, r25	; 0x800774 <light_down_left+0x1>
 684:	80 93 73 07 	sts	0x0773, r24	; 0x800773 <light_down_left>
	light_down_right = get_filtered_light_intensity(LS_DOWN_RIGHT);
 688:	83 e0       	ldi	r24, 0x03	; 3
 68a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <get_filtered_light_intensity>
 68e:	90 93 6c 07 	sts	0x076C, r25	; 0x80076c <light_down_right+0x1>
 692:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <light_down_right>
	
	display_light_sensor_data(LS_UP_LEFT, light_up_left);
 696:	60 91 77 07 	lds	r22, 0x0777	; 0x800777 <light_up_left>
 69a:	70 91 78 07 	lds	r23, 0x0778	; 0x800778 <light_up_left+0x1>
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	0e 94 80 00 	call	0x100	; 0x100 <display_light_sensor_data>
	display_light_sensor_data(LS_UP_RIGHT, light_up_right);
 6a4:	60 91 69 07 	lds	r22, 0x0769	; 0x800769 <light_up_right>
 6a8:	70 91 6a 07 	lds	r23, 0x076A	; 0x80076a <light_up_right+0x1>
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	0e 94 80 00 	call	0x100	; 0x100 <display_light_sensor_data>
	display_light_sensor_data(LS_DOWN_LEFT, light_down_left);
 6b2:	60 91 73 07 	lds	r22, 0x0773	; 0x800773 <light_down_left>
 6b6:	70 91 74 07 	lds	r23, 0x0774	; 0x800774 <light_down_left+0x1>
 6ba:	82 e0       	ldi	r24, 0x02	; 2
 6bc:	0e 94 80 00 	call	0x100	; 0x100 <display_light_sensor_data>
	display_light_sensor_data(LS_DOWN_RIGHT, light_down_right);
 6c0:	60 91 6b 07 	lds	r22, 0x076B	; 0x80076b <light_down_right>
 6c4:	70 91 6c 07 	lds	r23, 0x076C	; 0x80076c <light_down_right+0x1>
 6c8:	83 e0       	ldi	r24, 0x03	; 3
 6ca:	0e 94 80 00 	call	0x100	; 0x100 <display_light_sensor_data>
	
	up_intensity_average = light_up_left + light_up_right;
 6ce:	e0 91 77 07 	lds	r30, 0x0777	; 0x800777 <light_up_left>
 6d2:	f0 91 78 07 	lds	r31, 0x0778	; 0x800778 <light_up_left+0x1>
 6d6:	60 91 69 07 	lds	r22, 0x0769	; 0x800769 <light_up_right>
 6da:	70 91 6a 07 	lds	r23, 0x076A	; 0x80076a <light_up_right+0x1>
	up_intensity_average >>= 1;
 6de:	af 01       	movw	r20, r30
 6e0:	46 0f       	add	r20, r22
 6e2:	57 1f       	adc	r21, r23
 6e4:	55 95       	asr	r21
 6e6:	47 95       	ror	r20
 6e8:	50 93 76 07 	sts	0x0776, r21	; 0x800776 <up_intensity_average+0x1>
 6ec:	40 93 75 07 	sts	0x0775, r20	; 0x800775 <up_intensity_average>
	
	down_intensity_average = light_down_left + light_down_right;
 6f0:	20 91 73 07 	lds	r18, 0x0773	; 0x800773 <light_down_left>
 6f4:	30 91 74 07 	lds	r19, 0x0774	; 0x800774 <light_down_left+0x1>
 6f8:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <light_down_right>
 6fc:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <light_down_right+0x1>
	down_intensity_average >>= 1;
 700:	a9 01       	movw	r20, r18
 702:	48 0f       	add	r20, r24
 704:	59 1f       	adc	r21, r25
 706:	55 95       	asr	r21
 708:	47 95       	ror	r20
 70a:	50 93 66 07 	sts	0x0766, r21	; 0x800766 <down_intensity_average+0x1>
 70e:	40 93 65 07 	sts	0x0765, r20	; 0x800765 <down_intensity_average>
	
	left_intensity_average = light_up_left + light_down_left;
	left_intensity_average >>= 1;
 712:	2e 0f       	add	r18, r30
 714:	3f 1f       	adc	r19, r31
 716:	35 95       	asr	r19
 718:	27 95       	ror	r18
 71a:	30 93 68 07 	sts	0x0768, r19	; 0x800768 <left_intensity_average+0x1>
 71e:	20 93 67 07 	sts	0x0767, r18	; 0x800767 <left_intensity_average>
	
	right_intensity_average = light_up_right + light_down_right;
	right_intensity_average >>= 1;
 722:	86 0f       	add	r24, r22
 724:	97 1f       	adc	r25, r23
 726:	95 95       	asr	r25
 728:	87 95       	ror	r24
 72a:	90 93 72 07 	sts	0x0772, r25	; 0x800772 <right_intensity_average+0x1>
 72e:	80 93 71 07 	sts	0x0771, r24	; 0x800771 <right_intensity_average>
	
	hx_set_coordinates(42, 2);
 732:	62 e0       	ldi	r22, 0x02	; 2
 734:	8a e2       	ldi	r24, 0x2A	; 42
 736:	0e 94 de 01 	call	0x3bc	; 0x3bc <hx_set_coordinates>
	hx_write_char('0' + (up_intensity_average / 10) % 10);
 73a:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <up_intensity_average>
 73e:	90 91 76 07 	lds	r25, 0x0776	; 0x800776 <up_intensity_average+0x1>
 742:	ca e0       	ldi	r28, 0x0A	; 10
 744:	d0 e0       	ldi	r29, 0x00	; 0
 746:	be 01       	movw	r22, r28
 748:	0e 94 00 05 	call	0xa00	; 0xa00 <__divmodhi4>
 74c:	cb 01       	movw	r24, r22
 74e:	be 01       	movw	r22, r28
 750:	0e 94 00 05 	call	0xa00	; 0xa00 <__divmodhi4>
 754:	80 5d       	subi	r24, 0xD0	; 208
 756:	0e 94 19 02 	call	0x432	; 0x432 <hx_write_char>
	hx_write_char('0' + up_intensity_average % 10);
 75a:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <up_intensity_average>
 75e:	90 91 76 07 	lds	r25, 0x0776	; 0x800776 <up_intensity_average+0x1>
 762:	be 01       	movw	r22, r28
 764:	0e 94 00 05 	call	0xa00	; 0xa00 <__divmodhi4>
 768:	80 5d       	subi	r24, 0xD0	; 208
 76a:	0e 94 19 02 	call	0x432	; 0x432 <hx_write_char>
	
	hx_set_coordinates(42, 6);
 76e:	66 e0       	ldi	r22, 0x06	; 6
 770:	8a e2       	ldi	r24, 0x2A	; 42
 772:	0e 94 de 01 	call	0x3bc	; 0x3bc <hx_set_coordinates>
	hx_write_char('0' + (down_intensity_average / 10) % 10);
 776:	80 91 65 07 	lds	r24, 0x0765	; 0x800765 <down_intensity_average>
 77a:	90 91 66 07 	lds	r25, 0x0766	; 0x800766 <down_intensity_average+0x1>
 77e:	be 01       	movw	r22, r28
 780:	0e 94 00 05 	call	0xa00	; 0xa00 <__divmodhi4>
 784:	cb 01       	movw	r24, r22
 786:	be 01       	movw	r22, r28
 788:	0e 94 00 05 	call	0xa00	; 0xa00 <__divmodhi4>
 78c:	80 5d       	subi	r24, 0xD0	; 208
 78e:	0e 94 19 02 	call	0x432	; 0x432 <hx_write_char>
	hx_write_char('0' + down_intensity_average % 10);
 792:	80 91 65 07 	lds	r24, 0x0765	; 0x800765 <down_intensity_average>
 796:	90 91 66 07 	lds	r25, 0x0766	; 0x800766 <down_intensity_average+0x1>
 79a:	be 01       	movw	r22, r28
 79c:	0e 94 00 05 	call	0xa00	; 0xa00 <__divmodhi4>
 7a0:	80 5d       	subi	r24, 0xD0	; 208
 7a2:	0e 94 19 02 	call	0x432	; 0x432 <hx_write_char>
	
	hx_set_coordinates(6, 4);
 7a6:	64 e0       	ldi	r22, 0x04	; 4
 7a8:	86 e0       	ldi	r24, 0x06	; 6
 7aa:	0e 94 de 01 	call	0x3bc	; 0x3bc <hx_set_coordinates>
	hx_write_char('0' + (left_intensity_average / 10) % 10);
 7ae:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <left_intensity_average>
 7b2:	90 91 68 07 	lds	r25, 0x0768	; 0x800768 <left_intensity_average+0x1>
 7b6:	be 01       	movw	r22, r28
 7b8:	0e 94 00 05 	call	0xa00	; 0xa00 <__divmodhi4>
 7bc:	cb 01       	movw	r24, r22
 7be:	be 01       	movw	r22, r28
 7c0:	0e 94 00 05 	call	0xa00	; 0xa00 <__divmodhi4>
 7c4:	80 5d       	subi	r24, 0xD0	; 208
 7c6:	0e 94 19 02 	call	0x432	; 0x432 <hx_write_char>
	hx_write_char('0' + left_intensity_average % 10);
 7ca:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <left_intensity_average>
 7ce:	90 91 68 07 	lds	r25, 0x0768	; 0x800768 <left_intensity_average+0x1>
 7d2:	be 01       	movw	r22, r28
 7d4:	0e 94 00 05 	call	0xa00	; 0xa00 <__divmodhi4>
 7d8:	80 5d       	subi	r24, 0xD0	; 208
 7da:	0e 94 19 02 	call	0x432	; 0x432 <hx_write_char>
	
	hx_set_coordinates(66, 4);
 7de:	64 e0       	ldi	r22, 0x04	; 4
 7e0:	82 e4       	ldi	r24, 0x42	; 66
 7e2:	0e 94 de 01 	call	0x3bc	; 0x3bc <hx_set_coordinates>
	hx_write_char('0' + (right_intensity_average / 10) % 10);
 7e6:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <right_intensity_average>
 7ea:	90 91 72 07 	lds	r25, 0x0772	; 0x800772 <right_intensity_average+0x1>
 7ee:	be 01       	movw	r22, r28
 7f0:	0e 94 00 05 	call	0xa00	; 0xa00 <__divmodhi4>
 7f4:	cb 01       	movw	r24, r22
 7f6:	be 01       	movw	r22, r28
 7f8:	0e 94 00 05 	call	0xa00	; 0xa00 <__divmodhi4>
 7fc:	80 5d       	subi	r24, 0xD0	; 208
 7fe:	0e 94 19 02 	call	0x432	; 0x432 <hx_write_char>
	hx_write_char('0' + right_intensity_average % 10);
 802:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <right_intensity_average>
 806:	90 91 72 07 	lds	r25, 0x0772	; 0x800772 <right_intensity_average+0x1>
 80a:	be 01       	movw	r22, r28
 80c:	0e 94 00 05 	call	0xa00	; 0xa00 <__divmodhi4>
 810:	80 5d       	subi	r24, 0xD0	; 208
 812:	0e 94 19 02 	call	0x432	; 0x432 <hx_write_char>
	
	up_down_movement_gradient_request = up_intensity_average - down_intensity_average;
 816:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <up_intensity_average>
 81a:	90 91 76 07 	lds	r25, 0x0776	; 0x800776 <up_intensity_average+0x1>
 81e:	20 91 65 07 	lds	r18, 0x0765	; 0x800765 <down_intensity_average>
 822:	30 91 66 07 	lds	r19, 0x0766	; 0x800766 <down_intensity_average+0x1>
 826:	82 1b       	sub	r24, r18
 828:	93 0b       	sbc	r25, r19
 82a:	90 93 6e 07 	sts	0x076E, r25	; 0x80076e <up_down_movement_gradient_request+0x1>
 82e:	80 93 6d 07 	sts	0x076D, r24	; 0x80076d <up_down_movement_gradient_request>
	left_right_movement_gradient_request = left_intensity_average - right_intensity_average;
 832:	20 91 67 07 	lds	r18, 0x0767	; 0x800767 <left_intensity_average>
 836:	30 91 68 07 	lds	r19, 0x0768	; 0x800768 <left_intensity_average+0x1>
 83a:	40 91 71 07 	lds	r20, 0x0771	; 0x800771 <right_intensity_average>
 83e:	50 91 72 07 	lds	r21, 0x0772	; 0x800772 <right_intensity_average+0x1>
 842:	24 1b       	sub	r18, r20
 844:	35 0b       	sbc	r19, r21
 846:	30 93 70 07 	sts	0x0770, r19	; 0x800770 <left_right_movement_gradient_request+0x1>
 84a:	20 93 6f 07 	sts	0x076F, r18	; 0x80076f <left_right_movement_gradient_request>
	
	if(abs(up_down_movement_gradient_request) > TRACKING_TOLERANCE)
 84e:	9c 01       	movw	r18, r24
 850:	99 23       	and	r25, r25
 852:	24 f4       	brge	.+8      	; 0x85c <track+0x202>
 854:	22 27       	eor	r18, r18
 856:	33 27       	eor	r19, r19
 858:	28 1b       	sub	r18, r24
 85a:	39 0b       	sbc	r19, r25
 85c:	23 30       	cpi	r18, 0x03	; 3
 85e:	31 05       	cpc	r19, r1
 860:	64 f0       	brlt	.+24     	; 0x87a <track+0x220>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER -= up_down_movement_gradient_request / 10;
 862:	e8 e8       	ldi	r30, 0x88	; 136
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	20 81       	ld	r18, Z
 868:	31 81       	ldd	r19, Z+1	; 0x01
 86a:	6a e0       	ldi	r22, 0x0A	; 10
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	0e 94 00 05 	call	0xa00	; 0xa00 <__divmodhi4>
 872:	26 1b       	sub	r18, r22
 874:	37 0b       	sbc	r19, r23
 876:	31 83       	std	Z+1, r19	; 0x01
 878:	20 83       	st	Z, r18
	}
	
	if(abs(left_right_movement_gradient_request) > TRACKING_TOLERANCE)
 87a:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <left_right_movement_gradient_request>
 87e:	90 91 70 07 	lds	r25, 0x0770	; 0x800770 <left_right_movement_gradient_request+0x1>
 882:	9c 01       	movw	r18, r24
 884:	99 23       	and	r25, r25
 886:	24 f4       	brge	.+8      	; 0x890 <track+0x236>
 888:	22 27       	eor	r18, r18
 88a:	33 27       	eor	r19, r19
 88c:	28 1b       	sub	r18, r24
 88e:	39 0b       	sbc	r19, r25
 890:	23 30       	cpi	r18, 0x03	; 3
 892:	31 05       	cpc	r19, r1
 894:	64 f0       	brlt	.+24     	; 0x8ae <track+0x254>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER -= left_right_movement_gradient_request / 10;
 896:	ea e8       	ldi	r30, 0x8A	; 138
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	20 81       	ld	r18, Z
 89c:	31 81       	ldd	r19, Z+1	; 0x01
 89e:	6a e0       	ldi	r22, 0x0A	; 10
 8a0:	70 e0       	ldi	r23, 0x00	; 0
 8a2:	0e 94 00 05 	call	0xa00	; 0xa00 <__divmodhi4>
 8a6:	26 1b       	sub	r18, r22
 8a8:	37 0b       	sbc	r19, r23
 8aa:	31 83       	std	Z+1, r19	; 0x01
 8ac:	20 83       	st	Z, r18
	}
	if(SG90_INCLINE_DUTY_CYCLE_REGISTER > SG90_INCLINE_POS_180)
 8ae:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 8b2:	50 91 89 00 	lds	r21, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 8b6:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 8ba:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 8be:	ad ec       	ldi	r26, 0xCD	; 205
 8c0:	bc ec       	ldi	r27, 0xCC	; 204
 8c2:	0e 94 33 05 	call	0xa66	; 0xa66 <__umulhisi3>
 8c6:	96 95       	lsr	r25
 8c8:	87 95       	ror	r24
 8ca:	96 95       	lsr	r25
 8cc:	87 95       	ror	r24
 8ce:	96 95       	lsr	r25
 8d0:	87 95       	ror	r24
 8d2:	0f 96       	adiw	r24, 0x0f	; 15
 8d4:	84 17       	cp	r24, r20
 8d6:	95 07       	cpc	r25, r21
 8d8:	88 f4       	brcc	.+34     	; 0x8fc <track+0x2a2>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_INCLINE_POS_180;
 8da:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 8de:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 8e2:	0e 94 33 05 	call	0xa66	; 0xa66 <__umulhisi3>
 8e6:	96 95       	lsr	r25
 8e8:	87 95       	ror	r24
 8ea:	96 95       	lsr	r25
 8ec:	87 95       	ror	r24
 8ee:	96 95       	lsr	r25
 8f0:	87 95       	ror	r24
 8f2:	0f 96       	adiw	r24, 0x0f	; 15
 8f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 8f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	}
	if(SG90_INCLINE_DUTY_CYCLE_REGISTER < SG90_INCLINE_POS_0)
 8fc:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 900:	50 91 89 00 	lds	r21, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 904:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 908:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 90c:	ad ec       	ldi	r26, 0xCD	; 205
 90e:	bc ec       	ldi	r27, 0xCC	; 204
 910:	0e 94 33 05 	call	0xa66	; 0xa66 <__umulhisi3>
 914:	92 95       	swap	r25
 916:	82 95       	swap	r24
 918:	8f 70       	andi	r24, 0x0F	; 15
 91a:	89 27       	eor	r24, r25
 91c:	9f 70       	andi	r25, 0x0F	; 15
 91e:	89 27       	eor	r24, r25
 920:	82 54       	subi	r24, 0x42	; 66
 922:	91 09       	sbc	r25, r1
 924:	48 17       	cp	r20, r24
 926:	59 07       	cpc	r21, r25
 928:	90 f4       	brcc	.+36     	; 0x94e <__stack+0x4f>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_INCLINE_POS_0;
 92a:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 92e:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 932:	0e 94 33 05 	call	0xa66	; 0xa66 <__umulhisi3>
 936:	92 95       	swap	r25
 938:	82 95       	swap	r24
 93a:	8f 70       	andi	r24, 0x0F	; 15
 93c:	89 27       	eor	r24, r25
 93e:	9f 70       	andi	r25, 0x0F	; 15
 940:	89 27       	eor	r24, r25
 942:	82 54       	subi	r24, 0x42	; 66
 944:	91 09       	sbc	r25, r1
 946:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 94a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	}
	if(SG90_ROTATE_DUTY_CYCLE_REGISTER > SG90_ROTATE_POS_180)
 94e:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 952:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 956:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 95a:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 95e:	ad ec       	ldi	r26, 0xCD	; 205
 960:	bc ec       	ldi	r27, 0xCC	; 204
 962:	0e 94 33 05 	call	0xa66	; 0xa66 <__umulhisi3>
 966:	96 95       	lsr	r25
 968:	87 95       	ror	r24
 96a:	96 95       	lsr	r25
 96c:	87 95       	ror	r24
 96e:	96 95       	lsr	r25
 970:	87 95       	ror	r24
 972:	05 96       	adiw	r24, 0x05	; 5
 974:	84 17       	cp	r24, r20
 976:	95 07       	cpc	r25, r21
 978:	88 f4       	brcc	.+34     	; 0x99c <__stack+0x9d>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_POS_180;
 97a:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 97e:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 982:	0e 94 33 05 	call	0xa66	; 0xa66 <__umulhisi3>
 986:	96 95       	lsr	r25
 988:	87 95       	ror	r24
 98a:	96 95       	lsr	r25
 98c:	87 95       	ror	r24
 98e:	96 95       	lsr	r25
 990:	87 95       	ror	r24
 992:	05 96       	adiw	r24, 0x05	; 5
 994:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 998:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	}
	if(SG90_ROTATE_DUTY_CYCLE_REGISTER < SG90_ROTATE_POS_0)
 99c:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 9a0:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 9a4:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 9a8:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 9ac:	ad ec       	ldi	r26, 0xCD	; 205
 9ae:	bc ec       	ldi	r27, 0xCC	; 204
 9b0:	0e 94 33 05 	call	0xa66	; 0xa66 <__umulhisi3>
 9b4:	92 95       	swap	r25
 9b6:	82 95       	swap	r24
 9b8:	8f 70       	andi	r24, 0x0F	; 15
 9ba:	89 27       	eor	r24, r25
 9bc:	9f 70       	andi	r25, 0x0F	; 15
 9be:	89 27       	eor	r24, r25
 9c0:	82 54       	subi	r24, 0x42	; 66
 9c2:	91 09       	sbc	r25, r1
 9c4:	48 17       	cp	r20, r24
 9c6:	59 07       	cpc	r21, r25
 9c8:	90 f4       	brcc	.+36     	; 0x9ee <__stack+0xef>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_POS_0;
 9ca:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 9ce:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 9d2:	0e 94 33 05 	call	0xa66	; 0xa66 <__umulhisi3>
 9d6:	92 95       	swap	r25
 9d8:	82 95       	swap	r24
 9da:	8f 70       	andi	r24, 0x0F	; 15
 9dc:	89 27       	eor	r24, r25
 9de:	9f 70       	andi	r25, 0x0F	; 15
 9e0:	89 27       	eor	r24, r25
 9e2:	82 54       	subi	r24, 0x42	; 66
 9e4:	91 09       	sbc	r25, r1
 9e6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 9ea:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 9ee:	83 ed       	ldi	r24, 0xD3	; 211
 9f0:	90 e3       	ldi	r25, 0x30	; 48
 9f2:	01 97       	sbiw	r24, 0x01	; 1
 9f4:	f1 f7       	brne	.-4      	; 0x9f2 <__stack+0xf3>
 9f6:	00 c0       	rjmp	.+0      	; 0x9f8 <__stack+0xf9>
 9f8:	00 00       	nop
	}
	_delay_ms(50);
 9fa:	df 91       	pop	r29
 9fc:	cf 91       	pop	r28
 9fe:	08 95       	ret

00000a00 <__divmodhi4>:
 a00:	97 fb       	bst	r25, 7
 a02:	07 2e       	mov	r0, r23
 a04:	16 f4       	brtc	.+4      	; 0xa0a <__divmodhi4+0xa>
 a06:	00 94       	com	r0
 a08:	07 d0       	rcall	.+14     	; 0xa18 <__divmodhi4_neg1>
 a0a:	77 fd       	sbrc	r23, 7
 a0c:	09 d0       	rcall	.+18     	; 0xa20 <__divmodhi4_neg2>
 a0e:	0e 94 49 05 	call	0xa92	; 0xa92 <__udivmodhi4>
 a12:	07 fc       	sbrc	r0, 7
 a14:	05 d0       	rcall	.+10     	; 0xa20 <__divmodhi4_neg2>
 a16:	3e f4       	brtc	.+14     	; 0xa26 <__divmodhi4_exit>

00000a18 <__divmodhi4_neg1>:
 a18:	90 95       	com	r25
 a1a:	81 95       	neg	r24
 a1c:	9f 4f       	sbci	r25, 0xFF	; 255
 a1e:	08 95       	ret

00000a20 <__divmodhi4_neg2>:
 a20:	70 95       	com	r23
 a22:	61 95       	neg	r22
 a24:	7f 4f       	sbci	r23, 0xFF	; 255

00000a26 <__divmodhi4_exit>:
 a26:	08 95       	ret

00000a28 <__divmodsi4>:
 a28:	05 2e       	mov	r0, r21
 a2a:	97 fb       	bst	r25, 7
 a2c:	1e f4       	brtc	.+6      	; 0xa34 <__divmodsi4+0xc>
 a2e:	00 94       	com	r0
 a30:	0e 94 2b 05 	call	0xa56	; 0xa56 <__negsi2>
 a34:	57 fd       	sbrc	r21, 7
 a36:	07 d0       	rcall	.+14     	; 0xa46 <__divmodsi4_neg2>
 a38:	0e 94 5d 05 	call	0xaba	; 0xaba <__udivmodsi4>
 a3c:	07 fc       	sbrc	r0, 7
 a3e:	03 d0       	rcall	.+6      	; 0xa46 <__divmodsi4_neg2>
 a40:	4e f4       	brtc	.+18     	; 0xa54 <__divmodsi4_exit>
 a42:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__negsi2>

00000a46 <__divmodsi4_neg2>:
 a46:	50 95       	com	r21
 a48:	40 95       	com	r20
 a4a:	30 95       	com	r19
 a4c:	21 95       	neg	r18
 a4e:	3f 4f       	sbci	r19, 0xFF	; 255
 a50:	4f 4f       	sbci	r20, 0xFF	; 255
 a52:	5f 4f       	sbci	r21, 0xFF	; 255

00000a54 <__divmodsi4_exit>:
 a54:	08 95       	ret

00000a56 <__negsi2>:
 a56:	90 95       	com	r25
 a58:	80 95       	com	r24
 a5a:	70 95       	com	r23
 a5c:	61 95       	neg	r22
 a5e:	7f 4f       	sbci	r23, 0xFF	; 255
 a60:	8f 4f       	sbci	r24, 0xFF	; 255
 a62:	9f 4f       	sbci	r25, 0xFF	; 255
 a64:	08 95       	ret

00000a66 <__umulhisi3>:
 a66:	a2 9f       	mul	r26, r18
 a68:	b0 01       	movw	r22, r0
 a6a:	b3 9f       	mul	r27, r19
 a6c:	c0 01       	movw	r24, r0
 a6e:	a3 9f       	mul	r26, r19
 a70:	70 0d       	add	r23, r0
 a72:	81 1d       	adc	r24, r1
 a74:	11 24       	eor	r1, r1
 a76:	91 1d       	adc	r25, r1
 a78:	b2 9f       	mul	r27, r18
 a7a:	70 0d       	add	r23, r0
 a7c:	81 1d       	adc	r24, r1
 a7e:	11 24       	eor	r1, r1
 a80:	91 1d       	adc	r25, r1
 a82:	08 95       	ret

00000a84 <__usmulhisi3>:
 a84:	0e 94 33 05 	call	0xa66	; 0xa66 <__umulhisi3>

00000a88 <__usmulhisi3_tail>:
 a88:	b7 ff       	sbrs	r27, 7
 a8a:	08 95       	ret
 a8c:	82 1b       	sub	r24, r18
 a8e:	93 0b       	sbc	r25, r19
 a90:	08 95       	ret

00000a92 <__udivmodhi4>:
 a92:	aa 1b       	sub	r26, r26
 a94:	bb 1b       	sub	r27, r27
 a96:	51 e1       	ldi	r21, 0x11	; 17
 a98:	07 c0       	rjmp	.+14     	; 0xaa8 <__udivmodhi4_ep>

00000a9a <__udivmodhi4_loop>:
 a9a:	aa 1f       	adc	r26, r26
 a9c:	bb 1f       	adc	r27, r27
 a9e:	a6 17       	cp	r26, r22
 aa0:	b7 07       	cpc	r27, r23
 aa2:	10 f0       	brcs	.+4      	; 0xaa8 <__udivmodhi4_ep>
 aa4:	a6 1b       	sub	r26, r22
 aa6:	b7 0b       	sbc	r27, r23

00000aa8 <__udivmodhi4_ep>:
 aa8:	88 1f       	adc	r24, r24
 aaa:	99 1f       	adc	r25, r25
 aac:	5a 95       	dec	r21
 aae:	a9 f7       	brne	.-22     	; 0xa9a <__udivmodhi4_loop>
 ab0:	80 95       	com	r24
 ab2:	90 95       	com	r25
 ab4:	bc 01       	movw	r22, r24
 ab6:	cd 01       	movw	r24, r26
 ab8:	08 95       	ret

00000aba <__udivmodsi4>:
 aba:	a1 e2       	ldi	r26, 0x21	; 33
 abc:	1a 2e       	mov	r1, r26
 abe:	aa 1b       	sub	r26, r26
 ac0:	bb 1b       	sub	r27, r27
 ac2:	fd 01       	movw	r30, r26
 ac4:	0d c0       	rjmp	.+26     	; 0xae0 <__udivmodsi4_ep>

00000ac6 <__udivmodsi4_loop>:
 ac6:	aa 1f       	adc	r26, r26
 ac8:	bb 1f       	adc	r27, r27
 aca:	ee 1f       	adc	r30, r30
 acc:	ff 1f       	adc	r31, r31
 ace:	a2 17       	cp	r26, r18
 ad0:	b3 07       	cpc	r27, r19
 ad2:	e4 07       	cpc	r30, r20
 ad4:	f5 07       	cpc	r31, r21
 ad6:	20 f0       	brcs	.+8      	; 0xae0 <__udivmodsi4_ep>
 ad8:	a2 1b       	sub	r26, r18
 ada:	b3 0b       	sbc	r27, r19
 adc:	e4 0b       	sbc	r30, r20
 ade:	f5 0b       	sbc	r31, r21

00000ae0 <__udivmodsi4_ep>:
 ae0:	66 1f       	adc	r22, r22
 ae2:	77 1f       	adc	r23, r23
 ae4:	88 1f       	adc	r24, r24
 ae6:	99 1f       	adc	r25, r25
 ae8:	1a 94       	dec	r1
 aea:	69 f7       	brne	.-38     	; 0xac6 <__udivmodsi4_loop>
 aec:	60 95       	com	r22
 aee:	70 95       	com	r23
 af0:	80 95       	com	r24
 af2:	90 95       	com	r25
 af4:	9b 01       	movw	r18, r22
 af6:	ac 01       	movw	r20, r24
 af8:	bd 01       	movw	r22, r26
 afa:	cf 01       	movw	r24, r30
 afc:	08 95       	ret

00000afe <_exit>:
 afe:	f8 94       	cli

00000b00 <__stop_program>:
 b00:	ff cf       	rjmp	.-2      	; 0xb00 <__stop_program>
