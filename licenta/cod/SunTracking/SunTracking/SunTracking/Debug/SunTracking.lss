
SunTracking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000678  00800100  00001072  00001106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001072  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800778  00800778  0000177e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000177e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000039cc  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001007  00000000  00000000  000053bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001434  00000000  00000000  000063c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  000077f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085d  00000000  00000000  00007ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d44  00000000  00000000  000083fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00009141  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	17 e0       	ldi	r17, 0x07	; 7
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e7       	ldi	r30, 0x72	; 114
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 37       	cpi	r26, 0x78	; 120
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a8 e7       	ldi	r26, 0x78	; 120
      8e:	b7 e0       	ldi	r27, 0x07	; 7
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 38       	cpi	r26, 0x8E	; 142
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <main>
      9e:	0c 94 37 08 	jmp	0x106e	; 0x106e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
      a6:	17 b8       	out	0x07, r1	; 7
      a8:	80 e4       	ldi	r24, 0x40	; 64
      aa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
      ae:	87 e8       	ldi	r24, 0x87	; 135
      b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
      b4:	08 95       	ret

000000b6 <ADC_get_value>:
      b6:	ec e7       	ldi	r30, 0x7C	; 124
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	90 81       	ld	r25, Z
      bc:	98 7f       	andi	r25, 0xF8	; 248
      be:	87 70       	andi	r24, 0x07	; 7
      c0:	89 2b       	or	r24, r25
      c2:	80 83       	st	Z, r24
      c4:	ea e7       	ldi	r30, 0x7A	; 122
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	80 81       	ld	r24, Z
      ca:	80 64       	ori	r24, 0x40	; 64
      cc:	80 83       	st	Z, r24
      ce:	80 81       	ld	r24, Z
      d0:	86 fd       	sbrc	r24, 6
      d2:	fd cf       	rjmp	.-6      	; 0xce <ADC_get_value+0x18>
      d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      d8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      dc:	08 95       	ret

000000de <display_title>:
#include "joystick_driver.h"
#include <stdlib.h>

void display_title(void)
{
	hx_set_coordinates(0, 0);
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	80 e0       	ldi	r24, 0x00	; 0
      e2:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("AutoTracking LDR");
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	91 e0       	ldi	r25, 0x01	; 1
      ea:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
	hx_set_coordinates(0, 1);
      ee:	61 e0       	ldi	r22, 0x01	; 1
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("  ScorpionIPX");
      f6:	81 e1       	ldi	r24, 0x11	; 17
      f8:	91 e0       	ldi	r25, 0x01	; 1
      fa:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
      fe:	08 95       	ret

00000100 <display_data_menu>:
}

void display_data_menu(void)
{
	hx_set_coordinates(0, 3);
     100:	63 e0       	ldi	r22, 0x03	; 3
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("       ||");
     108:	8f e1       	ldi	r24, 0x1F	; 31
     10a:	91 e0       	ldi	r25, 0x01	; 1
     10c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
	hx_set_coordinates(0, 4);
     110:	64 e0       	ldi	r22, 0x04	; 4
     112:	80 e0       	ldi	r24, 0x00	; 0
     114:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("================");
     118:	89 e2       	ldi	r24, 0x29	; 41
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
	hx_set_coordinates(0, 5);
     120:	65 e0       	ldi	r22, 0x05	; 5
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("       ||");
     128:	8f e1       	ldi	r24, 0x1F	; 31
     12a:	91 e0       	ldi	r25, 0x01	; 1
     12c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
     130:	08 95       	ret

00000132 <display_light_sensor_data>:
}

void display_light_sensor_data(uint8_t sensor, int data)
{
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
     136:	eb 01       	movw	r28, r22
	//hx_set_coordinates(60, 3 + sensor);
	hx_set_coordinates(24 + 36 * (sensor & 1), 3 + 2 * (sensor >> 1));
     138:	68 2f       	mov	r22, r24
     13a:	6e 7f       	andi	r22, 0xFE	; 254
     13c:	6d 5f       	subi	r22, 0xFD	; 253
     13e:	81 70       	andi	r24, 0x01	; 1
     140:	94 e2       	ldi	r25, 0x24	; 36
     142:	89 9f       	mul	r24, r25
     144:	80 2d       	mov	r24, r0
     146:	11 24       	eor	r1, r1
     148:	88 5e       	subi	r24, 0xE8	; 232
     14a:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	
	// hx_write_char('0' + ((data / 100) % 10));
	hx_write_char('0' + ((data / 10) % 10));
     14e:	2a e0       	ldi	r18, 0x0A	; 10
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	ce 01       	movw	r24, r28
     154:	b9 01       	movw	r22, r18
     156:	0e 94 b8 07 	call	0xf70	; 0xf70 <__divmodhi4>
     15a:	c8 2f       	mov	r28, r24
     15c:	cb 01       	movw	r24, r22
     15e:	b9 01       	movw	r22, r18
     160:	0e 94 b8 07 	call	0xf70	; 0xf70 <__divmodhi4>
     164:	80 5d       	subi	r24, 0xD0	; 208
     166:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + (data % 10));
     16a:	80 e3       	ldi	r24, 0x30	; 48
     16c:	8c 0f       	add	r24, r28
     16e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	
	hx_set_coordinates(18, 7);
     172:	67 e0       	ldi	r22, 0x07	; 7
     174:	82 e1       	ldi	r24, 0x12	; 18
     176:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_char('0' + OCR1A / 100);
     17a:	c8 e8       	ldi	r28, 0x88	; 136
     17c:	d0 e0       	ldi	r29, 0x00	; 0
     17e:	28 81       	ld	r18, Y
     180:	39 81       	ldd	r19, Y+1	; 0x01
     182:	36 95       	lsr	r19
     184:	27 95       	ror	r18
     186:	36 95       	lsr	r19
     188:	27 95       	ror	r18
     18a:	ab e7       	ldi	r26, 0x7B	; 123
     18c:	b4 e1       	ldi	r27, 0x14	; 20
     18e:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     192:	96 95       	lsr	r25
     194:	87 95       	ror	r24
     196:	80 5d       	subi	r24, 0xD0	; 208
     198:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + (OCR1A / 10) % 10);
     19c:	28 81       	ld	r18, Y
     19e:	39 81       	ldd	r19, Y+1	; 0x01
     1a0:	ad ec       	ldi	r26, 0xCD	; 205
     1a2:	bc ec       	ldi	r27, 0xCC	; 204
     1a4:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     1a8:	ac 01       	movw	r20, r24
     1aa:	56 95       	lsr	r21
     1ac:	47 95       	ror	r20
     1ae:	56 95       	lsr	r21
     1b0:	47 95       	ror	r20
     1b2:	56 95       	lsr	r21
     1b4:	47 95       	ror	r20
     1b6:	9a 01       	movw	r18, r20
     1b8:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     1bc:	96 95       	lsr	r25
     1be:	87 95       	ror	r24
     1c0:	96 95       	lsr	r25
     1c2:	87 95       	ror	r24
     1c4:	96 95       	lsr	r25
     1c6:	87 95       	ror	r24
     1c8:	9c 01       	movw	r18, r24
     1ca:	22 0f       	add	r18, r18
     1cc:	33 1f       	adc	r19, r19
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	88 0f       	add	r24, r24
     1d4:	99 1f       	adc	r25, r25
     1d6:	88 0f       	add	r24, r24
     1d8:	99 1f       	adc	r25, r25
     1da:	82 0f       	add	r24, r18
     1dc:	93 1f       	adc	r25, r19
     1de:	9a 01       	movw	r18, r20
     1e0:	28 1b       	sub	r18, r24
     1e2:	39 0b       	sbc	r19, r25
     1e4:	c9 01       	movw	r24, r18
     1e6:	80 5d       	subi	r24, 0xD0	; 208
     1e8:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + OCR1A % 10);
     1ec:	48 81       	ld	r20, Y
     1ee:	59 81       	ldd	r21, Y+1	; 0x01
     1f0:	9a 01       	movw	r18, r20
     1f2:	ad ec       	ldi	r26, 0xCD	; 205
     1f4:	bc ec       	ldi	r27, 0xCC	; 204
     1f6:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     1fa:	96 95       	lsr	r25
     1fc:	87 95       	ror	r24
     1fe:	96 95       	lsr	r25
     200:	87 95       	ror	r24
     202:	96 95       	lsr	r25
     204:	87 95       	ror	r24
     206:	9c 01       	movw	r18, r24
     208:	22 0f       	add	r18, r18
     20a:	33 1f       	adc	r19, r19
     20c:	88 0f       	add	r24, r24
     20e:	99 1f       	adc	r25, r25
     210:	88 0f       	add	r24, r24
     212:	99 1f       	adc	r25, r25
     214:	88 0f       	add	r24, r24
     216:	99 1f       	adc	r25, r25
     218:	82 0f       	add	r24, r18
     21a:	93 1f       	adc	r25, r19
     21c:	9a 01       	movw	r18, r20
     21e:	28 1b       	sub	r18, r24
     220:	39 0b       	sbc	r19, r25
     222:	c9 01       	movw	r24, r18
     224:	80 5d       	subi	r24, 0xD0	; 208
     226:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	
	hx_set_coordinates(66, 7);
     22a:	67 e0       	ldi	r22, 0x07	; 7
     22c:	82 e4       	ldi	r24, 0x42	; 66
     22e:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_char('0' + OCR1B / 100);
     232:	ca e8       	ldi	r28, 0x8A	; 138
     234:	d0 e0       	ldi	r29, 0x00	; 0
     236:	28 81       	ld	r18, Y
     238:	39 81       	ldd	r19, Y+1	; 0x01
     23a:	36 95       	lsr	r19
     23c:	27 95       	ror	r18
     23e:	36 95       	lsr	r19
     240:	27 95       	ror	r18
     242:	ab e7       	ldi	r26, 0x7B	; 123
     244:	b4 e1       	ldi	r27, 0x14	; 20
     246:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     24a:	96 95       	lsr	r25
     24c:	87 95       	ror	r24
     24e:	80 5d       	subi	r24, 0xD0	; 208
     250:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + (OCR1B / 10) % 10);
     254:	28 81       	ld	r18, Y
     256:	39 81       	ldd	r19, Y+1	; 0x01
     258:	ad ec       	ldi	r26, 0xCD	; 205
     25a:	bc ec       	ldi	r27, 0xCC	; 204
     25c:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     260:	ac 01       	movw	r20, r24
     262:	56 95       	lsr	r21
     264:	47 95       	ror	r20
     266:	56 95       	lsr	r21
     268:	47 95       	ror	r20
     26a:	56 95       	lsr	r21
     26c:	47 95       	ror	r20
     26e:	9a 01       	movw	r18, r20
     270:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     274:	96 95       	lsr	r25
     276:	87 95       	ror	r24
     278:	96 95       	lsr	r25
     27a:	87 95       	ror	r24
     27c:	96 95       	lsr	r25
     27e:	87 95       	ror	r24
     280:	9c 01       	movw	r18, r24
     282:	22 0f       	add	r18, r18
     284:	33 1f       	adc	r19, r19
     286:	88 0f       	add	r24, r24
     288:	99 1f       	adc	r25, r25
     28a:	88 0f       	add	r24, r24
     28c:	99 1f       	adc	r25, r25
     28e:	88 0f       	add	r24, r24
     290:	99 1f       	adc	r25, r25
     292:	82 0f       	add	r24, r18
     294:	93 1f       	adc	r25, r19
     296:	9a 01       	movw	r18, r20
     298:	28 1b       	sub	r18, r24
     29a:	39 0b       	sbc	r19, r25
     29c:	c9 01       	movw	r24, r18
     29e:	80 5d       	subi	r24, 0xD0	; 208
     2a0:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + OCR1B % 10);
     2a4:	48 81       	ld	r20, Y
     2a6:	59 81       	ldd	r21, Y+1	; 0x01
     2a8:	9a 01       	movw	r18, r20
     2aa:	ad ec       	ldi	r26, 0xCD	; 205
     2ac:	bc ec       	ldi	r27, 0xCC	; 204
     2ae:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     2b2:	96 95       	lsr	r25
     2b4:	87 95       	ror	r24
     2b6:	96 95       	lsr	r25
     2b8:	87 95       	ror	r24
     2ba:	96 95       	lsr	r25
     2bc:	87 95       	ror	r24
     2be:	9c 01       	movw	r18, r24
     2c0:	22 0f       	add	r18, r18
     2c2:	33 1f       	adc	r19, r19
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	88 0f       	add	r24, r24
     2ca:	99 1f       	adc	r25, r25
     2cc:	88 0f       	add	r24, r24
     2ce:	99 1f       	adc	r25, r25
     2d0:	82 0f       	add	r24, r18
     2d2:	93 1f       	adc	r25, r19
     2d4:	9a 01       	movw	r18, r20
     2d6:	28 1b       	sub	r18, r24
     2d8:	39 0b       	sbc	r19, r25
     2da:	c9 01       	movw	r24, r18
     2dc:	80 5d       	subi	r24, 0xD0	; 208
     2de:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
}
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <display_idle_state_message>:

void display_idle_state_message(void)
{
	hx_set_coordinates(0, 3);
     2e8:	63 e0       	ldi	r22, 0x03	; 3
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("- system is in ");
     2f0:	8a e3       	ldi	r24, 0x3A	; 58
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
	hx_set_coordinates(0, 4);
     2f8:	64 e0       	ldi	r22, 0x04	; 4
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("IDLE mode");
     300:	8a e4       	ldi	r24, 0x4A	; 74
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
	hx_set_coordinates(0, 6);
     308:	66 e0       	ldi	r22, 0x06	; 6
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("going to sleep");
     310:	84 e5       	ldi	r24, 0x54	; 84
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
     318:	08 95       	ret

0000031a <display_manual_state_message>:
}


void display_manual_state_message(void)
{
	hx_set_coordinates(0, 3);
     31a:	63 e0       	ldi	r22, 0x03	; 3
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("- system is in ");
     322:	8a e3       	ldi	r24, 0x3A	; 58
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
	hx_set_coordinates(0, 4);
     32a:	64 e0       	ldi	r22, 0x04	; 4
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("MANUAL mode");
     332:	83 e6       	ldi	r24, 0x63	; 99
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
	
	hx_set_coordinates(0, 6);
     33a:	66 e0       	ldi	r22, 0x06	; 6
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("JX:");
     342:	8f e6       	ldi	r24, 0x6F	; 111
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
	hx_set_coordinates(0, 7);
     34a:	67 e0       	ldi	r22, 0x07	; 7
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("JY:");
     352:	83 e7       	ldi	r24, 0x73	; 115
     354:	91 e0       	ldi	r25, 0x01	; 1
     356:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
     35a:	08 95       	ret

0000035c <display_joystick_data>:
}

void display_joystick_data(unsigned int x, unsigned int y)
{	 
     35c:	ef 92       	push	r14
     35e:	ff 92       	push	r15
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	7c 01       	movw	r14, r24
     36a:	8b 01       	movw	r16, r22
	hx_set_coordinates(24, 6);
     36c:	66 e0       	ldi	r22, 0x06	; 6
     36e:	88 e1       	ldi	r24, 0x18	; 24
     370:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	
	hx_write_char('0' + x / 1000);
     374:	97 01       	movw	r18, r14
     376:	36 95       	lsr	r19
     378:	27 95       	ror	r18
     37a:	36 95       	lsr	r19
     37c:	27 95       	ror	r18
     37e:	36 95       	lsr	r19
     380:	27 95       	ror	r18
     382:	a5 ec       	ldi	r26, 0xC5	; 197
     384:	b0 e2       	ldi	r27, 0x20	; 32
     386:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     38a:	92 95       	swap	r25
     38c:	82 95       	swap	r24
     38e:	8f 70       	andi	r24, 0x0F	; 15
     390:	89 27       	eor	r24, r25
     392:	9f 70       	andi	r25, 0x0F	; 15
     394:	89 27       	eor	r24, r25
     396:	80 5d       	subi	r24, 0xD0	; 208
     398:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + (x / 100) % 10);
     39c:	97 01       	movw	r18, r14
     39e:	36 95       	lsr	r19
     3a0:	27 95       	ror	r18
     3a2:	36 95       	lsr	r19
     3a4:	27 95       	ror	r18
     3a6:	ab e7       	ldi	r26, 0x7B	; 123
     3a8:	b4 e1       	ldi	r27, 0x14	; 20
     3aa:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     3ae:	ac 01       	movw	r20, r24
     3b0:	56 95       	lsr	r21
     3b2:	47 95       	ror	r20
     3b4:	9a 01       	movw	r18, r20
     3b6:	ad ec       	ldi	r26, 0xCD	; 205
     3b8:	bc ec       	ldi	r27, 0xCC	; 204
     3ba:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     3be:	96 95       	lsr	r25
     3c0:	87 95       	ror	r24
     3c2:	96 95       	lsr	r25
     3c4:	87 95       	ror	r24
     3c6:	96 95       	lsr	r25
     3c8:	87 95       	ror	r24
     3ca:	9c 01       	movw	r18, r24
     3cc:	22 0f       	add	r18, r18
     3ce:	33 1f       	adc	r19, r19
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	82 0f       	add	r24, r18
     3de:	93 1f       	adc	r25, r19
     3e0:	9a 01       	movw	r18, r20
     3e2:	28 1b       	sub	r18, r24
     3e4:	39 0b       	sbc	r19, r25
     3e6:	c9 01       	movw	r24, r18
     3e8:	80 5d       	subi	r24, 0xD0	; 208
     3ea:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + (x / 10) % 10);
     3ee:	97 01       	movw	r18, r14
     3f0:	ad ec       	ldi	r26, 0xCD	; 205
     3f2:	bc ec       	ldi	r27, 0xCC	; 204
     3f4:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     3f8:	ec 01       	movw	r28, r24
     3fa:	d6 95       	lsr	r29
     3fc:	c7 95       	ror	r28
     3fe:	d6 95       	lsr	r29
     400:	c7 95       	ror	r28
     402:	d6 95       	lsr	r29
     404:	c7 95       	ror	r28
     406:	9e 01       	movw	r18, r28
     408:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     40c:	96 95       	lsr	r25
     40e:	87 95       	ror	r24
     410:	96 95       	lsr	r25
     412:	87 95       	ror	r24
     414:	96 95       	lsr	r25
     416:	87 95       	ror	r24
     418:	9c 01       	movw	r18, r24
     41a:	22 0f       	add	r18, r18
     41c:	33 1f       	adc	r19, r19
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	88 0f       	add	r24, r24
     428:	99 1f       	adc	r25, r25
     42a:	82 0f       	add	r24, r18
     42c:	93 1f       	adc	r25, r19
     42e:	9e 01       	movw	r18, r28
     430:	28 1b       	sub	r18, r24
     432:	39 0b       	sbc	r19, r25
     434:	c9 01       	movw	r24, r18
     436:	80 5d       	subi	r24, 0xD0	; 208
     438:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + x % 10);
     43c:	ce 01       	movw	r24, r28
     43e:	88 0f       	add	r24, r24
     440:	99 1f       	adc	r25, r25
     442:	cc 0f       	add	r28, r28
     444:	dd 1f       	adc	r29, r29
     446:	cc 0f       	add	r28, r28
     448:	dd 1f       	adc	r29, r29
     44a:	cc 0f       	add	r28, r28
     44c:	dd 1f       	adc	r29, r29
     44e:	c8 0f       	add	r28, r24
     450:	d9 1f       	adc	r29, r25
     452:	c7 01       	movw	r24, r14
     454:	8c 1b       	sub	r24, r28
     456:	9d 0b       	sbc	r25, r29
     458:	80 5d       	subi	r24, 0xD0	; 208
     45a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	
	hx_set_coordinates(24, 7);
     45e:	67 e0       	ldi	r22, 0x07	; 7
     460:	88 e1       	ldi	r24, 0x18	; 24
     462:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	
	hx_write_char('0' + y / 1000);
     466:	98 01       	movw	r18, r16
     468:	36 95       	lsr	r19
     46a:	27 95       	ror	r18
     46c:	36 95       	lsr	r19
     46e:	27 95       	ror	r18
     470:	36 95       	lsr	r19
     472:	27 95       	ror	r18
     474:	a5 ec       	ldi	r26, 0xC5	; 197
     476:	b0 e2       	ldi	r27, 0x20	; 32
     478:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     47c:	92 95       	swap	r25
     47e:	82 95       	swap	r24
     480:	8f 70       	andi	r24, 0x0F	; 15
     482:	89 27       	eor	r24, r25
     484:	9f 70       	andi	r25, 0x0F	; 15
     486:	89 27       	eor	r24, r25
     488:	80 5d       	subi	r24, 0xD0	; 208
     48a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + (y / 100) % 10);
     48e:	98 01       	movw	r18, r16
     490:	36 95       	lsr	r19
     492:	27 95       	ror	r18
     494:	36 95       	lsr	r19
     496:	27 95       	ror	r18
     498:	ab e7       	ldi	r26, 0x7B	; 123
     49a:	b4 e1       	ldi	r27, 0x14	; 20
     49c:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     4a0:	ac 01       	movw	r20, r24
     4a2:	56 95       	lsr	r21
     4a4:	47 95       	ror	r20
     4a6:	9a 01       	movw	r18, r20
     4a8:	ad ec       	ldi	r26, 0xCD	; 205
     4aa:	bc ec       	ldi	r27, 0xCC	; 204
     4ac:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     4b0:	96 95       	lsr	r25
     4b2:	87 95       	ror	r24
     4b4:	96 95       	lsr	r25
     4b6:	87 95       	ror	r24
     4b8:	96 95       	lsr	r25
     4ba:	87 95       	ror	r24
     4bc:	9c 01       	movw	r18, r24
     4be:	22 0f       	add	r18, r18
     4c0:	33 1f       	adc	r19, r19
     4c2:	88 0f       	add	r24, r24
     4c4:	99 1f       	adc	r25, r25
     4c6:	88 0f       	add	r24, r24
     4c8:	99 1f       	adc	r25, r25
     4ca:	88 0f       	add	r24, r24
     4cc:	99 1f       	adc	r25, r25
     4ce:	82 0f       	add	r24, r18
     4d0:	93 1f       	adc	r25, r19
     4d2:	9a 01       	movw	r18, r20
     4d4:	28 1b       	sub	r18, r24
     4d6:	39 0b       	sbc	r19, r25
     4d8:	c9 01       	movw	r24, r18
     4da:	80 5d       	subi	r24, 0xD0	; 208
     4dc:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + (y / 10) % 10);
     4e0:	98 01       	movw	r18, r16
     4e2:	ad ec       	ldi	r26, 0xCD	; 205
     4e4:	bc ec       	ldi	r27, 0xCC	; 204
     4e6:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     4ea:	ec 01       	movw	r28, r24
     4ec:	d6 95       	lsr	r29
     4ee:	c7 95       	ror	r28
     4f0:	d6 95       	lsr	r29
     4f2:	c7 95       	ror	r28
     4f4:	d6 95       	lsr	r29
     4f6:	c7 95       	ror	r28
     4f8:	9e 01       	movw	r18, r28
     4fa:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     4fe:	96 95       	lsr	r25
     500:	87 95       	ror	r24
     502:	96 95       	lsr	r25
     504:	87 95       	ror	r24
     506:	96 95       	lsr	r25
     508:	87 95       	ror	r24
     50a:	9c 01       	movw	r18, r24
     50c:	22 0f       	add	r18, r18
     50e:	33 1f       	adc	r19, r19
     510:	88 0f       	add	r24, r24
     512:	99 1f       	adc	r25, r25
     514:	88 0f       	add	r24, r24
     516:	99 1f       	adc	r25, r25
     518:	88 0f       	add	r24, r24
     51a:	99 1f       	adc	r25, r25
     51c:	82 0f       	add	r24, r18
     51e:	93 1f       	adc	r25, r19
     520:	9e 01       	movw	r18, r28
     522:	28 1b       	sub	r18, r24
     524:	39 0b       	sbc	r19, r25
     526:	c9 01       	movw	r24, r18
     528:	80 5d       	subi	r24, 0xD0	; 208
     52a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + y % 10);
     52e:	ce 01       	movw	r24, r28
     530:	88 0f       	add	r24, r24
     532:	99 1f       	adc	r25, r25
     534:	cc 0f       	add	r28, r28
     536:	dd 1f       	adc	r29, r29
     538:	cc 0f       	add	r28, r28
     53a:	dd 1f       	adc	r29, r29
     53c:	cc 0f       	add	r28, r28
     53e:	dd 1f       	adc	r29, r29
     540:	c8 0f       	add	r28, r24
     542:	d9 1f       	adc	r29, r25
     544:	c8 01       	movw	r24, r16
     546:	8c 1b       	sub	r24, r28
     548:	9d 0b       	sbc	r25, r29
     54a:	80 5d       	subi	r24, 0xD0	; 208
     54c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	ff 90       	pop	r15
     55a:	ef 90       	pop	r14
     55c:	08 95       	ret

0000055e <hx_send_data>:
}

void hx_send_data(unsigned char _data)
{
	// activate hx1230
	CLEAR_HX_CE;
     55e:	5d 98       	cbi	0x0b, 5	; 11
	
	// configure communication for data transfer
	SET_HX_DIN;
     560:	59 9a       	sbi	0x0b, 1	; 11
	
	// toggle clock
	SET_HX_CLK;
     562:	58 9a       	sbi	0x0b, 0	; 11
	CLEAR_HX_CLK;
     564:	58 98       	cbi	0x0b, 0	; 11
	
	// send the actual data, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
     566:	27 e0       	ldi	r18, 0x07	; 7
     568:	30 e0       	ldi	r19, 0x00	; 0
	{
		// calculate bit to be send
		if(((_data >> bit_position) & 1) == 1)
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	ac 01       	movw	r20, r24
     56e:	02 2e       	mov	r0, r18
     570:	02 c0       	rjmp	.+4      	; 0x576 <hx_send_data+0x18>
     572:	55 95       	asr	r21
     574:	47 95       	ror	r20
     576:	0a 94       	dec	r0
     578:	e2 f7       	brpl	.-8      	; 0x572 <hx_send_data+0x14>
     57a:	40 ff       	sbrs	r20, 0
     57c:	02 c0       	rjmp	.+4      	; 0x582 <hx_send_data+0x24>
		{
			SET_HX_DIN;
     57e:	59 9a       	sbi	0x0b, 1	; 11
     580:	01 c0       	rjmp	.+2      	; 0x584 <hx_send_data+0x26>
		}
		else
		{
			CLEAR_HX_DIN;
     582:	59 98       	cbi	0x0b, 1	; 11
		}
		
		// toggle clock
		SET_HX_CLK;
     584:	58 9a       	sbi	0x0b, 0	; 11
		CLEAR_HX_CLK;
     586:	58 98       	cbi	0x0b, 0	; 11
	// toggle clock
	SET_HX_CLK;
	CLEAR_HX_CLK;
	
	// send the actual data, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
     588:	21 50       	subi	r18, 0x01	; 1
     58a:	31 09       	sbc	r19, r1
     58c:	78 f7       	brcc	.-34     	; 0x56c <hx_send_data+0xe>
		SET_HX_CLK;
		CLEAR_HX_CLK;
	}
	
	// deactivate hx1230
	SET_HX_CE;
     58e:	5d 9a       	sbi	0x0b, 5	; 11
     590:	08 95       	ret

00000592 <hx_send_command>:
}

void hx_send_command(unsigned char _command)
{
	// activate hx1230
	CLEAR_HX_CE;
     592:	5d 98       	cbi	0x0b, 5	; 11
	
	// configure communication for command transfer
	CLEAR_HX_DIN;
     594:	59 98       	cbi	0x0b, 1	; 11
	
	// toggle clock
	SET_HX_CLK;
     596:	58 9a       	sbi	0x0b, 0	; 11
	CLEAR_HX_CLK;
     598:	58 98       	cbi	0x0b, 0	; 11
	
	// send the actual command, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
     59a:	27 e0       	ldi	r18, 0x07	; 7
     59c:	30 e0       	ldi	r19, 0x00	; 0
	{
		// calculate bit to be send
		if(((_command >> bit_position) & 1) == 1)
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	ac 01       	movw	r20, r24
     5a2:	02 2e       	mov	r0, r18
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <hx_send_command+0x18>
     5a6:	55 95       	asr	r21
     5a8:	47 95       	ror	r20
     5aa:	0a 94       	dec	r0
     5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <hx_send_command+0x14>
     5ae:	40 ff       	sbrs	r20, 0
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <hx_send_command+0x24>
		{
			SET_HX_DIN;
     5b2:	59 9a       	sbi	0x0b, 1	; 11
     5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <hx_send_command+0x26>
		}
		else
		{
			CLEAR_HX_DIN;
     5b6:	59 98       	cbi	0x0b, 1	; 11
		}
		
		// toggle clock
		SET_HX_CLK;
     5b8:	58 9a       	sbi	0x0b, 0	; 11
		CLEAR_HX_CLK;
     5ba:	58 98       	cbi	0x0b, 0	; 11
	// toggle clock
	SET_HX_CLK;
	CLEAR_HX_CLK;
	
	// send the actual command, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
     5bc:	21 50       	subi	r18, 0x01	; 1
     5be:	31 09       	sbc	r19, r1
     5c0:	78 f7       	brcc	.-34     	; 0x5a0 <hx_send_command+0xe>
		SET_HX_CLK;
		CLEAR_HX_CLK;
	}
	
	// deactivate hx1230
	SET_HX_CE;
     5c2:	5d 9a       	sbi	0x0b, 5	; 11
     5c4:	08 95       	ret

000005c6 <init_hx1230_control>:


void init_hx1230_control(void)
{
	// set required pins as output
	HX1230_DDR |= ((1 << HX_RST) | (1 << HX_CE) | (1 << HX_DIN) | (1 << HX_CLK));
     5c6:	8a b1       	in	r24, 0x0a	; 10
     5c8:	83 66       	ori	r24, 0x63	; 99
     5ca:	8a b9       	out	0x0a, r24	; 10
	
	// set idle state
	CLEAR_HX_CLK;
     5cc:	58 98       	cbi	0x0b, 0	; 11
	CLEAR_HX_RST;
     5ce:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d0:	83 ed       	ldi	r24, 0xD3	; 211
     5d2:	90 e3       	ldi	r25, 0x30	; 48
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <init_hx1230_control+0xe>
     5d8:	00 c0       	rjmp	.+0      	; 0x5da <init_hx1230_control+0x14>
     5da:	00 00       	nop
	_delay_ms(50);
	SET_HX_RST;
     5dc:	5e 9a       	sbi	0x0b, 6	; 11
	CLEAR_HX_CE;
     5de:	5d 98       	cbi	0x0b, 5	; 11
     5e0:	89 ef       	ldi	r24, 0xF9	; 249
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <init_hx1230_control+0x1e>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <init_hx1230_control+0x24>
     5ea:	00 00       	nop
	_delay_ms(1);
	SET_HX_CE;
     5ec:	5d 9a       	sbi	0x0b, 5	; 11
     5ee:	89 ef       	ldi	r24, 0xF9	; 249
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	01 97       	sbiw	r24, 0x01	; 1
     5f4:	f1 f7       	brne	.-4      	; 0x5f2 <init_hx1230_control+0x2c>
     5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <init_hx1230_control+0x32>
     5f8:	00 00       	nop
	_delay_ms(1);
	
	// commands needed to initialize hx1230 display
	// found within a chinese data sheet
	
	hx_send_command(0x2f);
     5fa:	8f e2       	ldi	r24, 0x2F	; 47
     5fc:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
	hx_send_command(0x90);
     600:	80 e9       	ldi	r24, 0x90	; 144
     602:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
	hx_send_command(0xa6);
     606:	86 ea       	ldi	r24, 0xA6	; 166
     608:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
	hx_send_command(0xa4);
     60c:	84 ea       	ldi	r24, 0xA4	; 164
     60e:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
	hx_send_command(0xaf);
     612:	8f ea       	ldi	r24, 0xAF	; 175
     614:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
	
	hx_send_command(0x40);
     618:	80 e4       	ldi	r24, 0x40	; 64
     61a:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
	hx_send_command(0xb0);
     61e:	80 eb       	ldi	r24, 0xB0	; 176
     620:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
	hx_send_command(0x10);
     624:	80 e1       	ldi	r24, 0x10	; 16
     626:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
	hx_send_command(0x00);
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
     630:	08 95       	ret

00000632 <hx_set_coordinates>:
	// deactivate hx1230
	SET_HX_CE;
}

void hx_set_coordinates(unsigned char _x, unsigned char _y)
{
     632:	cf 93       	push	r28
     634:	c8 2f       	mov	r28, r24
	// 0, 0 is the upper left corner
	
	hx_send_command(0xB0 + _y);
     636:	80 eb       	ldi	r24, 0xB0	; 176
     638:	86 0f       	add	r24, r22
     63a:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
	hx_send_command(0x10 | ((_x & 0x7F) >> 4));
     63e:	8c 2f       	mov	r24, r28
     640:	8f 77       	andi	r24, 0x7F	; 127
     642:	82 95       	swap	r24
     644:	8f 70       	andi	r24, 0x0F	; 15
     646:	80 61       	ori	r24, 0x10	; 16
     648:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
	hx_send_command(0x0F & _x);
     64c:	8c 2f       	mov	r24, r28
     64e:	8f 70       	andi	r24, 0x0F	; 15
     650:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
}
     654:	cf 91       	pop	r28
     656:	08 95       	ret

00000658 <hx_clear_screen>:

void hx_clear_screen(void)
{
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
     664:	d9 e0       	ldi	r29, 0x09	; 9
     666:	07 c0       	rjmp	.+14     	; 0x676 <hx_clear_screen+0x1e>
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
	{
		for(col = 0; col <= HX_MAX_COL; col ++)
		{
			hx_send_data(0x00);
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	0e 94 af 02 	call	0x55e	; 0x55e <hx_send_data>
     66e:	c1 50       	subi	r28, 0x01	; 1
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
	{
		for(col = 0; col <= HX_MAX_COL; col ++)
     670:	d9 f7       	brne	.-10     	; 0x668 <hx_clear_screen+0x10>
     672:	d1 50       	subi	r29, 0x01	; 1
{
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
     674:	11 f0       	breq	.+4      	; 0x67a <hx_clear_screen+0x22>
	hx_send_command(0x10 | ((_x & 0x7F) >> 4));
	hx_send_command(0x0F & _x);
}

void hx_clear_screen(void)
{
     676:	c1 e6       	ldi	r28, 0x61	; 97
     678:	f7 cf       	rjmp	.-18     	; 0x668 <hx_clear_screen+0x10>
		for(col = 0; col <= HX_MAX_COL; col ++)
		{
			hx_send_data(0x00);
		}
	}
}
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	08 95       	ret

00000680 <hx_fill_screen>:

void hx_fill_screen(void)
{
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
     68c:	d9 e0       	ldi	r29, 0x09	; 9
     68e:	07 c0       	rjmp	.+14     	; 0x69e <hx_fill_screen+0x1e>
	
	for(row = 0; row < 9; row ++)
	{
		for(col = 0; col < 96; col ++)
		{
			hx_send_data(0xFF);
     690:	8f ef       	ldi	r24, 0xFF	; 255
     692:	0e 94 af 02 	call	0x55e	; 0x55e <hx_send_data>
     696:	c1 50       	subi	r28, 0x01	; 1
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row < 9; row ++)
	{
		for(col = 0; col < 96; col ++)
     698:	d9 f7       	brne	.-10     	; 0x690 <hx_fill_screen+0x10>
     69a:	d1 50       	subi	r29, 0x01	; 1
{
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row < 9; row ++)
     69c:	11 f0       	breq	.+4      	; 0x6a2 <hx_fill_screen+0x22>
		}
	}
}

void hx_fill_screen(void)
{
     69e:	c0 e6       	ldi	r28, 0x60	; 96
     6a0:	f7 cf       	rjmp	.-18     	; 0x690 <hx_fill_screen+0x10>
		for(col = 0; col < 96; col ++)
		{
			hx_send_data(0xFF);
		}
	}
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret

000006a8 <hx_write_char>:

void hx_write_char(const unsigned char _character)
{
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	ec 01       	movw	r28, r24
     6b4:	cc 0f       	add	r28, r28
     6b6:	dd 1f       	adc	r29, r29
     6b8:	c8 0f       	add	r28, r24
     6ba:	d9 1f       	adc	r29, r25
     6bc:	cc 0f       	add	r28, r28
     6be:	dd 1f       	adc	r29, r29
     6c0:	c9 58       	subi	r28, 0x89	; 137
     6c2:	de 4f       	sbci	r29, 0xFE	; 254
     6c4:	01 96       	adiw	r24, 0x01	; 1
     6c6:	8c 01       	movw	r16, r24
     6c8:	00 0f       	add	r16, r16
     6ca:	11 1f       	adc	r17, r17
     6cc:	80 0f       	add	r24, r16
     6ce:	91 1f       	adc	r25, r17
     6d0:	8c 01       	movw	r16, r24
     6d2:	00 0f       	add	r16, r16
     6d4:	11 1f       	adc	r17, r17
     6d6:	09 58       	subi	r16, 0x89	; 137
     6d8:	1e 4f       	sbci	r17, 0xFE	; 254
	
	for(int row_index = 0; row_index < 6; row_index ++)
	{
		hx_send_data(HX_character[_character][row_index]);
     6da:	89 91       	ld	r24, Y+
     6dc:	0e 94 af 02 	call	0x55e	; 0x55e <hx_send_data>
}

void hx_write_char(const unsigned char _character)
{
	
	for(int row_index = 0; row_index < 6; row_index ++)
     6e0:	c0 17       	cp	r28, r16
     6e2:	d1 07       	cpc	r29, r17
     6e4:	d1 f7       	brne	.-12     	; 0x6da <hx_write_char+0x32>
	{
		hx_send_data(HX_character[_character][row_index]);
	}
}
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	08 95       	ret

000006f0 <hx_write_string>:

void hx_write_string(const char *_characters_array)
{
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
	int string_length = strlen(_characters_array);
     6f8:	fc 01       	movw	r30, r24
     6fa:	01 90       	ld	r0, Z+
     6fc:	00 20       	and	r0, r0
     6fe:	e9 f7       	brne	.-6      	; 0x6fa <hx_write_string+0xa>
     700:	31 97       	sbiw	r30, 0x01	; 1
     702:	e8 1b       	sub	r30, r24
     704:	f9 0b       	sbc	r31, r25
	for(int char_index = 0; char_index < string_length; char_index++)
     706:	1e 16       	cp	r1, r30
     708:	1f 06       	cpc	r1, r31
     70a:	54 f4       	brge	.+20     	; 0x720 <hx_write_string+0x30>
     70c:	ec 01       	movw	r28, r24
     70e:	8c 01       	movw	r16, r24
     710:	0e 0f       	add	r16, r30
     712:	1f 1f       	adc	r17, r31
	{
		hx_write_char((const unsigned char)(_characters_array[char_index]));
     714:	89 91       	ld	r24, Y+
     716:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
}

void hx_write_string(const char *_characters_array)
{
	int string_length = strlen(_characters_array);
	for(int char_index = 0; char_index < string_length; char_index++)
     71a:	c0 17       	cp	r28, r16
     71c:	d1 07       	cpc	r29, r17
     71e:	d1 f7       	brne	.-12     	; 0x714 <hx_write_string+0x24>
	{
		hx_write_char((const unsigned char)(_characters_array[char_index]));
	}
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	08 95       	ret

0000072a <manual_control>:
#include "graphics.h"
#include "joystick_driver.h"
#include "sg90_driver.h"

void manual_control(void)
{
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
	unsigned int x = ADC_get_value(ADC_CHANNEL_X_AXIS);
     732:	85 e0       	ldi	r24, 0x05	; 5
     734:	0e 94 5b 00 	call	0xb6	; 0xb6 <ADC_get_value>
     738:	ec 01       	movw	r28, r24
	unsigned int y = ADC_get_value(ADC_CHANNEL_Y_AXIS);
     73a:	84 e0       	ldi	r24, 0x04	; 4
     73c:	0e 94 5b 00 	call	0xb6	; 0xb6 <ADC_get_value>
     740:	8c 01       	movw	r16, r24
	
	display_joystick_data(x, y);
     742:	bc 01       	movw	r22, r24
     744:	ce 01       	movw	r24, r28
     746:	0e 94 ae 01 	call	0x35c	; 0x35c <display_joystick_data>
	
	if(y > (JOYSTICK_IDLE_VALUE + JOYSTICK_DEAD_ZONE))
     74a:	05 36       	cpi	r16, 0x65	; 101
     74c:	82 e0       	ldi	r24, 0x02	; 2
     74e:	18 07       	cpc	r17, r24
     750:	40 f0       	brcs	.+16     	; 0x762 <manual_control+0x38>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER ++;
     752:	e8 e8       	ldi	r30, 0x88	; 136
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	80 81       	ld	r24, Z
     758:	91 81       	ldd	r25, Z+1	; 0x01
     75a:	01 96       	adiw	r24, 0x01	; 1
     75c:	91 83       	std	Z+1, r25	; 0x01
     75e:	80 83       	st	Z, r24
     760:	0a c0       	rjmp	.+20     	; 0x776 <manual_control+0x4c>
	}
	else if(y < (JOYSTICK_IDLE_VALUE - JOYSTICK_DEAD_ZONE))
     762:	0c 39       	cpi	r16, 0x9C	; 156
     764:	11 40       	sbci	r17, 0x01	; 1
     766:	38 f4       	brcc	.+14     	; 0x776 <manual_control+0x4c>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER --;
     768:	e8 e8       	ldi	r30, 0x88	; 136
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	80 81       	ld	r24, Z
     76e:	91 81       	ldd	r25, Z+1	; 0x01
     770:	01 97       	sbiw	r24, 0x01	; 1
     772:	91 83       	std	Z+1, r25	; 0x01
     774:	80 83       	st	Z, r24
	}
	
	if(x > (JOYSTICK_IDLE_VALUE + JOYSTICK_DEAD_ZONE))
     776:	c5 36       	cpi	r28, 0x65	; 101
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	d8 07       	cpc	r29, r24
     77c:	40 f0       	brcs	.+16     	; 0x78e <manual_control+0x64>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER --;
     77e:	ea e8       	ldi	r30, 0x8A	; 138
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
     784:	91 81       	ldd	r25, Z+1	; 0x01
     786:	01 97       	sbiw	r24, 0x01	; 1
     788:	91 83       	std	Z+1, r25	; 0x01
     78a:	80 83       	st	Z, r24
     78c:	0a c0       	rjmp	.+20     	; 0x7a2 <manual_control+0x78>
	}
	else if(x < (JOYSTICK_IDLE_VALUE - JOYSTICK_DEAD_ZONE))
     78e:	cc 39       	cpi	r28, 0x9C	; 156
     790:	d1 40       	sbci	r29, 0x01	; 1
     792:	38 f4       	brcc	.+14     	; 0x7a2 <manual_control+0x78>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER ++;
     794:	ea e8       	ldi	r30, 0x8A	; 138
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	91 81       	ldd	r25, Z+1	; 0x01
     79c:	01 96       	adiw	r24, 0x01	; 1
     79e:	91 83       	std	Z+1, r25	; 0x01
     7a0:	80 83       	st	Z, r24
	}
	
	
	if(SG90_INCLINE_DUTY_CYCLE_REGISTER > SG90_INCLINE_POS_180)
     7a2:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     7a6:	50 91 89 00 	lds	r21, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     7aa:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     7ae:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     7b2:	ad ec       	ldi	r26, 0xCD	; 205
     7b4:	bc ec       	ldi	r27, 0xCC	; 204
     7b6:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     7ba:	96 95       	lsr	r25
     7bc:	87 95       	ror	r24
     7be:	96 95       	lsr	r25
     7c0:	87 95       	ror	r24
     7c2:	96 95       	lsr	r25
     7c4:	87 95       	ror	r24
     7c6:	0f 96       	adiw	r24, 0x0f	; 15
     7c8:	84 17       	cp	r24, r20
     7ca:	95 07       	cpc	r25, r21
     7cc:	88 f4       	brcc	.+34     	; 0x7f0 <manual_control+0xc6>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_INCLINE_POS_180;
     7ce:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     7d2:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     7d6:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     7da:	96 95       	lsr	r25
     7dc:	87 95       	ror	r24
     7de:	96 95       	lsr	r25
     7e0:	87 95       	ror	r24
     7e2:	96 95       	lsr	r25
     7e4:	87 95       	ror	r24
     7e6:	0f 96       	adiw	r24, 0x0f	; 15
     7e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     7ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	}
	if(SG90_INCLINE_DUTY_CYCLE_REGISTER < SG90_INCLINE_POS_0)
     7f0:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     7f4:	50 91 89 00 	lds	r21, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     7f8:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     7fc:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     800:	ad ec       	ldi	r26, 0xCD	; 205
     802:	bc ec       	ldi	r27, 0xCC	; 204
     804:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     808:	92 95       	swap	r25
     80a:	82 95       	swap	r24
     80c:	8f 70       	andi	r24, 0x0F	; 15
     80e:	89 27       	eor	r24, r25
     810:	9f 70       	andi	r25, 0x0F	; 15
     812:	89 27       	eor	r24, r25
     814:	82 54       	subi	r24, 0x42	; 66
     816:	91 09       	sbc	r25, r1
     818:	48 17       	cp	r20, r24
     81a:	59 07       	cpc	r21, r25
     81c:	90 f4       	brcc	.+36     	; 0x842 <manual_control+0x118>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_INCLINE_POS_0;
     81e:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     822:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     826:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     82a:	92 95       	swap	r25
     82c:	82 95       	swap	r24
     82e:	8f 70       	andi	r24, 0x0F	; 15
     830:	89 27       	eor	r24, r25
     832:	9f 70       	andi	r25, 0x0F	; 15
     834:	89 27       	eor	r24, r25
     836:	82 54       	subi	r24, 0x42	; 66
     838:	91 09       	sbc	r25, r1
     83a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     83e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	}
	if(SG90_ROTATE_DUTY_CYCLE_REGISTER > SG90_ROTATE_POS_180)
     842:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     846:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     84a:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     84e:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     852:	ad ec       	ldi	r26, 0xCD	; 205
     854:	bc ec       	ldi	r27, 0xCC	; 204
     856:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     85a:	96 95       	lsr	r25
     85c:	87 95       	ror	r24
     85e:	96 95       	lsr	r25
     860:	87 95       	ror	r24
     862:	96 95       	lsr	r25
     864:	87 95       	ror	r24
     866:	05 96       	adiw	r24, 0x05	; 5
     868:	84 17       	cp	r24, r20
     86a:	95 07       	cpc	r25, r21
     86c:	88 f4       	brcc	.+34     	; 0x890 <manual_control+0x166>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_POS_180;
     86e:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     872:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     876:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     87a:	96 95       	lsr	r25
     87c:	87 95       	ror	r24
     87e:	96 95       	lsr	r25
     880:	87 95       	ror	r24
     882:	96 95       	lsr	r25
     884:	87 95       	ror	r24
     886:	05 96       	adiw	r24, 0x05	; 5
     888:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     88c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	}
	if(SG90_ROTATE_DUTY_CYCLE_REGISTER < SG90_ROTATE_POS_0)
     890:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     894:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     898:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     89c:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     8a0:	ad ec       	ldi	r26, 0xCD	; 205
     8a2:	bc ec       	ldi	r27, 0xCC	; 204
     8a4:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     8a8:	92 95       	swap	r25
     8aa:	82 95       	swap	r24
     8ac:	8f 70       	andi	r24, 0x0F	; 15
     8ae:	89 27       	eor	r24, r25
     8b0:	9f 70       	andi	r25, 0x0F	; 15
     8b2:	89 27       	eor	r24, r25
     8b4:	82 54       	subi	r24, 0x42	; 66
     8b6:	91 09       	sbc	r25, r1
     8b8:	48 17       	cp	r20, r24
     8ba:	59 07       	cpc	r21, r25
     8bc:	90 f4       	brcc	.+36     	; 0x8e2 <manual_control+0x1b8>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_POS_0;
     8be:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     8c2:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     8c6:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     8ca:	92 95       	swap	r25
     8cc:	82 95       	swap	r24
     8ce:	8f 70       	andi	r24, 0x0F	; 15
     8d0:	89 27       	eor	r24, r25
     8d2:	9f 70       	andi	r25, 0x0F	; 15
     8d4:	89 27       	eor	r24, r25
     8d6:	82 54       	subi	r24, 0x42	; 66
     8d8:	91 09       	sbc	r25, r1
     8da:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     8de:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     8e2:	89 e6       	ldi	r24, 0x69	; 105
     8e4:	98 e1       	ldi	r25, 0x18	; 24
     8e6:	01 97       	sbiw	r24, 0x01	; 1
     8e8:	f1 f7       	brne	.-4      	; 0x8e6 <manual_control+0x1bc>
     8ea:	00 c0       	rjmp	.+0      	; 0x8ec <manual_control+0x1c2>
     8ec:	00 00       	nop
	}
	_delay_ms(25);
}
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	08 95       	ret

000008f8 <get_filtered_light_intensity>:
	adc_value = percentage_value(adc_value);
	return adc_value;
}

int get_filtered_light_intensity(uint8_t sensor)
{
     8f8:	0f 93       	push	r16
     8fa:	1f 93       	push	r17
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	d8 2f       	mov	r29, r24
     902:	cf e0       	ldi	r28, 0x0F	; 15
	uint16_t adc_value = 0;
     904:	00 e0       	ldi	r16, 0x00	; 0
     906:	10 e0       	ldi	r17, 0x00	; 0
	for(char i = 0; i < FILTLER_RANK; i++)
	{
		adc_value += ADC_get_value(sensor);
     908:	8d 2f       	mov	r24, r29
     90a:	0e 94 5b 00 	call	0xb6	; 0xb6 <ADC_get_value>
     90e:	08 0f       	add	r16, r24
     910:	19 1f       	adc	r17, r25
     912:	c1 50       	subi	r28, 0x01	; 1
}

int get_filtered_light_intensity(uint8_t sensor)
{
	uint16_t adc_value = 0;
	for(char i = 0; i < FILTLER_RANK; i++)
     914:	c9 f7       	brne	.-14     	; 0x908 <__stack+0x9>
	return adc_value;
}

int percentage_value(int raw_value)
{
	raw_value = raw_value*((long)100)/1023;
     916:	98 01       	movw	r18, r16
     918:	a9 e8       	ldi	r26, 0x89	; 137
     91a:	b8 e8       	ldi	r27, 0x88	; 136
     91c:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     920:	dc 01       	movw	r26, r24
     922:	b6 95       	lsr	r27
     924:	a7 95       	ror	r26
     926:	b6 95       	lsr	r27
     928:	a7 95       	ror	r26
     92a:	b6 95       	lsr	r27
     92c:	a7 95       	ror	r26
     92e:	24 e6       	ldi	r18, 0x64	; 100
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	0e 94 fa 07 	call	0xff4	; 0xff4 <__usmulhisi3>
     936:	2f ef       	ldi	r18, 0xFF	; 255
     938:	33 e0       	ldi	r19, 0x03	; 3
     93a:	40 e0       	ldi	r20, 0x00	; 0
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	0e 94 cc 07 	call	0xf98	; 0xf98 <__divmodsi4>
		adc_value += ADC_get_value(sensor);
	}
	adc_value /= FILTLER_RANK;
	adc_value = percentage_value(adc_value);
	return adc_value;
}
     942:	84 e6       	ldi	r24, 0x64	; 100
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	82 1b       	sub	r24, r18
     948:	93 0b       	sbc	r25, r19
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	08 95       	ret

00000954 <uC_init>:
     954:	87 ea       	ldi	r24, 0xA7	; 167
     956:	91 e6       	ldi	r25, 0x61	; 97
     958:	01 97       	sbiw	r24, 0x01	; 1
     95a:	f1 f7       	brne	.-4      	; 0x958 <uC_init+0x4>
     95c:	00 c0       	rjmp	.+0      	; 0x95e <uC_init+0xa>
     95e:	00 00       	nop
{
	// Wait for system to get fully powered up
	_delay_ms(100);
	
	// initialize required modules
	ADC_init();
     960:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
     964:	83 ed       	ldi	r24, 0xD3	; 211
     966:	90 e3       	ldi	r25, 0x30	; 48
     968:	01 97       	sbiw	r24, 0x01	; 1
     96a:	f1 f7       	brne	.-4      	; 0x968 <uC_init+0x14>
     96c:	00 c0       	rjmp	.+0      	; 0x96e <uC_init+0x1a>
     96e:	00 00       	nop
	_delay_ms(50);
	
	init_pwm_channels();
     970:	0e 94 40 05 	call	0xa80	; 0xa80 <init_pwm_channels>
     974:	83 ed       	ldi	r24, 0xD3	; 211
     976:	90 e3       	ldi	r25, 0x30	; 48
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	f1 f7       	brne	.-4      	; 0x978 <uC_init+0x24>
     97c:	00 c0       	rjmp	.+0      	; 0x97e <uC_init+0x2a>
     97e:	00 00       	nop
	_delay_ms(50);
	
	init_user_interface();
     980:	0e 94 91 07 	call	0xf22	; 0xf22 <init_user_interface>
     984:	83 ed       	ldi	r24, 0xD3	; 211
     986:	90 e3       	ldi	r25, 0x30	; 48
     988:	01 97       	sbiw	r24, 0x01	; 1
     98a:	f1 f7       	brne	.-4      	; 0x988 <uC_init+0x34>
     98c:	00 c0       	rjmp	.+0      	; 0x98e <uC_init+0x3a>
     98e:	00 00       	nop
	_delay_ms(50);
	
	init_hx1230_control();
     990:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <init_hx1230_control>
     994:	83 ed       	ldi	r24, 0xD3	; 211
     996:	90 e3       	ldi	r25, 0x30	; 48
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	f1 f7       	brne	.-4      	; 0x998 <uC_init+0x44>
     99c:	00 c0       	rjmp	.+0      	; 0x99e <uC_init+0x4a>
     99e:	00 00       	nop
	_delay_ms(50);
	hx_fill_screen();
     9a0:	0e 94 40 03 	call	0x680	; 0x680 <hx_fill_screen>
     9a4:	9f e9       	ldi	r25, 0x9F	; 159
     9a6:	26 e8       	ldi	r18, 0x86	; 134
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	91 50       	subi	r25, 0x01	; 1
     9ac:	20 40       	sbci	r18, 0x00	; 0
     9ae:	80 40       	sbci	r24, 0x00	; 0
     9b0:	e1 f7       	brne	.-8      	; 0x9aa <uC_init+0x56>
     9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <uC_init+0x60>
     9b4:	00 00       	nop
	_delay_ms(500);
	hx_clear_screen();
     9b6:	0e 94 2c 03 	call	0x658	; 0x658 <hx_clear_screen>
     9ba:	83 ed       	ldi	r24, 0xD3	; 211
     9bc:	90 e3       	ldi	r25, 0x30	; 48
     9be:	01 97       	sbiw	r24, 0x01	; 1
     9c0:	f1 f7       	brne	.-4      	; 0x9be <uC_init+0x6a>
     9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <uC_init+0x70>
     9c4:	00 00       	nop
	_delay_ms(50);
	
	display_title();
     9c6:	0e 94 6f 00 	call	0xde	; 0xde <display_title>
	display_idle_state_message(); 
     9ca:	0e 94 74 01 	call	0x2e8	; 0x2e8 <display_idle_state_message>
	
	sei(); // enable global interrupts
     9ce:	78 94       	sei
     9d0:	08 95       	ret

000009d2 <main>:

void uC_init(void);

int main(void)
{
	STATE = STATE_INIT;
     9d2:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <STATE>
	OLD_STATE = STATE_INIT;
     9d6:	10 92 78 07 	sts	0x0778, r1	; 0x800778 <__data_end>
	uC_init();
     9da:	0e 94 aa 04 	call	0x954	; 0x954 <uC_init>
	
	SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_INCLINE_POS_0;
     9de:	e6 e8       	ldi	r30, 0x86	; 134
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	20 81       	ld	r18, Z
     9e4:	31 81       	ldd	r19, Z+1	; 0x01
     9e6:	ad ec       	ldi	r26, 0xCD	; 205
     9e8:	bc ec       	ldi	r27, 0xCC	; 204
     9ea:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     9ee:	92 95       	swap	r25
     9f0:	82 95       	swap	r24
     9f2:	8f 70       	andi	r24, 0x0F	; 15
     9f4:	89 27       	eor	r24, r25
     9f6:	9f 70       	andi	r25, 0x0F	; 15
     9f8:	89 27       	eor	r24, r25
     9fa:	82 54       	subi	r24, 0x42	; 66
     9fc:	91 09       	sbc	r25, r1
     9fe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     a02:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_INIT_POS;
     a06:	80 81       	ld	r24, Z
     a08:	91 81       	ldd	r25, Z+1	; 0x01
     a0a:	9c 01       	movw	r18, r24
     a0c:	22 0f       	add	r18, r18
     a0e:	33 1f       	adc	r19, r19
     a10:	88 0f       	add	r24, r24
     a12:	99 1f       	adc	r25, r25
     a14:	88 0f       	add	r24, r24
     a16:	99 1f       	adc	r25, r25
     a18:	88 0f       	add	r24, r24
     a1a:	99 1f       	adc	r25, r25
     a1c:	28 0f       	add	r18, r24
     a1e:	39 1f       	adc	r19, r25
     a20:	a1 e6       	ldi	r26, 0x61	; 97
     a22:	b6 ef       	ldi	r27, 0xF6	; 246
     a24:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     a28:	88 0f       	add	r24, r24
     a2a:	89 2f       	mov	r24, r25
     a2c:	88 1f       	adc	r24, r24
     a2e:	99 0b       	sbc	r25, r25
     a30:	91 95       	neg	r25
     a32:	88 97       	sbiw	r24, 0x28	; 40
     a34:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     a38:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	turn_on_pwm_channels();
     a3c:	0e 94 62 05 	call	0xac4	; 0xac4 <turn_on_pwm_channels>
	
	
	STATE = STATE_IDLE;
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <STATE>
	
    while (1) 
    {
	    if(STATE_CHANGED)
     a46:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <STATE>
     a4a:	90 91 78 07 	lds	r25, 0x0778	; 0x800778 <__data_end>
     a4e:	98 17       	cp	r25, r24
     a50:	59 f0       	breq	.+22     	; 0xa68 <main+0x96>
	    {
		    OLD_STATE = STATE; // update state
     a52:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <__data_end>
		    go_to_state(STATE);
     a56:	0e 94 98 05 	call	0xb30	; 0xb30 <go_to_state>
     a5a:	83 e2       	ldi	r24, 0x23	; 35
     a5c:	94 ef       	ldi	r25, 0xF4	; 244
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	f1 f7       	brne	.-4      	; 0xa5e <main+0x8c>
     a62:	00 c0       	rjmp	.+0      	; 0xa64 <main+0x92>
     a64:	00 00       	nop
		    _delay_ms(250);
		    sei(); // enable interrupts
     a66:	78 94       	sei
	    }
		
		switch(OLD_STATE)
     a68:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <__data_end>
     a6c:	82 30       	cpi	r24, 0x02	; 2
     a6e:	29 f0       	breq	.+10     	; 0xa7a <main+0xa8>
     a70:	83 30       	cpi	r24, 0x03	; 3
     a72:	49 f7       	brne	.-46     	; 0xa46 <main+0x74>
		{
			case STATE_TRACKING:
			{
				track();
     a74:	0e 94 b5 05 	call	0xb6a	; 0xb6a <track>
				break;
     a78:	e6 cf       	rjmp	.-52     	; 0xa46 <main+0x74>
			}
			case STATE_MANUAL:
			{
				manual_control();
     a7a:	0e 94 95 03 	call	0x72a	; 0x72a <manual_control>
				break;
     a7e:	e3 cf       	rjmp	.-58     	; 0xa46 <main+0x74>

00000a80 <init_pwm_channels>:
#include "global.h"
#include <avr/io.h>

void init_pwm_channels(void)
{
	DDRB |= (1 << DDB1)|(1 << DDB2);
     a80:	84 b1       	in	r24, 0x04	; 4
     a82:	86 60       	ori	r24, 0x06	; 6
     a84:	84 b9       	out	0x04, r24	; 4
	// PB1 and PB2 as output of 16bits Timer1
	
	 ICR1 = 2485;
     a86:	85 eb       	ldi	r24, 0xB5	; 181
     a88:	99 e0       	ldi	r25, 0x09	; 9
     a8a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     a8e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	 // set TOP to count 20ms
	 // TOP calculated by the formula: F_PWM = F_CPU/(PRESCALER*(1 + TOP))
	 // Atmel-42735-8-bit-AVR-Microcontroller-ATmega328-328P_Datasheet, page 164

	 OCR1A = 00;
     a92:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     a96:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	 // set PWM for 0% duty cycle

	 OCR1B = 00;
     a9a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     a9e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	 // set PWM for 0% duty cycle

	 TCCR1A &= ~((1 << COM1A1)|(1 << COM1B1));
     aa2:	a0 e8       	ldi	r26, 0x80	; 128
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	8c 91       	ld	r24, X
     aa8:	8f 75       	andi	r24, 0x5F	; 95
     aaa:	8c 93       	st	X, r24
	 // make sure PWM signal is off

	TCCR1B |= (1 << CS11);
     aac:	e1 e8       	ldi	r30, 0x81	; 129
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	82 60       	ori	r24, 0x02	; 2
     ab4:	80 83       	st	Z, r24
	// START the timer with 8 prescaler

	 TCCR1A |= (1 << WGM11);
     ab6:	8c 91       	ld	r24, X
     ab8:	82 60       	ori	r24, 0x02	; 2
     aba:	8c 93       	st	X, r24
	 TCCR1B |= (1 << WGM12)|(1 << WGM13);
     abc:	80 81       	ld	r24, Z
     abe:	88 61       	ori	r24, 0x18	; 24
     ac0:	80 83       	st	Z, r24
     ac2:	08 95       	ret

00000ac4 <turn_on_pwm_channels>:
	 // set Fast PWM mode using ICR1 as TOP
}

void turn_on_pwm_channels(void)
{
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1);
     ac4:	e0 e8       	ldi	r30, 0x80	; 128
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	80 81       	ld	r24, Z
     aca:	80 6a       	ori	r24, 0xA0	; 160
     acc:	80 83       	st	Z, r24
     ace:	08 95       	ret

00000ad0 <idle_state_setup>:
     ad0:	8f e4       	ldi	r24, 0x4F	; 79
     ad2:	93 ec       	ldi	r25, 0xC3	; 195
     ad4:	01 97       	sbiw	r24, 0x01	; 1
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <idle_state_setup+0x4>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <idle_state_setup+0xa>
     ada:	00 00       	nop
}

void idle_state_setup(void)
{
	_delay_ms(200);
	hx_clear_screen();
     adc:	0e 94 2c 03 	call	0x658	; 0x658 <hx_clear_screen>
	display_title();
     ae0:	0e 94 6f 00 	call	0xde	; 0xde <display_title>
	display_idle_state_message();
     ae4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <display_idle_state_message>
     ae8:	08 95       	ret

00000aea <manual_state_setup>:
     aea:	8f e4       	ldi	r24, 0x4F	; 79
     aec:	93 ec       	ldi	r25, 0xC3	; 195
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	f1 f7       	brne	.-4      	; 0xaee <manual_state_setup+0x4>
     af2:	00 c0       	rjmp	.+0      	; 0xaf4 <manual_state_setup+0xa>
     af4:	00 00       	nop
}

void manual_state_setup(void)
{
	_delay_ms(200);
	hx_clear_screen();
     af6:	0e 94 2c 03 	call	0x658	; 0x658 <hx_clear_screen>
	display_title();
     afa:	0e 94 6f 00 	call	0xde	; 0xde <display_title>
	display_manual_state_message();
     afe:	0e 94 8d 01 	call	0x31a	; 0x31a <display_manual_state_message>
     b02:	08 95       	ret

00000b04 <tracking_state_setup>:
     b04:	8f e4       	ldi	r24, 0x4F	; 79
     b06:	93 ec       	ldi	r25, 0xC3	; 195
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <tracking_state_setup+0x4>
     b0c:	00 c0       	rjmp	.+0      	; 0xb0e <tracking_state_setup+0xa>
     b0e:	00 00       	nop
}

void tracking_state_setup(void)
{
	_delay_ms(200);
	hx_clear_screen();
     b10:	0e 94 2c 03 	call	0x658	; 0x658 <hx_clear_screen>
	display_title();
     b14:	0e 94 6f 00 	call	0xde	; 0xde <display_title>
	display_data_menu();
     b18:	0e 94 80 00 	call	0x100	; 0x100 <display_data_menu>
     b1c:	9f e9       	ldi	r25, 0x9F	; 159
     b1e:	26 e8       	ldi	r18, 0x86	; 134
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	91 50       	subi	r25, 0x01	; 1
     b24:	20 40       	sbci	r18, 0x00	; 0
     b26:	80 40       	sbci	r24, 0x00	; 0
     b28:	e1 f7       	brne	.-8      	; 0xb22 <tracking_state_setup+0x1e>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <tracking_state_setup+0x28>
     b2c:	00 00       	nop
     b2e:	08 95       	ret

00000b30 <go_to_state>:
#include "graphics.h"
#include "state_handler.h"
#include "hx1230.h"

void go_to_state(unsigned char state)
{
     b30:	cf 93       	push	r28
     b32:	c8 2f       	mov	r28, r24
	hx_clear_screen();
     b34:	0e 94 2c 03 	call	0x658	; 0x658 <hx_clear_screen>
	switch(state)
     b38:	c2 30       	cpi	r28, 0x02	; 2
     b3a:	51 f0       	breq	.+20     	; 0xb50 <go_to_state+0x20>
     b3c:	c3 30       	cpi	r28, 0x03	; 3
     b3e:	71 f0       	breq	.+28     	; 0xb5c <go_to_state+0x2c>
     b40:	c1 30       	cpi	r28, 0x01	; 1
     b42:	89 f4       	brne	.+34     	; 0xb66 <go_to_state+0x36>
	{
		case STATE_IDLE:
		{
			STATE = STATE_IDLE; // update global state
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <STATE>
			idle_state_setup();
     b4a:	0e 94 68 05 	call	0xad0	; 0xad0 <idle_state_setup>
			break;
     b4e:	0b c0       	rjmp	.+22     	; 0xb66 <go_to_state+0x36>
		}
		case STATE_MANUAL:
		{
			STATE = STATE_MANUAL; // update global state
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <STATE>
			manual_state_setup();
     b56:	0e 94 75 05 	call	0xaea	; 0xaea <manual_state_setup>
			break;
     b5a:	05 c0       	rjmp	.+10     	; 0xb66 <go_to_state+0x36>
		}
		case STATE_TRACKING:
		{
			STATE = STATE_TRACKING; // update global state
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <STATE>
			tracking_state_setup();
     b62:	0e 94 82 05 	call	0xb04	; 0xb04 <tracking_state_setup>
			break;
		}
	}
}
     b66:	cf 91       	pop	r28
     b68:	08 95       	ret

00000b6a <track>:

int up_down_movement_gradient_request;
int left_right_movement_gradient_request;

void track(void)
{
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
	light_up_left = get_filtered_light_intensity(LS_UP_LEFT);
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <get_filtered_light_intensity>
     b74:	90 93 8d 07 	sts	0x078D, r25	; 0x80078d <light_up_left+0x1>
     b78:	80 93 8c 07 	sts	0x078C, r24	; 0x80078c <light_up_left>
	light_up_right = get_filtered_light_intensity(LS_UP_RIGHT);
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <get_filtered_light_intensity>
     b82:	90 93 7f 07 	sts	0x077F, r25	; 0x80077f <light_up_right+0x1>
     b86:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <light_up_right>
	light_down_left = get_filtered_light_intensity(LS_DOWN_LEFT);
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <get_filtered_light_intensity>
     b90:	90 93 89 07 	sts	0x0789, r25	; 0x800789 <light_down_left+0x1>
     b94:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <light_down_left>
	light_down_right = get_filtered_light_intensity(LS_DOWN_RIGHT);
     b98:	83 e0       	ldi	r24, 0x03	; 3
     b9a:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <get_filtered_light_intensity>
     b9e:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <light_down_right+0x1>
     ba2:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <light_down_right>
	
	display_light_sensor_data(LS_UP_LEFT, light_up_left);
     ba6:	60 91 8c 07 	lds	r22, 0x078C	; 0x80078c <light_up_left>
     baa:	70 91 8d 07 	lds	r23, 0x078D	; 0x80078d <light_up_left+0x1>
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	0e 94 99 00 	call	0x132	; 0x132 <display_light_sensor_data>
	display_light_sensor_data(LS_UP_RIGHT, light_up_right);
     bb4:	60 91 7e 07 	lds	r22, 0x077E	; 0x80077e <light_up_right>
     bb8:	70 91 7f 07 	lds	r23, 0x077F	; 0x80077f <light_up_right+0x1>
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	0e 94 99 00 	call	0x132	; 0x132 <display_light_sensor_data>
	display_light_sensor_data(LS_DOWN_LEFT, light_down_left);
     bc2:	60 91 88 07 	lds	r22, 0x0788	; 0x800788 <light_down_left>
     bc6:	70 91 89 07 	lds	r23, 0x0789	; 0x800789 <light_down_left+0x1>
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	0e 94 99 00 	call	0x132	; 0x132 <display_light_sensor_data>
	display_light_sensor_data(LS_DOWN_RIGHT, light_down_right);
     bd0:	60 91 80 07 	lds	r22, 0x0780	; 0x800780 <light_down_right>
     bd4:	70 91 81 07 	lds	r23, 0x0781	; 0x800781 <light_down_right+0x1>
     bd8:	83 e0       	ldi	r24, 0x03	; 3
     bda:	0e 94 99 00 	call	0x132	; 0x132 <display_light_sensor_data>
	
	up_intensity_average = light_up_left + light_up_right;
     bde:	e0 91 8c 07 	lds	r30, 0x078C	; 0x80078c <light_up_left>
     be2:	f0 91 8d 07 	lds	r31, 0x078D	; 0x80078d <light_up_left+0x1>
     be6:	60 91 7e 07 	lds	r22, 0x077E	; 0x80077e <light_up_right>
     bea:	70 91 7f 07 	lds	r23, 0x077F	; 0x80077f <light_up_right+0x1>
	up_intensity_average >>= 1;
     bee:	af 01       	movw	r20, r30
     bf0:	46 0f       	add	r20, r22
     bf2:	57 1f       	adc	r21, r23
     bf4:	55 95       	asr	r21
     bf6:	47 95       	ror	r20
     bf8:	50 93 8b 07 	sts	0x078B, r21	; 0x80078b <up_intensity_average+0x1>
     bfc:	40 93 8a 07 	sts	0x078A, r20	; 0x80078a <up_intensity_average>
	
	down_intensity_average = light_down_left + light_down_right;
     c00:	20 91 88 07 	lds	r18, 0x0788	; 0x800788 <light_down_left>
     c04:	30 91 89 07 	lds	r19, 0x0789	; 0x800789 <light_down_left+0x1>
     c08:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <light_down_right>
     c0c:	90 91 81 07 	lds	r25, 0x0781	; 0x800781 <light_down_right+0x1>
	down_intensity_average >>= 1;
     c10:	a9 01       	movw	r20, r18
     c12:	48 0f       	add	r20, r24
     c14:	59 1f       	adc	r21, r25
     c16:	55 95       	asr	r21
     c18:	47 95       	ror	r20
     c1a:	50 93 7b 07 	sts	0x077B, r21	; 0x80077b <down_intensity_average+0x1>
     c1e:	40 93 7a 07 	sts	0x077A, r20	; 0x80077a <down_intensity_average>
	
	left_intensity_average = light_up_left + light_down_left;
	left_intensity_average >>= 1;
     c22:	2e 0f       	add	r18, r30
     c24:	3f 1f       	adc	r19, r31
     c26:	35 95       	asr	r19
     c28:	27 95       	ror	r18
     c2a:	30 93 7d 07 	sts	0x077D, r19	; 0x80077d <left_intensity_average+0x1>
     c2e:	20 93 7c 07 	sts	0x077C, r18	; 0x80077c <left_intensity_average>
	
	right_intensity_average = light_up_right + light_down_right;
	right_intensity_average >>= 1;
     c32:	86 0f       	add	r24, r22
     c34:	97 1f       	adc	r25, r23
     c36:	95 95       	asr	r25
     c38:	87 95       	ror	r24
     c3a:	90 93 87 07 	sts	0x0787, r25	; 0x800787 <right_intensity_average+0x1>
     c3e:	80 93 86 07 	sts	0x0786, r24	; 0x800786 <right_intensity_average>
	
	hx_set_coordinates(42, 2);
     c42:	62 e0       	ldi	r22, 0x02	; 2
     c44:	8a e2       	ldi	r24, 0x2A	; 42
     c46:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_char('0' + (up_intensity_average / 10) % 10);
     c4a:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <up_intensity_average>
     c4e:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <up_intensity_average+0x1>
     c52:	ca e0       	ldi	r28, 0x0A	; 10
     c54:	d0 e0       	ldi	r29, 0x00	; 0
     c56:	be 01       	movw	r22, r28
     c58:	0e 94 b8 07 	call	0xf70	; 0xf70 <__divmodhi4>
     c5c:	cb 01       	movw	r24, r22
     c5e:	be 01       	movw	r22, r28
     c60:	0e 94 b8 07 	call	0xf70	; 0xf70 <__divmodhi4>
     c64:	80 5d       	subi	r24, 0xD0	; 208
     c66:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + up_intensity_average % 10);
     c6a:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <up_intensity_average>
     c6e:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <up_intensity_average+0x1>
     c72:	be 01       	movw	r22, r28
     c74:	0e 94 b8 07 	call	0xf70	; 0xf70 <__divmodhi4>
     c78:	80 5d       	subi	r24, 0xD0	; 208
     c7a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	
	hx_set_coordinates(42, 6);
     c7e:	66 e0       	ldi	r22, 0x06	; 6
     c80:	8a e2       	ldi	r24, 0x2A	; 42
     c82:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_char('0' + (down_intensity_average / 10) % 10);
     c86:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <down_intensity_average>
     c8a:	90 91 7b 07 	lds	r25, 0x077B	; 0x80077b <down_intensity_average+0x1>
     c8e:	be 01       	movw	r22, r28
     c90:	0e 94 b8 07 	call	0xf70	; 0xf70 <__divmodhi4>
     c94:	cb 01       	movw	r24, r22
     c96:	be 01       	movw	r22, r28
     c98:	0e 94 b8 07 	call	0xf70	; 0xf70 <__divmodhi4>
     c9c:	80 5d       	subi	r24, 0xD0	; 208
     c9e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + down_intensity_average % 10);
     ca2:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <down_intensity_average>
     ca6:	90 91 7b 07 	lds	r25, 0x077B	; 0x80077b <down_intensity_average+0x1>
     caa:	be 01       	movw	r22, r28
     cac:	0e 94 b8 07 	call	0xf70	; 0xf70 <__divmodhi4>
     cb0:	80 5d       	subi	r24, 0xD0	; 208
     cb2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	
	hx_set_coordinates(6, 4);
     cb6:	64 e0       	ldi	r22, 0x04	; 4
     cb8:	86 e0       	ldi	r24, 0x06	; 6
     cba:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_char('0' + (left_intensity_average / 10) % 10);
     cbe:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <left_intensity_average>
     cc2:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <left_intensity_average+0x1>
     cc6:	be 01       	movw	r22, r28
     cc8:	0e 94 b8 07 	call	0xf70	; 0xf70 <__divmodhi4>
     ccc:	cb 01       	movw	r24, r22
     cce:	be 01       	movw	r22, r28
     cd0:	0e 94 b8 07 	call	0xf70	; 0xf70 <__divmodhi4>
     cd4:	80 5d       	subi	r24, 0xD0	; 208
     cd6:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + left_intensity_average % 10);
     cda:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <left_intensity_average>
     cde:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <left_intensity_average+0x1>
     ce2:	be 01       	movw	r22, r28
     ce4:	0e 94 b8 07 	call	0xf70	; 0xf70 <__divmodhi4>
     ce8:	80 5d       	subi	r24, 0xD0	; 208
     cea:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	
	hx_set_coordinates(78, 4);
     cee:	64 e0       	ldi	r22, 0x04	; 4
     cf0:	8e e4       	ldi	r24, 0x4E	; 78
     cf2:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_char('0' + (right_intensity_average / 10) % 10);
     cf6:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <right_intensity_average>
     cfa:	90 91 87 07 	lds	r25, 0x0787	; 0x800787 <right_intensity_average+0x1>
     cfe:	be 01       	movw	r22, r28
     d00:	0e 94 b8 07 	call	0xf70	; 0xf70 <__divmodhi4>
     d04:	cb 01       	movw	r24, r22
     d06:	be 01       	movw	r22, r28
     d08:	0e 94 b8 07 	call	0xf70	; 0xf70 <__divmodhi4>
     d0c:	80 5d       	subi	r24, 0xD0	; 208
     d0e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + right_intensity_average % 10);
     d12:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <right_intensity_average>
     d16:	90 91 87 07 	lds	r25, 0x0787	; 0x800787 <right_intensity_average+0x1>
     d1a:	be 01       	movw	r22, r28
     d1c:	0e 94 b8 07 	call	0xf70	; 0xf70 <__divmodhi4>
     d20:	80 5d       	subi	r24, 0xD0	; 208
     d22:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	
	up_down_movement_gradient_request = up_intensity_average - down_intensity_average;
     d26:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <up_intensity_average>
     d2a:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <up_intensity_average+0x1>
     d2e:	20 91 7a 07 	lds	r18, 0x077A	; 0x80077a <down_intensity_average>
     d32:	30 91 7b 07 	lds	r19, 0x077B	; 0x80077b <down_intensity_average+0x1>
     d36:	82 1b       	sub	r24, r18
     d38:	93 0b       	sbc	r25, r19
     d3a:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <up_down_movement_gradient_request+0x1>
     d3e:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <up_down_movement_gradient_request>
	left_right_movement_gradient_request = left_intensity_average - right_intensity_average;
     d42:	20 91 7c 07 	lds	r18, 0x077C	; 0x80077c <left_intensity_average>
     d46:	30 91 7d 07 	lds	r19, 0x077D	; 0x80077d <left_intensity_average+0x1>
     d4a:	40 91 86 07 	lds	r20, 0x0786	; 0x800786 <right_intensity_average>
     d4e:	50 91 87 07 	lds	r21, 0x0787	; 0x800787 <right_intensity_average+0x1>
     d52:	24 1b       	sub	r18, r20
     d54:	35 0b       	sbc	r19, r21
     d56:	30 93 85 07 	sts	0x0785, r19	; 0x800785 <left_right_movement_gradient_request+0x1>
     d5a:	20 93 84 07 	sts	0x0784, r18	; 0x800784 <left_right_movement_gradient_request>
	
	if(abs(up_down_movement_gradient_request) > TRACKING_TOLERANCE)
     d5e:	9c 01       	movw	r18, r24
     d60:	99 23       	and	r25, r25
     d62:	24 f4       	brge	.+8      	; 0xd6c <track+0x202>
     d64:	22 27       	eor	r18, r18
     d66:	33 27       	eor	r19, r19
     d68:	28 1b       	sub	r18, r24
     d6a:	39 0b       	sbc	r19, r25
     d6c:	23 30       	cpi	r18, 0x03	; 3
     d6e:	31 05       	cpc	r19, r1
     d70:	64 f0       	brlt	.+24     	; 0xd8a <track+0x220>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER -= up_down_movement_gradient_request / 10;
     d72:	e8 e8       	ldi	r30, 0x88	; 136
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	20 81       	ld	r18, Z
     d78:	31 81       	ldd	r19, Z+1	; 0x01
     d7a:	6a e0       	ldi	r22, 0x0A	; 10
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	0e 94 b8 07 	call	0xf70	; 0xf70 <__divmodhi4>
     d82:	26 1b       	sub	r18, r22
     d84:	37 0b       	sbc	r19, r23
     d86:	31 83       	std	Z+1, r19	; 0x01
     d88:	20 83       	st	Z, r18
	}
	
	if(abs(left_right_movement_gradient_request) > TRACKING_TOLERANCE)
     d8a:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <left_right_movement_gradient_request>
     d8e:	90 91 85 07 	lds	r25, 0x0785	; 0x800785 <left_right_movement_gradient_request+0x1>
     d92:	9c 01       	movw	r18, r24
     d94:	99 23       	and	r25, r25
     d96:	24 f4       	brge	.+8      	; 0xda0 <track+0x236>
     d98:	22 27       	eor	r18, r18
     d9a:	33 27       	eor	r19, r19
     d9c:	28 1b       	sub	r18, r24
     d9e:	39 0b       	sbc	r19, r25
     da0:	23 30       	cpi	r18, 0x03	; 3
     da2:	31 05       	cpc	r19, r1
     da4:	64 f0       	brlt	.+24     	; 0xdbe <track+0x254>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER -= left_right_movement_gradient_request / 10;
     da6:	ea e8       	ldi	r30, 0x8A	; 138
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	20 81       	ld	r18, Z
     dac:	31 81       	ldd	r19, Z+1	; 0x01
     dae:	6a e0       	ldi	r22, 0x0A	; 10
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	0e 94 b8 07 	call	0xf70	; 0xf70 <__divmodhi4>
     db6:	26 1b       	sub	r18, r22
     db8:	37 0b       	sbc	r19, r23
     dba:	31 83       	std	Z+1, r19	; 0x01
     dbc:	20 83       	st	Z, r18
	}
	if(SG90_INCLINE_DUTY_CYCLE_REGISTER > SG90_INCLINE_POS_180)
     dbe:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     dc2:	50 91 89 00 	lds	r21, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     dc6:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     dca:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     dce:	ad ec       	ldi	r26, 0xCD	; 205
     dd0:	bc ec       	ldi	r27, 0xCC	; 204
     dd2:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     dd6:	96 95       	lsr	r25
     dd8:	87 95       	ror	r24
     dda:	96 95       	lsr	r25
     ddc:	87 95       	ror	r24
     dde:	96 95       	lsr	r25
     de0:	87 95       	ror	r24
     de2:	0f 96       	adiw	r24, 0x0f	; 15
     de4:	84 17       	cp	r24, r20
     de6:	95 07       	cpc	r25, r21
     de8:	88 f4       	brcc	.+34     	; 0xe0c <track+0x2a2>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_INCLINE_POS_180;
     dea:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     dee:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     df2:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     df6:	96 95       	lsr	r25
     df8:	87 95       	ror	r24
     dfa:	96 95       	lsr	r25
     dfc:	87 95       	ror	r24
     dfe:	96 95       	lsr	r25
     e00:	87 95       	ror	r24
     e02:	0f 96       	adiw	r24, 0x0f	; 15
     e04:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e08:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	}
	if(SG90_INCLINE_DUTY_CYCLE_REGISTER < SG90_INCLINE_POS_0)
     e0c:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     e10:	50 91 89 00 	lds	r21, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e14:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     e18:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     e1c:	ad ec       	ldi	r26, 0xCD	; 205
     e1e:	bc ec       	ldi	r27, 0xCC	; 204
     e20:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     e24:	92 95       	swap	r25
     e26:	82 95       	swap	r24
     e28:	8f 70       	andi	r24, 0x0F	; 15
     e2a:	89 27       	eor	r24, r25
     e2c:	9f 70       	andi	r25, 0x0F	; 15
     e2e:	89 27       	eor	r24, r25
     e30:	82 54       	subi	r24, 0x42	; 66
     e32:	91 09       	sbc	r25, r1
     e34:	48 17       	cp	r20, r24
     e36:	59 07       	cpc	r21, r25
     e38:	90 f4       	brcc	.+36     	; 0xe5e <track+0x2f4>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_INCLINE_POS_0;
     e3a:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     e3e:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     e42:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     e46:	92 95       	swap	r25
     e48:	82 95       	swap	r24
     e4a:	8f 70       	andi	r24, 0x0F	; 15
     e4c:	89 27       	eor	r24, r25
     e4e:	9f 70       	andi	r25, 0x0F	; 15
     e50:	89 27       	eor	r24, r25
     e52:	82 54       	subi	r24, 0x42	; 66
     e54:	91 09       	sbc	r25, r1
     e56:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e5a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	}
	if(SG90_ROTATE_DUTY_CYCLE_REGISTER > SG90_ROTATE_POS_180)
     e5e:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     e62:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     e66:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     e6a:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     e6e:	ad ec       	ldi	r26, 0xCD	; 205
     e70:	bc ec       	ldi	r27, 0xCC	; 204
     e72:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     e76:	96 95       	lsr	r25
     e78:	87 95       	ror	r24
     e7a:	96 95       	lsr	r25
     e7c:	87 95       	ror	r24
     e7e:	96 95       	lsr	r25
     e80:	87 95       	ror	r24
     e82:	05 96       	adiw	r24, 0x05	; 5
     e84:	84 17       	cp	r24, r20
     e86:	95 07       	cpc	r25, r21
     e88:	88 f4       	brcc	.+34     	; 0xeac <track+0x342>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_POS_180;
     e8a:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     e8e:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     e92:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     e96:	96 95       	lsr	r25
     e98:	87 95       	ror	r24
     e9a:	96 95       	lsr	r25
     e9c:	87 95       	ror	r24
     e9e:	96 95       	lsr	r25
     ea0:	87 95       	ror	r24
     ea2:	05 96       	adiw	r24, 0x05	; 5
     ea4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     ea8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	}
	if(SG90_ROTATE_DUTY_CYCLE_REGISTER < SG90_ROTATE_POS_0)
     eac:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     eb0:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     eb4:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     eb8:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     ebc:	ad ec       	ldi	r26, 0xCD	; 205
     ebe:	bc ec       	ldi	r27, 0xCC	; 204
     ec0:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     ec4:	92 95       	swap	r25
     ec6:	82 95       	swap	r24
     ec8:	8f 70       	andi	r24, 0x0F	; 15
     eca:	89 27       	eor	r24, r25
     ecc:	9f 70       	andi	r25, 0x0F	; 15
     ece:	89 27       	eor	r24, r25
     ed0:	82 54       	subi	r24, 0x42	; 66
     ed2:	91 09       	sbc	r25, r1
     ed4:	48 17       	cp	r20, r24
     ed6:	59 07       	cpc	r21, r25
     ed8:	90 f4       	brcc	.+36     	; 0xefe <track+0x394>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_POS_0;
     eda:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     ede:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     ee2:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
     ee6:	92 95       	swap	r25
     ee8:	82 95       	swap	r24
     eea:	8f 70       	andi	r24, 0x0F	; 15
     eec:	89 27       	eor	r24, r25
     eee:	9f 70       	andi	r25, 0x0F	; 15
     ef0:	89 27       	eor	r24, r25
     ef2:	82 54       	subi	r24, 0x42	; 66
     ef4:	91 09       	sbc	r25, r1
     ef6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     efa:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     efe:	83 ed       	ldi	r24, 0xD3	; 211
     f00:	90 e3       	ldi	r25, 0x30	; 48
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	f1 f7       	brne	.-4      	; 0xf02 <track+0x398>
     f06:	00 c0       	rjmp	.+0      	; 0xf08 <track+0x39e>
     f08:	00 00       	nop
	}
	_delay_ms(50);
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	08 95       	ret

00000f10 <init_next_state_button>:
}


void init_next_state_button(void)
{
	BUTTON_1_DRR &= ~(1 << BUTTON_1_PIN); // PD2 is input
     f10:	52 98       	cbi	0x0a, 2	; 10

	BUTTON_1_PORT |= (1 << BUTTON_1_PIN);    // turn on the pull-up resistor
     f12:	5a 9a       	sbi	0x0b, 2	; 11
	// PD2 is now an input with pull-up enabled



	EICRA &= ~(1 << ISC00 | 1 << ISC01);    // low level of INT0 generates an interrupt request: when BUTTON_1 is pressed
     f14:	e9 e6       	ldi	r30, 0x69	; 105
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	8c 7f       	andi	r24, 0xFC	; 252
     f1c:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);     // turns on INT0
     f1e:	e8 9a       	sbi	0x1d, 0	; 29
     f20:	08 95       	ret

00000f22 <init_user_interface>:



void init_user_interface(void)
{
	init_next_state_button();
     f22:	0e 94 88 07 	call	0xf10	; 0xf10 <init_next_state_button>
     f26:	08 95       	ret

00000f28 <__vector_1>:
	EICRA &= ~(1 << ISC00 | 1 << ISC01);    // low level of INT0 generates an interrupt request: when BUTTON_1 is pressed
	EIMSK |= (1 << INT0);     // turns on INT0
}

ISR (INT0_vect)
{
     f28:	1f 92       	push	r1
     f2a:	0f 92       	push	r0
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	0f 92       	push	r0
     f30:	11 24       	eor	r1, r1
     f32:	8f 93       	push	r24
	cli(); // temporarily disable interrupts
     f34:	f8 94       	cli
	switch(STATE)
     f36:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <STATE>
     f3a:	82 30       	cpi	r24, 0x02	; 2
     f3c:	41 f0       	breq	.+16     	; 0xf4e <__vector_1+0x26>
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	51 f0       	breq	.+20     	; 0xf56 <__vector_1+0x2e>
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	61 f4       	brne	.+24     	; 0xf5e <__vector_1+0x36>
	{
		case STATE_IDLE:
		{
			STATE = STATE_MANUAL;
     f46:	82 e0       	ldi	r24, 0x02	; 2
     f48:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <STATE>
			break;
     f4c:	0b c0       	rjmp	.+22     	; 0xf64 <__vector_1+0x3c>
		}
		case STATE_MANUAL:
		{
			STATE = STATE_TRACKING;
     f4e:	83 e0       	ldi	r24, 0x03	; 3
     f50:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <STATE>
			break;
     f54:	07 c0       	rjmp	.+14     	; 0xf64 <__vector_1+0x3c>
		}
		case STATE_TRACKING:
		{
			STATE = STATE_IDLE;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <STATE>
			break;
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <__vector_1+0x3c>
		}
		default:
		{
			STATE = STATE_IDLE;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <STATE>
			break;
		}
	}
     f64:	8f 91       	pop	r24
     f66:	0f 90       	pop	r0
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	0f 90       	pop	r0
     f6c:	1f 90       	pop	r1
     f6e:	18 95       	reti

00000f70 <__divmodhi4>:
     f70:	97 fb       	bst	r25, 7
     f72:	07 2e       	mov	r0, r23
     f74:	16 f4       	brtc	.+4      	; 0xf7a <__divmodhi4+0xa>
     f76:	00 94       	com	r0
     f78:	07 d0       	rcall	.+14     	; 0xf88 <__divmodhi4_neg1>
     f7a:	77 fd       	sbrc	r23, 7
     f7c:	09 d0       	rcall	.+18     	; 0xf90 <__divmodhi4_neg2>
     f7e:	0e 94 01 08 	call	0x1002	; 0x1002 <__udivmodhi4>
     f82:	07 fc       	sbrc	r0, 7
     f84:	05 d0       	rcall	.+10     	; 0xf90 <__divmodhi4_neg2>
     f86:	3e f4       	brtc	.+14     	; 0xf96 <__divmodhi4_exit>

00000f88 <__divmodhi4_neg1>:
     f88:	90 95       	com	r25
     f8a:	81 95       	neg	r24
     f8c:	9f 4f       	sbci	r25, 0xFF	; 255
     f8e:	08 95       	ret

00000f90 <__divmodhi4_neg2>:
     f90:	70 95       	com	r23
     f92:	61 95       	neg	r22
     f94:	7f 4f       	sbci	r23, 0xFF	; 255

00000f96 <__divmodhi4_exit>:
     f96:	08 95       	ret

00000f98 <__divmodsi4>:
     f98:	05 2e       	mov	r0, r21
     f9a:	97 fb       	bst	r25, 7
     f9c:	1e f4       	brtc	.+6      	; 0xfa4 <__divmodsi4+0xc>
     f9e:	00 94       	com	r0
     fa0:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__negsi2>
     fa4:	57 fd       	sbrc	r21, 7
     fa6:	07 d0       	rcall	.+14     	; 0xfb6 <__divmodsi4_neg2>
     fa8:	0e 94 15 08 	call	0x102a	; 0x102a <__udivmodsi4>
     fac:	07 fc       	sbrc	r0, 7
     fae:	03 d0       	rcall	.+6      	; 0xfb6 <__divmodsi4_neg2>
     fb0:	4e f4       	brtc	.+18     	; 0xfc4 <__divmodsi4_exit>
     fb2:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__negsi2>

00000fb6 <__divmodsi4_neg2>:
     fb6:	50 95       	com	r21
     fb8:	40 95       	com	r20
     fba:	30 95       	com	r19
     fbc:	21 95       	neg	r18
     fbe:	3f 4f       	sbci	r19, 0xFF	; 255
     fc0:	4f 4f       	sbci	r20, 0xFF	; 255
     fc2:	5f 4f       	sbci	r21, 0xFF	; 255

00000fc4 <__divmodsi4_exit>:
     fc4:	08 95       	ret

00000fc6 <__negsi2>:
     fc6:	90 95       	com	r25
     fc8:	80 95       	com	r24
     fca:	70 95       	com	r23
     fcc:	61 95       	neg	r22
     fce:	7f 4f       	sbci	r23, 0xFF	; 255
     fd0:	8f 4f       	sbci	r24, 0xFF	; 255
     fd2:	9f 4f       	sbci	r25, 0xFF	; 255
     fd4:	08 95       	ret

00000fd6 <__umulhisi3>:
     fd6:	a2 9f       	mul	r26, r18
     fd8:	b0 01       	movw	r22, r0
     fda:	b3 9f       	mul	r27, r19
     fdc:	c0 01       	movw	r24, r0
     fde:	a3 9f       	mul	r26, r19
     fe0:	70 0d       	add	r23, r0
     fe2:	81 1d       	adc	r24, r1
     fe4:	11 24       	eor	r1, r1
     fe6:	91 1d       	adc	r25, r1
     fe8:	b2 9f       	mul	r27, r18
     fea:	70 0d       	add	r23, r0
     fec:	81 1d       	adc	r24, r1
     fee:	11 24       	eor	r1, r1
     ff0:	91 1d       	adc	r25, r1
     ff2:	08 95       	ret

00000ff4 <__usmulhisi3>:
     ff4:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>

00000ff8 <__usmulhisi3_tail>:
     ff8:	b7 ff       	sbrs	r27, 7
     ffa:	08 95       	ret
     ffc:	82 1b       	sub	r24, r18
     ffe:	93 0b       	sbc	r25, r19
    1000:	08 95       	ret

00001002 <__udivmodhi4>:
    1002:	aa 1b       	sub	r26, r26
    1004:	bb 1b       	sub	r27, r27
    1006:	51 e1       	ldi	r21, 0x11	; 17
    1008:	07 c0       	rjmp	.+14     	; 0x1018 <__udivmodhi4_ep>

0000100a <__udivmodhi4_loop>:
    100a:	aa 1f       	adc	r26, r26
    100c:	bb 1f       	adc	r27, r27
    100e:	a6 17       	cp	r26, r22
    1010:	b7 07       	cpc	r27, r23
    1012:	10 f0       	brcs	.+4      	; 0x1018 <__udivmodhi4_ep>
    1014:	a6 1b       	sub	r26, r22
    1016:	b7 0b       	sbc	r27, r23

00001018 <__udivmodhi4_ep>:
    1018:	88 1f       	adc	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	5a 95       	dec	r21
    101e:	a9 f7       	brne	.-22     	; 0x100a <__udivmodhi4_loop>
    1020:	80 95       	com	r24
    1022:	90 95       	com	r25
    1024:	bc 01       	movw	r22, r24
    1026:	cd 01       	movw	r24, r26
    1028:	08 95       	ret

0000102a <__udivmodsi4>:
    102a:	a1 e2       	ldi	r26, 0x21	; 33
    102c:	1a 2e       	mov	r1, r26
    102e:	aa 1b       	sub	r26, r26
    1030:	bb 1b       	sub	r27, r27
    1032:	fd 01       	movw	r30, r26
    1034:	0d c0       	rjmp	.+26     	; 0x1050 <__udivmodsi4_ep>

00001036 <__udivmodsi4_loop>:
    1036:	aa 1f       	adc	r26, r26
    1038:	bb 1f       	adc	r27, r27
    103a:	ee 1f       	adc	r30, r30
    103c:	ff 1f       	adc	r31, r31
    103e:	a2 17       	cp	r26, r18
    1040:	b3 07       	cpc	r27, r19
    1042:	e4 07       	cpc	r30, r20
    1044:	f5 07       	cpc	r31, r21
    1046:	20 f0       	brcs	.+8      	; 0x1050 <__udivmodsi4_ep>
    1048:	a2 1b       	sub	r26, r18
    104a:	b3 0b       	sbc	r27, r19
    104c:	e4 0b       	sbc	r30, r20
    104e:	f5 0b       	sbc	r31, r21

00001050 <__udivmodsi4_ep>:
    1050:	66 1f       	adc	r22, r22
    1052:	77 1f       	adc	r23, r23
    1054:	88 1f       	adc	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	1a 94       	dec	r1
    105a:	69 f7       	brne	.-38     	; 0x1036 <__udivmodsi4_loop>
    105c:	60 95       	com	r22
    105e:	70 95       	com	r23
    1060:	80 95       	com	r24
    1062:	90 95       	com	r25
    1064:	9b 01       	movw	r18, r22
    1066:	ac 01       	movw	r20, r24
    1068:	bd 01       	movw	r22, r26
    106a:	cf 01       	movw	r24, r30
    106c:	08 95       	ret

0000106e <_exit>:
    106e:	f8 94       	cli

00001070 <__stop_program>:
    1070:	ff cf       	rjmp	.-2      	; 0x1070 <__stop_program>
