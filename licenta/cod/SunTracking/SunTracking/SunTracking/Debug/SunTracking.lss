
SunTracking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000678  00800100  00000ec4  00000f58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ec4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800778  00800778  000015d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001600  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038d1  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f47  00000000  00000000  00005109  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012c6  00000000  00000000  00006050  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  00007318  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000843  00000000  00000000  000076a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c86  00000000  00000000  00007eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00008b71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	17 e0       	ldi	r17, 0x07	; 7
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ec       	ldi	r30, 0xC4	; 196
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 37       	cpi	r26, 0x78	; 120
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a8 e7       	ldi	r26, 0x78	; 120
  8e:	b7 e0       	ldi	r27, 0x07	; 7
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 38       	cpi	r26, 0x8E	; 142
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 12 04 	call	0x824	; 0x824 <main>
  9e:	0c 94 60 07 	jmp	0xec0	; 0xec0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
  a6:	17 b8       	out	0x07, r1	; 7
  a8:	80 e4       	ldi	r24, 0x40	; 64
  aa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  ae:	87 e8       	ldi	r24, 0x87	; 135
  b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  b4:	08 95       	ret

000000b6 <ADC_get_value>:
  b6:	ec e7       	ldi	r30, 0x7C	; 124
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	90 81       	ld	r25, Z
  bc:	98 7f       	andi	r25, 0xF8	; 248
  be:	87 70       	andi	r24, 0x07	; 7
  c0:	89 2b       	or	r24, r25
  c2:	80 83       	st	Z, r24
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	80 83       	st	Z, r24
  ce:	80 81       	ld	r24, Z
  d0:	86 fd       	sbrc	r24, 6
  d2:	fd cf       	rjmp	.-6      	; 0xce <ADC_get_value+0x18>
  d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  d8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  dc:	08 95       	ret

000000de <display_title>:

#include "hx1230.h"

void display_title(void)
{
	hx_set_coordinates(0, 0);
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("AutoTracking LDR");
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
	hx_set_coordinates(0, 1);
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("  ScorpionIPX");
  f6:	81 e1       	ldi	r24, 0x11	; 17
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
  fe:	08 95       	ret

00000100 <display_data_menu>:
}

void display_data_menu(void)
{
	hx_set_coordinates(0, 3);
 100:	63 e0       	ldi	r22, 0x03	; 3
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("       ||");
 108:	8f e1       	ldi	r24, 0x1F	; 31
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
	hx_set_coordinates(0, 4);
 110:	64 e0       	ldi	r22, 0x04	; 4
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("================");
 118:	89 e2       	ldi	r24, 0x29	; 41
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
	hx_set_coordinates(0, 5);
 120:	65 e0       	ldi	r22, 0x05	; 5
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("       ||");
 128:	8f e1       	ldi	r24, 0x1F	; 31
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
 130:	08 95       	ret

00000132 <display_light_sensor_data>:
}

void display_light_sensor_data(uint8_t sensor, int data)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	eb 01       	movw	r28, r22
	//hx_set_coordinates(60, 3 + sensor);
	hx_set_coordinates(24 + 36 * (sensor & 1), 3 + 2 * (sensor >> 1));
 138:	68 2f       	mov	r22, r24
 13a:	6e 7f       	andi	r22, 0xFE	; 254
 13c:	6d 5f       	subi	r22, 0xFD	; 253
 13e:	81 70       	andi	r24, 0x01	; 1
 140:	94 e2       	ldi	r25, 0x24	; 36
 142:	89 9f       	mul	r24, r25
 144:	80 2d       	mov	r24, r0
 146:	11 24       	eor	r1, r1
 148:	88 5e       	subi	r24, 0xE8	; 232
 14a:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	
	// hx_write_char('0' + ((data / 100) % 10));
	hx_write_char('0' + ((data / 10) % 10));
 14e:	2a e0       	ldi	r18, 0x0A	; 10
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	ce 01       	movw	r24, r28
 154:	b9 01       	movw	r22, r18
 156:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
 15a:	c8 2f       	mov	r28, r24
 15c:	cb 01       	movw	r24, r22
 15e:	b9 01       	movw	r22, r18
 160:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
 164:	80 5d       	subi	r24, 0xD0	; 208
 166:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + (data % 10));
 16a:	80 e3       	ldi	r24, 0x30	; 48
 16c:	8c 0f       	add	r24, r28
 16e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	
	hx_set_coordinates(18, 7);
 172:	67 e0       	ldi	r22, 0x07	; 7
 174:	82 e1       	ldi	r24, 0x12	; 18
 176:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_char('0' + OCR1A / 100);
 17a:	c8 e8       	ldi	r28, 0x88	; 136
 17c:	d0 e0       	ldi	r29, 0x00	; 0
 17e:	28 81       	ld	r18, Y
 180:	39 81       	ldd	r19, Y+1	; 0x01
 182:	36 95       	lsr	r19
 184:	27 95       	ror	r18
 186:	36 95       	lsr	r19
 188:	27 95       	ror	r18
 18a:	ab e7       	ldi	r26, 0x7B	; 123
 18c:	b4 e1       	ldi	r27, 0x14	; 20
 18e:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 192:	96 95       	lsr	r25
 194:	87 95       	ror	r24
 196:	80 5d       	subi	r24, 0xD0	; 208
 198:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + (OCR1A / 10) % 10);
 19c:	28 81       	ld	r18, Y
 19e:	39 81       	ldd	r19, Y+1	; 0x01
 1a0:	ad ec       	ldi	r26, 0xCD	; 205
 1a2:	bc ec       	ldi	r27, 0xCC	; 204
 1a4:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 1a8:	ac 01       	movw	r20, r24
 1aa:	56 95       	lsr	r21
 1ac:	47 95       	ror	r20
 1ae:	56 95       	lsr	r21
 1b0:	47 95       	ror	r20
 1b2:	56 95       	lsr	r21
 1b4:	47 95       	ror	r20
 1b6:	9a 01       	movw	r18, r20
 1b8:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 1bc:	96 95       	lsr	r25
 1be:	87 95       	ror	r24
 1c0:	96 95       	lsr	r25
 1c2:	87 95       	ror	r24
 1c4:	96 95       	lsr	r25
 1c6:	87 95       	ror	r24
 1c8:	9c 01       	movw	r18, r24
 1ca:	22 0f       	add	r18, r18
 1cc:	33 1f       	adc	r19, r19
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	82 0f       	add	r24, r18
 1dc:	93 1f       	adc	r25, r19
 1de:	9a 01       	movw	r18, r20
 1e0:	28 1b       	sub	r18, r24
 1e2:	39 0b       	sbc	r19, r25
 1e4:	c9 01       	movw	r24, r18
 1e6:	80 5d       	subi	r24, 0xD0	; 208
 1e8:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + OCR1A % 10);
 1ec:	48 81       	ld	r20, Y
 1ee:	59 81       	ldd	r21, Y+1	; 0x01
 1f0:	9a 01       	movw	r18, r20
 1f2:	ad ec       	ldi	r26, 0xCD	; 205
 1f4:	bc ec       	ldi	r27, 0xCC	; 204
 1f6:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 1fa:	96 95       	lsr	r25
 1fc:	87 95       	ror	r24
 1fe:	96 95       	lsr	r25
 200:	87 95       	ror	r24
 202:	96 95       	lsr	r25
 204:	87 95       	ror	r24
 206:	9c 01       	movw	r18, r24
 208:	22 0f       	add	r18, r18
 20a:	33 1f       	adc	r19, r19
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	82 0f       	add	r24, r18
 21a:	93 1f       	adc	r25, r19
 21c:	9a 01       	movw	r18, r20
 21e:	28 1b       	sub	r18, r24
 220:	39 0b       	sbc	r19, r25
 222:	c9 01       	movw	r24, r18
 224:	80 5d       	subi	r24, 0xD0	; 208
 226:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	
	hx_set_coordinates(66, 7);
 22a:	67 e0       	ldi	r22, 0x07	; 7
 22c:	82 e4       	ldi	r24, 0x42	; 66
 22e:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_char('0' + OCR1B / 100);
 232:	ca e8       	ldi	r28, 0x8A	; 138
 234:	d0 e0       	ldi	r29, 0x00	; 0
 236:	28 81       	ld	r18, Y
 238:	39 81       	ldd	r19, Y+1	; 0x01
 23a:	36 95       	lsr	r19
 23c:	27 95       	ror	r18
 23e:	36 95       	lsr	r19
 240:	27 95       	ror	r18
 242:	ab e7       	ldi	r26, 0x7B	; 123
 244:	b4 e1       	ldi	r27, 0x14	; 20
 246:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 24a:	96 95       	lsr	r25
 24c:	87 95       	ror	r24
 24e:	80 5d       	subi	r24, 0xD0	; 208
 250:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + (OCR1B / 10) % 10);
 254:	28 81       	ld	r18, Y
 256:	39 81       	ldd	r19, Y+1	; 0x01
 258:	ad ec       	ldi	r26, 0xCD	; 205
 25a:	bc ec       	ldi	r27, 0xCC	; 204
 25c:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 260:	ac 01       	movw	r20, r24
 262:	56 95       	lsr	r21
 264:	47 95       	ror	r20
 266:	56 95       	lsr	r21
 268:	47 95       	ror	r20
 26a:	56 95       	lsr	r21
 26c:	47 95       	ror	r20
 26e:	9a 01       	movw	r18, r20
 270:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 274:	96 95       	lsr	r25
 276:	87 95       	ror	r24
 278:	96 95       	lsr	r25
 27a:	87 95       	ror	r24
 27c:	96 95       	lsr	r25
 27e:	87 95       	ror	r24
 280:	9c 01       	movw	r18, r24
 282:	22 0f       	add	r18, r18
 284:	33 1f       	adc	r19, r19
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	82 0f       	add	r24, r18
 294:	93 1f       	adc	r25, r19
 296:	9a 01       	movw	r18, r20
 298:	28 1b       	sub	r18, r24
 29a:	39 0b       	sbc	r19, r25
 29c:	c9 01       	movw	r24, r18
 29e:	80 5d       	subi	r24, 0xD0	; 208
 2a0:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + OCR1B % 10);
 2a4:	48 81       	ld	r20, Y
 2a6:	59 81       	ldd	r21, Y+1	; 0x01
 2a8:	9a 01       	movw	r18, r20
 2aa:	ad ec       	ldi	r26, 0xCD	; 205
 2ac:	bc ec       	ldi	r27, 0xCC	; 204
 2ae:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 2b2:	96 95       	lsr	r25
 2b4:	87 95       	ror	r24
 2b6:	96 95       	lsr	r25
 2b8:	87 95       	ror	r24
 2ba:	96 95       	lsr	r25
 2bc:	87 95       	ror	r24
 2be:	9c 01       	movw	r18, r24
 2c0:	22 0f       	add	r18, r18
 2c2:	33 1f       	adc	r19, r19
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	82 0f       	add	r24, r18
 2d2:	93 1f       	adc	r25, r19
 2d4:	9a 01       	movw	r18, r20
 2d6:	28 1b       	sub	r18, r24
 2d8:	39 0b       	sbc	r19, r25
 2da:	c9 01       	movw	r24, r18
 2dc:	80 5d       	subi	r24, 0xD0	; 208
 2de:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
}
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <display_idle_state_message>:

void display_idle_state_message(void)
{
	hx_set_coordinates(0, 3);
 2e8:	63 e0       	ldi	r22, 0x03	; 3
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("- system is in ");
 2f0:	8a e3       	ldi	r24, 0x3A	; 58
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
	hx_set_coordinates(0, 4);
 2f8:	64 e0       	ldi	r22, 0x04	; 4
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("IDLE mode");
 300:	8a e4       	ldi	r24, 0x4A	; 74
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
	hx_set_coordinates(0, 6);
 308:	66 e0       	ldi	r22, 0x06	; 6
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("going to sleep");
 310:	84 e5       	ldi	r24, 0x54	; 84
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
 318:	08 95       	ret

0000031a <display_manual_state_message>:
}


void display_manual_state_message(void)
{
	hx_set_coordinates(0, 3);
 31a:	63 e0       	ldi	r22, 0x03	; 3
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("- system is in ");
 322:	8a e3       	ldi	r24, 0x3A	; 58
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
	hx_set_coordinates(0, 4);
 32a:	64 e0       	ldi	r22, 0x04	; 4
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("MANUAL mode");
 332:	83 e6       	ldi	r24, 0x63	; 99
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
	
	hx_set_coordinates(0, 6);
 33a:	66 e0       	ldi	r22, 0x06	; 6
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("JX:");
 342:	8f e6       	ldi	r24, 0x6F	; 111
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
	hx_set_coordinates(0, 7);
 34a:	67 e0       	ldi	r22, 0x07	; 7
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_string("JY:");
 352:	83 e7       	ldi	r24, 0x73	; 115
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hx_write_string>
 35a:	08 95       	ret

0000035c <display_joystick_data>:
}

void display_joystick_data(unsigned int x, unsigned int y)
{
 35c:	ef 92       	push	r14
 35e:	ff 92       	push	r15
 360:	0f 93       	push	r16
 362:	1f 93       	push	r17
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	7c 01       	movw	r14, r24
 36a:	8b 01       	movw	r16, r22
	hx_set_coordinates(24, 6);
 36c:	66 e0       	ldi	r22, 0x06	; 6
 36e:	88 e1       	ldi	r24, 0x18	; 24
 370:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_char('0' + x / 1000);
 374:	97 01       	movw	r18, r14
 376:	36 95       	lsr	r19
 378:	27 95       	ror	r18
 37a:	36 95       	lsr	r19
 37c:	27 95       	ror	r18
 37e:	36 95       	lsr	r19
 380:	27 95       	ror	r18
 382:	a5 ec       	ldi	r26, 0xC5	; 197
 384:	b0 e2       	ldi	r27, 0x20	; 32
 386:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 38a:	92 95       	swap	r25
 38c:	82 95       	swap	r24
 38e:	8f 70       	andi	r24, 0x0F	; 15
 390:	89 27       	eor	r24, r25
 392:	9f 70       	andi	r25, 0x0F	; 15
 394:	89 27       	eor	r24, r25
 396:	80 5d       	subi	r24, 0xD0	; 208
 398:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + (x / 100) % 10);
 39c:	97 01       	movw	r18, r14
 39e:	36 95       	lsr	r19
 3a0:	27 95       	ror	r18
 3a2:	36 95       	lsr	r19
 3a4:	27 95       	ror	r18
 3a6:	ab e7       	ldi	r26, 0x7B	; 123
 3a8:	b4 e1       	ldi	r27, 0x14	; 20
 3aa:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 3ae:	ac 01       	movw	r20, r24
 3b0:	56 95       	lsr	r21
 3b2:	47 95       	ror	r20
 3b4:	9a 01       	movw	r18, r20
 3b6:	ad ec       	ldi	r26, 0xCD	; 205
 3b8:	bc ec       	ldi	r27, 0xCC	; 204
 3ba:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 3be:	96 95       	lsr	r25
 3c0:	87 95       	ror	r24
 3c2:	96 95       	lsr	r25
 3c4:	87 95       	ror	r24
 3c6:	96 95       	lsr	r25
 3c8:	87 95       	ror	r24
 3ca:	9c 01       	movw	r18, r24
 3cc:	22 0f       	add	r18, r18
 3ce:	33 1f       	adc	r19, r19
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	82 0f       	add	r24, r18
 3de:	93 1f       	adc	r25, r19
 3e0:	9a 01       	movw	r18, r20
 3e2:	28 1b       	sub	r18, r24
 3e4:	39 0b       	sbc	r19, r25
 3e6:	c9 01       	movw	r24, r18
 3e8:	80 5d       	subi	r24, 0xD0	; 208
 3ea:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + (x / 10) % 10);
 3ee:	97 01       	movw	r18, r14
 3f0:	ad ec       	ldi	r26, 0xCD	; 205
 3f2:	bc ec       	ldi	r27, 0xCC	; 204
 3f4:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 3f8:	ec 01       	movw	r28, r24
 3fa:	d6 95       	lsr	r29
 3fc:	c7 95       	ror	r28
 3fe:	d6 95       	lsr	r29
 400:	c7 95       	ror	r28
 402:	d6 95       	lsr	r29
 404:	c7 95       	ror	r28
 406:	9e 01       	movw	r18, r28
 408:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 40c:	96 95       	lsr	r25
 40e:	87 95       	ror	r24
 410:	96 95       	lsr	r25
 412:	87 95       	ror	r24
 414:	96 95       	lsr	r25
 416:	87 95       	ror	r24
 418:	9c 01       	movw	r18, r24
 41a:	22 0f       	add	r18, r18
 41c:	33 1f       	adc	r19, r19
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	82 0f       	add	r24, r18
 42c:	93 1f       	adc	r25, r19
 42e:	9e 01       	movw	r18, r28
 430:	28 1b       	sub	r18, r24
 432:	39 0b       	sbc	r19, r25
 434:	c9 01       	movw	r24, r18
 436:	80 5d       	subi	r24, 0xD0	; 208
 438:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + x % 10);
 43c:	ce 01       	movw	r24, r28
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	cc 0f       	add	r28, r28
 444:	dd 1f       	adc	r29, r29
 446:	cc 0f       	add	r28, r28
 448:	dd 1f       	adc	r29, r29
 44a:	cc 0f       	add	r28, r28
 44c:	dd 1f       	adc	r29, r29
 44e:	c8 0f       	add	r28, r24
 450:	d9 1f       	adc	r29, r25
 452:	c7 01       	movw	r24, r14
 454:	8c 1b       	sub	r24, r28
 456:	9d 0b       	sbc	r25, r29
 458:	80 5d       	subi	r24, 0xD0	; 208
 45a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_set_coordinates(24, 7);
 45e:	67 e0       	ldi	r22, 0x07	; 7
 460:	88 e1       	ldi	r24, 0x18	; 24
 462:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_char('0' + y / 1000);
 466:	98 01       	movw	r18, r16
 468:	36 95       	lsr	r19
 46a:	27 95       	ror	r18
 46c:	36 95       	lsr	r19
 46e:	27 95       	ror	r18
 470:	36 95       	lsr	r19
 472:	27 95       	ror	r18
 474:	a5 ec       	ldi	r26, 0xC5	; 197
 476:	b0 e2       	ldi	r27, 0x20	; 32
 478:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 47c:	92 95       	swap	r25
 47e:	82 95       	swap	r24
 480:	8f 70       	andi	r24, 0x0F	; 15
 482:	89 27       	eor	r24, r25
 484:	9f 70       	andi	r25, 0x0F	; 15
 486:	89 27       	eor	r24, r25
 488:	80 5d       	subi	r24, 0xD0	; 208
 48a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + (y / 100) % 10);
 48e:	98 01       	movw	r18, r16
 490:	36 95       	lsr	r19
 492:	27 95       	ror	r18
 494:	36 95       	lsr	r19
 496:	27 95       	ror	r18
 498:	ab e7       	ldi	r26, 0x7B	; 123
 49a:	b4 e1       	ldi	r27, 0x14	; 20
 49c:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 4a0:	ac 01       	movw	r20, r24
 4a2:	56 95       	lsr	r21
 4a4:	47 95       	ror	r20
 4a6:	9a 01       	movw	r18, r20
 4a8:	ad ec       	ldi	r26, 0xCD	; 205
 4aa:	bc ec       	ldi	r27, 0xCC	; 204
 4ac:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 4b0:	96 95       	lsr	r25
 4b2:	87 95       	ror	r24
 4b4:	96 95       	lsr	r25
 4b6:	87 95       	ror	r24
 4b8:	96 95       	lsr	r25
 4ba:	87 95       	ror	r24
 4bc:	9c 01       	movw	r18, r24
 4be:	22 0f       	add	r18, r18
 4c0:	33 1f       	adc	r19, r19
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	82 0f       	add	r24, r18
 4d0:	93 1f       	adc	r25, r19
 4d2:	9a 01       	movw	r18, r20
 4d4:	28 1b       	sub	r18, r24
 4d6:	39 0b       	sbc	r19, r25
 4d8:	c9 01       	movw	r24, r18
 4da:	80 5d       	subi	r24, 0xD0	; 208
 4dc:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + (y / 10) % 10);
 4e0:	98 01       	movw	r18, r16
 4e2:	ad ec       	ldi	r26, 0xCD	; 205
 4e4:	bc ec       	ldi	r27, 0xCC	; 204
 4e6:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 4ea:	ec 01       	movw	r28, r24
 4ec:	d6 95       	lsr	r29
 4ee:	c7 95       	ror	r28
 4f0:	d6 95       	lsr	r29
 4f2:	c7 95       	ror	r28
 4f4:	d6 95       	lsr	r29
 4f6:	c7 95       	ror	r28
 4f8:	9e 01       	movw	r18, r28
 4fa:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 4fe:	96 95       	lsr	r25
 500:	87 95       	ror	r24
 502:	96 95       	lsr	r25
 504:	87 95       	ror	r24
 506:	96 95       	lsr	r25
 508:	87 95       	ror	r24
 50a:	9c 01       	movw	r18, r24
 50c:	22 0f       	add	r18, r18
 50e:	33 1f       	adc	r19, r19
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	82 0f       	add	r24, r18
 51e:	93 1f       	adc	r25, r19
 520:	9e 01       	movw	r18, r28
 522:	28 1b       	sub	r18, r24
 524:	39 0b       	sbc	r19, r25
 526:	c9 01       	movw	r24, r18
 528:	80 5d       	subi	r24, 0xD0	; 208
 52a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + y % 10);
 52e:	ce 01       	movw	r24, r28
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	cc 0f       	add	r28, r28
 536:	dd 1f       	adc	r29, r29
 538:	cc 0f       	add	r28, r28
 53a:	dd 1f       	adc	r29, r29
 53c:	cc 0f       	add	r28, r28
 53e:	dd 1f       	adc	r29, r29
 540:	c8 0f       	add	r28, r24
 542:	d9 1f       	adc	r29, r25
 544:	c8 01       	movw	r24, r16
 546:	8c 1b       	sub	r24, r28
 548:	9d 0b       	sbc	r25, r29
 54a:	80 5d       	subi	r24, 0xD0	; 208
 54c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	1f 91       	pop	r17
 556:	0f 91       	pop	r16
 558:	ff 90       	pop	r15
 55a:	ef 90       	pop	r14
 55c:	08 95       	ret

0000055e <hx_send_data>:
}

void hx_send_data(unsigned char _data)
{
	// activate hx1230
	CLEAR_HX_CE;
 55e:	5d 98       	cbi	0x0b, 5	; 11
	
	// configure communication for data transfer
	SET_HX_DIN;
 560:	59 9a       	sbi	0x0b, 1	; 11
	
	// toggle clock
	SET_HX_CLK;
 562:	58 9a       	sbi	0x0b, 0	; 11
	CLEAR_HX_CLK;
 564:	58 98       	cbi	0x0b, 0	; 11
	
	// send the actual data, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
 566:	27 e0       	ldi	r18, 0x07	; 7
 568:	30 e0       	ldi	r19, 0x00	; 0
	{
		// calculate bit to be send
		if(((_data >> bit_position) & 1) == 1)
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	ac 01       	movw	r20, r24
 56e:	02 2e       	mov	r0, r18
 570:	02 c0       	rjmp	.+4      	; 0x576 <hx_send_data+0x18>
 572:	55 95       	asr	r21
 574:	47 95       	ror	r20
 576:	0a 94       	dec	r0
 578:	e2 f7       	brpl	.-8      	; 0x572 <hx_send_data+0x14>
 57a:	40 ff       	sbrs	r20, 0
 57c:	02 c0       	rjmp	.+4      	; 0x582 <hx_send_data+0x24>
		{
			SET_HX_DIN;
 57e:	59 9a       	sbi	0x0b, 1	; 11
 580:	01 c0       	rjmp	.+2      	; 0x584 <hx_send_data+0x26>
		}
		else
		{
			CLEAR_HX_DIN;
 582:	59 98       	cbi	0x0b, 1	; 11
		}
		
		// toggle clock
		SET_HX_CLK;
 584:	58 9a       	sbi	0x0b, 0	; 11
		CLEAR_HX_CLK;
 586:	58 98       	cbi	0x0b, 0	; 11
	// toggle clock
	SET_HX_CLK;
	CLEAR_HX_CLK;
	
	// send the actual data, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
 588:	21 50       	subi	r18, 0x01	; 1
 58a:	31 09       	sbc	r19, r1
 58c:	78 f7       	brcc	.-34     	; 0x56c <hx_send_data+0xe>
		SET_HX_CLK;
		CLEAR_HX_CLK;
	}
	
	// deactivate hx1230
	SET_HX_CE;
 58e:	5d 9a       	sbi	0x0b, 5	; 11
 590:	08 95       	ret

00000592 <hx_send_command>:
}

void hx_send_command(unsigned char _command)
{
	// activate hx1230
	CLEAR_HX_CE;
 592:	5d 98       	cbi	0x0b, 5	; 11
	
	// configure communication for command transfer
	CLEAR_HX_DIN;
 594:	59 98       	cbi	0x0b, 1	; 11
	
	// toggle clock
	SET_HX_CLK;
 596:	58 9a       	sbi	0x0b, 0	; 11
	CLEAR_HX_CLK;
 598:	58 98       	cbi	0x0b, 0	; 11
	
	// send the actual command, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
 59a:	27 e0       	ldi	r18, 0x07	; 7
 59c:	30 e0       	ldi	r19, 0x00	; 0
	{
		// calculate bit to be send
		if(((_command >> bit_position) & 1) == 1)
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	ac 01       	movw	r20, r24
 5a2:	02 2e       	mov	r0, r18
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <hx_send_command+0x18>
 5a6:	55 95       	asr	r21
 5a8:	47 95       	ror	r20
 5aa:	0a 94       	dec	r0
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <hx_send_command+0x14>
 5ae:	40 ff       	sbrs	r20, 0
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <hx_send_command+0x24>
		{
			SET_HX_DIN;
 5b2:	59 9a       	sbi	0x0b, 1	; 11
 5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <hx_send_command+0x26>
		}
		else
		{
			CLEAR_HX_DIN;
 5b6:	59 98       	cbi	0x0b, 1	; 11
		}
		
		// toggle clock
		SET_HX_CLK;
 5b8:	58 9a       	sbi	0x0b, 0	; 11
		CLEAR_HX_CLK;
 5ba:	58 98       	cbi	0x0b, 0	; 11
	// toggle clock
	SET_HX_CLK;
	CLEAR_HX_CLK;
	
	// send the actual command, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
 5bc:	21 50       	subi	r18, 0x01	; 1
 5be:	31 09       	sbc	r19, r1
 5c0:	78 f7       	brcc	.-34     	; 0x5a0 <hx_send_command+0xe>
		SET_HX_CLK;
		CLEAR_HX_CLK;
	}
	
	// deactivate hx1230
	SET_HX_CE;
 5c2:	5d 9a       	sbi	0x0b, 5	; 11
 5c4:	08 95       	ret

000005c6 <init_hx1230_control>:


void init_hx1230_control(void)
{
	// set required pins as output
	HX1230_DDR |= ((1 << HX_RST) | (1 << HX_CE) | (1 << HX_DIN) | (1 << HX_CLK));
 5c6:	8a b1       	in	r24, 0x0a	; 10
 5c8:	83 66       	ori	r24, 0x63	; 99
 5ca:	8a b9       	out	0x0a, r24	; 10
	
	// set idle state
	CLEAR_HX_CLK;
 5cc:	58 98       	cbi	0x0b, 0	; 11
	CLEAR_HX_RST;
 5ce:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d0:	83 ed       	ldi	r24, 0xD3	; 211
 5d2:	90 e3       	ldi	r25, 0x30	; 48
 5d4:	01 97       	sbiw	r24, 0x01	; 1
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <init_hx1230_control+0xe>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <init_hx1230_control+0x14>
 5da:	00 00       	nop
	_delay_ms(50);
	SET_HX_RST;
 5dc:	5e 9a       	sbi	0x0b, 6	; 11
	CLEAR_HX_CE;
 5de:	5d 98       	cbi	0x0b, 5	; 11
 5e0:	89 ef       	ldi	r24, 0xF9	; 249
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	01 97       	sbiw	r24, 0x01	; 1
 5e6:	f1 f7       	brne	.-4      	; 0x5e4 <init_hx1230_control+0x1e>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <init_hx1230_control+0x24>
 5ea:	00 00       	nop
	_delay_ms(1);
	SET_HX_CE;
 5ec:	5d 9a       	sbi	0x0b, 5	; 11
 5ee:	89 ef       	ldi	r24, 0xF9	; 249
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	01 97       	sbiw	r24, 0x01	; 1
 5f4:	f1 f7       	brne	.-4      	; 0x5f2 <init_hx1230_control+0x2c>
 5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <init_hx1230_control+0x32>
 5f8:	00 00       	nop
	_delay_ms(1);
	
	// commands needed to initialize hx1230 display
	// found within a chinese data sheet
	
	hx_send_command(0x2f);
 5fa:	8f e2       	ldi	r24, 0x2F	; 47
 5fc:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
	hx_send_command(0x90);
 600:	80 e9       	ldi	r24, 0x90	; 144
 602:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
	hx_send_command(0xa6);
 606:	86 ea       	ldi	r24, 0xA6	; 166
 608:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
	hx_send_command(0xa4);
 60c:	84 ea       	ldi	r24, 0xA4	; 164
 60e:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
	hx_send_command(0xaf);
 612:	8f ea       	ldi	r24, 0xAF	; 175
 614:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
	
	hx_send_command(0x40);
 618:	80 e4       	ldi	r24, 0x40	; 64
 61a:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
	hx_send_command(0xb0);
 61e:	80 eb       	ldi	r24, 0xB0	; 176
 620:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
	hx_send_command(0x10);
 624:	80 e1       	ldi	r24, 0x10	; 16
 626:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
	hx_send_command(0x00);
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
 630:	08 95       	ret

00000632 <hx_set_coordinates>:
	// deactivate hx1230
	SET_HX_CE;
}

void hx_set_coordinates(unsigned char _x, unsigned char _y)
{
 632:	cf 93       	push	r28
 634:	c8 2f       	mov	r28, r24
	// 0, 0 is the upper left corner
	
	hx_send_command(0xB0 + _y);
 636:	80 eb       	ldi	r24, 0xB0	; 176
 638:	86 0f       	add	r24, r22
 63a:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
	hx_send_command(0x10 | ((_x & 0x7F) >> 4));
 63e:	8c 2f       	mov	r24, r28
 640:	8f 77       	andi	r24, 0x7F	; 127
 642:	82 95       	swap	r24
 644:	8f 70       	andi	r24, 0x0F	; 15
 646:	80 61       	ori	r24, 0x10	; 16
 648:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
	hx_send_command(0x0F & _x);
 64c:	8c 2f       	mov	r24, r28
 64e:	8f 70       	andi	r24, 0x0F	; 15
 650:	0e 94 c9 02 	call	0x592	; 0x592 <hx_send_command>
}
 654:	cf 91       	pop	r28
 656:	08 95       	ret

00000658 <hx_clear_screen>:

void hx_clear_screen(void)
{
 658:	cf 93       	push	r28
 65a:	df 93       	push	r29
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
 65c:	60 e0       	ldi	r22, 0x00	; 0
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
 664:	d9 e0       	ldi	r29, 0x09	; 9
 666:	07 c0       	rjmp	.+14     	; 0x676 <hx_clear_screen+0x1e>
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
	{
		for(col = 0; col <= HX_MAX_COL; col ++)
		{
			hx_send_data(0x00);
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	0e 94 af 02 	call	0x55e	; 0x55e <hx_send_data>
 66e:	c1 50       	subi	r28, 0x01	; 1
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
	{
		for(col = 0; col <= HX_MAX_COL; col ++)
 670:	d9 f7       	brne	.-10     	; 0x668 <hx_clear_screen+0x10>
 672:	d1 50       	subi	r29, 0x01	; 1
{
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
 674:	11 f0       	breq	.+4      	; 0x67a <hx_clear_screen+0x22>
	hx_send_command(0x10 | ((_x & 0x7F) >> 4));
	hx_send_command(0x0F & _x);
}

void hx_clear_screen(void)
{
 676:	c1 e6       	ldi	r28, 0x61	; 97
 678:	f7 cf       	rjmp	.-18     	; 0x668 <hx_clear_screen+0x10>
		for(col = 0; col <= HX_MAX_COL; col ++)
		{
			hx_send_data(0x00);
		}
	}
}
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	08 95       	ret

00000680 <hx_fill_screen>:

void hx_fill_screen(void)
{
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
 68c:	d9 e0       	ldi	r29, 0x09	; 9
 68e:	07 c0       	rjmp	.+14     	; 0x69e <hx_fill_screen+0x1e>
	
	for(row = 0; row < 9; row ++)
	{
		for(col = 0; col < 96; col ++)
		{
			hx_send_data(0xFF);
 690:	8f ef       	ldi	r24, 0xFF	; 255
 692:	0e 94 af 02 	call	0x55e	; 0x55e <hx_send_data>
 696:	c1 50       	subi	r28, 0x01	; 1
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row < 9; row ++)
	{
		for(col = 0; col < 96; col ++)
 698:	d9 f7       	brne	.-10     	; 0x690 <hx_fill_screen+0x10>
 69a:	d1 50       	subi	r29, 0x01	; 1
{
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row < 9; row ++)
 69c:	11 f0       	breq	.+4      	; 0x6a2 <hx_fill_screen+0x22>
		}
	}
}

void hx_fill_screen(void)
{
 69e:	c0 e6       	ldi	r28, 0x60	; 96
 6a0:	f7 cf       	rjmp	.-18     	; 0x690 <hx_fill_screen+0x10>
		for(col = 0; col < 96; col ++)
		{
			hx_send_data(0xFF);
		}
	}
}
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	08 95       	ret

000006a8 <hx_write_char>:

void hx_write_char(const unsigned char _character)
{
 6a8:	0f 93       	push	r16
 6aa:	1f 93       	push	r17
 6ac:	cf 93       	push	r28
 6ae:	df 93       	push	r29
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	ec 01       	movw	r28, r24
 6b4:	cc 0f       	add	r28, r28
 6b6:	dd 1f       	adc	r29, r29
 6b8:	c8 0f       	add	r28, r24
 6ba:	d9 1f       	adc	r29, r25
 6bc:	cc 0f       	add	r28, r28
 6be:	dd 1f       	adc	r29, r29
 6c0:	c9 58       	subi	r28, 0x89	; 137
 6c2:	de 4f       	sbci	r29, 0xFE	; 254
 6c4:	01 96       	adiw	r24, 0x01	; 1
 6c6:	8c 01       	movw	r16, r24
 6c8:	00 0f       	add	r16, r16
 6ca:	11 1f       	adc	r17, r17
 6cc:	80 0f       	add	r24, r16
 6ce:	91 1f       	adc	r25, r17
 6d0:	8c 01       	movw	r16, r24
 6d2:	00 0f       	add	r16, r16
 6d4:	11 1f       	adc	r17, r17
 6d6:	09 58       	subi	r16, 0x89	; 137
 6d8:	1e 4f       	sbci	r17, 0xFE	; 254
	
	for(int row_index = 0; row_index < 6; row_index ++)
	{
		hx_send_data(HX_character[_character][row_index]);
 6da:	89 91       	ld	r24, Y+
 6dc:	0e 94 af 02 	call	0x55e	; 0x55e <hx_send_data>
}

void hx_write_char(const unsigned char _character)
{
	
	for(int row_index = 0; row_index < 6; row_index ++)
 6e0:	c0 17       	cp	r28, r16
 6e2:	d1 07       	cpc	r29, r17
 6e4:	d1 f7       	brne	.-12     	; 0x6da <hx_write_char+0x32>
	{
		hx_send_data(HX_character[_character][row_index]);
	}
}
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	1f 91       	pop	r17
 6ec:	0f 91       	pop	r16
 6ee:	08 95       	ret

000006f0 <hx_write_string>:

void hx_write_string(const char *_characters_array)
{
 6f0:	0f 93       	push	r16
 6f2:	1f 93       	push	r17
 6f4:	cf 93       	push	r28
 6f6:	df 93       	push	r29
	int string_length = strlen(_characters_array);
 6f8:	fc 01       	movw	r30, r24
 6fa:	01 90       	ld	r0, Z+
 6fc:	00 20       	and	r0, r0
 6fe:	e9 f7       	brne	.-6      	; 0x6fa <hx_write_string+0xa>
 700:	31 97       	sbiw	r30, 0x01	; 1
 702:	e8 1b       	sub	r30, r24
 704:	f9 0b       	sbc	r31, r25
	for(int char_index = 0; char_index < string_length; char_index++)
 706:	1e 16       	cp	r1, r30
 708:	1f 06       	cpc	r1, r31
 70a:	54 f4       	brge	.+20     	; 0x720 <hx_write_string+0x30>
 70c:	ec 01       	movw	r28, r24
 70e:	8c 01       	movw	r16, r24
 710:	0e 0f       	add	r16, r30
 712:	1f 1f       	adc	r17, r31
	{
		hx_write_char((const unsigned char)(_characters_array[char_index]));
 714:	89 91       	ld	r24, Y+
 716:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
}

void hx_write_string(const char *_characters_array)
{
	int string_length = strlen(_characters_array);
	for(int char_index = 0; char_index < string_length; char_index++)
 71a:	c0 17       	cp	r28, r16
 71c:	d1 07       	cpc	r29, r17
 71e:	d1 f7       	brne	.-12     	; 0x714 <hx_write_string+0x24>
	{
		hx_write_char((const unsigned char)(_characters_array[char_index]));
	}
 720:	df 91       	pop	r29
 722:	cf 91       	pop	r28
 724:	1f 91       	pop	r17
 726:	0f 91       	pop	r16
 728:	08 95       	ret

0000072a <manual_control>:
#include "user_interface.h"
#include "adc_driver.h"
#include "graphics.h"

void manual_control(void)
{
 72a:	cf 93       	push	r28
 72c:	df 93       	push	r29
	unsigned int x = ADC_get_value(ADC_CHANNEL_X_AXIS);
 72e:	85 e0       	ldi	r24, 0x05	; 5
 730:	0e 94 5b 00 	call	0xb6	; 0xb6 <ADC_get_value>
 734:	ec 01       	movw	r28, r24
	unsigned int y = ADC_get_value(ADC_CHANNEL_Y_AXIS);
 736:	84 e0       	ldi	r24, 0x04	; 4
 738:	0e 94 5b 00 	call	0xb6	; 0xb6 <ADC_get_value>
	
	display_joystick_data(x, y);
 73c:	bc 01       	movw	r22, r24
 73e:	ce 01       	movw	r24, r28
 740:	0e 94 ae 01 	call	0x35c	; 0x35c <display_joystick_data>
 744:	df 91       	pop	r29
 746:	cf 91       	pop	r28
 748:	08 95       	ret

0000074a <get_filtered_light_intensity>:
 74a:	0f 93       	push	r16
 74c:	1f 93       	push	r17
 74e:	cf 93       	push	r28
 750:	df 93       	push	r29
 752:	d8 2f       	mov	r29, r24
 754:	cf e0       	ldi	r28, 0x0F	; 15
 756:	00 e0       	ldi	r16, 0x00	; 0
 758:	10 e0       	ldi	r17, 0x00	; 0
 75a:	8d 2f       	mov	r24, r29
 75c:	0e 94 5b 00 	call	0xb6	; 0xb6 <ADC_get_value>
 760:	08 0f       	add	r16, r24
 762:	19 1f       	adc	r17, r25
 764:	c1 50       	subi	r28, 0x01	; 1
 766:	c9 f7       	brne	.-14     	; 0x75a <get_filtered_light_intensity+0x10>
 768:	98 01       	movw	r18, r16
 76a:	a9 e8       	ldi	r26, 0x89	; 137
 76c:	b8 e8       	ldi	r27, 0x88	; 136
 76e:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 772:	dc 01       	movw	r26, r24
 774:	b6 95       	lsr	r27
 776:	a7 95       	ror	r26
 778:	b6 95       	lsr	r27
 77a:	a7 95       	ror	r26
 77c:	b6 95       	lsr	r27
 77e:	a7 95       	ror	r26
 780:	24 e6       	ldi	r18, 0x64	; 100
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	0e 94 23 07 	call	0xe46	; 0xe46 <__usmulhisi3>
 788:	2f ef       	ldi	r18, 0xFF	; 255
 78a:	33 e0       	ldi	r19, 0x03	; 3
 78c:	40 e0       	ldi	r20, 0x00	; 0
 78e:	50 e0       	ldi	r21, 0x00	; 0
 790:	0e 94 f5 06 	call	0xdea	; 0xdea <__divmodsi4>
 794:	84 e6       	ldi	r24, 0x64	; 100
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	82 1b       	sub	r24, r18
 79a:	93 0b       	sbc	r25, r19
 79c:	df 91       	pop	r29
 79e:	cf 91       	pop	r28
 7a0:	1f 91       	pop	r17
 7a2:	0f 91       	pop	r16
 7a4:	08 95       	ret

000007a6 <uC_init>:
 7a6:	87 ea       	ldi	r24, 0xA7	; 167
 7a8:	91 e6       	ldi	r25, 0x61	; 97
 7aa:	01 97       	sbiw	r24, 0x01	; 1
 7ac:	f1 f7       	brne	.-4      	; 0x7aa <uC_init+0x4>
 7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <uC_init+0xa>
 7b0:	00 00       	nop
{
	// Wait for system to get fully powered up
	_delay_ms(100);
	
	// initialize required modules
	ADC_init();
 7b2:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
 7b6:	83 ed       	ldi	r24, 0xD3	; 211
 7b8:	90 e3       	ldi	r25, 0x30	; 48
 7ba:	01 97       	sbiw	r24, 0x01	; 1
 7bc:	f1 f7       	brne	.-4      	; 0x7ba <uC_init+0x14>
 7be:	00 c0       	rjmp	.+0      	; 0x7c0 <uC_init+0x1a>
 7c0:	00 00       	nop
	_delay_ms(50);
	
	init_pwm_channels();
 7c2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <init_pwm_channels>
 7c6:	83 ed       	ldi	r24, 0xD3	; 211
 7c8:	90 e3       	ldi	r25, 0x30	; 48
 7ca:	01 97       	sbiw	r24, 0x01	; 1
 7cc:	f1 f7       	brne	.-4      	; 0x7ca <uC_init+0x24>
 7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <uC_init+0x2a>
 7d0:	00 00       	nop
	_delay_ms(50);
	
	init_user_interface();
 7d2:	0e 94 ba 06 	call	0xd74	; 0xd74 <init_user_interface>
 7d6:	83 ed       	ldi	r24, 0xD3	; 211
 7d8:	90 e3       	ldi	r25, 0x30	; 48
 7da:	01 97       	sbiw	r24, 0x01	; 1
 7dc:	f1 f7       	brne	.-4      	; 0x7da <uC_init+0x34>
 7de:	00 c0       	rjmp	.+0      	; 0x7e0 <uC_init+0x3a>
 7e0:	00 00       	nop
	_delay_ms(50);
	
	init_hx1230_control();
 7e2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <init_hx1230_control>
 7e6:	83 ed       	ldi	r24, 0xD3	; 211
 7e8:	90 e3       	ldi	r25, 0x30	; 48
 7ea:	01 97       	sbiw	r24, 0x01	; 1
 7ec:	f1 f7       	brne	.-4      	; 0x7ea <uC_init+0x44>
 7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <uC_init+0x4a>
 7f0:	00 00       	nop
	_delay_ms(50);
	hx_fill_screen();
 7f2:	0e 94 40 03 	call	0x680	; 0x680 <hx_fill_screen>
 7f6:	9f e9       	ldi	r25, 0x9F	; 159
 7f8:	26 e8       	ldi	r18, 0x86	; 134
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	91 50       	subi	r25, 0x01	; 1
 7fe:	20 40       	sbci	r18, 0x00	; 0
 800:	80 40       	sbci	r24, 0x00	; 0
 802:	e1 f7       	brne	.-8      	; 0x7fc <uC_init+0x56>
 804:	00 c0       	rjmp	.+0      	; 0x806 <uC_init+0x60>
 806:	00 00       	nop
	_delay_ms(500);
	hx_clear_screen();
 808:	0e 94 2c 03 	call	0x658	; 0x658 <hx_clear_screen>
 80c:	83 ed       	ldi	r24, 0xD3	; 211
 80e:	90 e3       	ldi	r25, 0x30	; 48
 810:	01 97       	sbiw	r24, 0x01	; 1
 812:	f1 f7       	brne	.-4      	; 0x810 <uC_init+0x6a>
 814:	00 c0       	rjmp	.+0      	; 0x816 <uC_init+0x70>
 816:	00 00       	nop
	_delay_ms(50);
	
	display_title();
 818:	0e 94 6f 00 	call	0xde	; 0xde <display_title>
	display_idle_state_message(); 
 81c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <display_idle_state_message>
	
	sei(); // enable global interrupts
 820:	78 94       	sei
 822:	08 95       	ret

00000824 <main>:

void uC_init(void);

int main(void)
{
	STATE = STATE_INIT;
 824:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <STATE>
	OLD_STATE = STATE_INIT;
 828:	10 92 78 07 	sts	0x0778, r1	; 0x800778 <__data_end>
	uC_init();
 82c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <uC_init>
	
	SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_INCLINE_POS_0;
 830:	e6 e8       	ldi	r30, 0x86	; 134
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	20 81       	ld	r18, Z
 836:	31 81       	ldd	r19, Z+1	; 0x01
 838:	ad ec       	ldi	r26, 0xCD	; 205
 83a:	bc ec       	ldi	r27, 0xCC	; 204
 83c:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 840:	92 95       	swap	r25
 842:	82 95       	swap	r24
 844:	8f 70       	andi	r24, 0x0F	; 15
 846:	89 27       	eor	r24, r25
 848:	9f 70       	andi	r25, 0x0F	; 15
 84a:	89 27       	eor	r24, r25
 84c:	82 54       	subi	r24, 0x42	; 66
 84e:	91 09       	sbc	r25, r1
 850:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 854:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_INIT_POS;
 858:	80 81       	ld	r24, Z
 85a:	91 81       	ldd	r25, Z+1	; 0x01
 85c:	9c 01       	movw	r18, r24
 85e:	22 0f       	add	r18, r18
 860:	33 1f       	adc	r19, r19
 862:	88 0f       	add	r24, r24
 864:	99 1f       	adc	r25, r25
 866:	88 0f       	add	r24, r24
 868:	99 1f       	adc	r25, r25
 86a:	88 0f       	add	r24, r24
 86c:	99 1f       	adc	r25, r25
 86e:	28 0f       	add	r18, r24
 870:	39 1f       	adc	r19, r25
 872:	a1 e6       	ldi	r26, 0x61	; 97
 874:	b6 ef       	ldi	r27, 0xF6	; 246
 876:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 87a:	88 0f       	add	r24, r24
 87c:	89 2f       	mov	r24, r25
 87e:	88 1f       	adc	r24, r24
 880:	99 0b       	sbc	r25, r25
 882:	91 95       	neg	r25
 884:	88 97       	sbiw	r24, 0x28	; 40
 886:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 88a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	turn_on_pwm_channels();
 88e:	0e 94 8b 04 	call	0x916	; 0x916 <turn_on_pwm_channels>
	
	
	STATE = STATE_IDLE;
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <STATE>
	
    while (1) 
    {
	    if(STATE_CHANGED)
 898:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <STATE>
 89c:	90 91 78 07 	lds	r25, 0x0778	; 0x800778 <__data_end>
 8a0:	98 17       	cp	r25, r24
 8a2:	59 f0       	breq	.+22     	; 0x8ba <main+0x96>
	    {
		    OLD_STATE = STATE; // update state
 8a4:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <__data_end>
		    go_to_state(STATE);
 8a8:	0e 94 c1 04 	call	0x982	; 0x982 <go_to_state>
 8ac:	83 e2       	ldi	r24, 0x23	; 35
 8ae:	94 ef       	ldi	r25, 0xF4	; 244
 8b0:	01 97       	sbiw	r24, 0x01	; 1
 8b2:	f1 f7       	brne	.-4      	; 0x8b0 <main+0x8c>
 8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <main+0x92>
 8b6:	00 00       	nop
		    _delay_ms(250);
		    sei(); // enable interrupts
 8b8:	78 94       	sei
	    }
		
		switch(OLD_STATE)
 8ba:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <__data_end>
 8be:	82 30       	cpi	r24, 0x02	; 2
 8c0:	29 f0       	breq	.+10     	; 0x8cc <main+0xa8>
 8c2:	83 30       	cpi	r24, 0x03	; 3
 8c4:	49 f7       	brne	.-46     	; 0x898 <main+0x74>
		{
			case STATE_TRACKING:
			{
				track();
 8c6:	0e 94 de 04 	call	0x9bc	; 0x9bc <track>
				break;
 8ca:	e6 cf       	rjmp	.-52     	; 0x898 <main+0x74>
			}
			case STATE_MANUAL:
			{
				manual_control();
 8cc:	0e 94 95 03 	call	0x72a	; 0x72a <manual_control>
				break;
 8d0:	e3 cf       	rjmp	.-58     	; 0x898 <main+0x74>

000008d2 <init_pwm_channels>:
#include "global.h"
#include <avr/io.h>

void init_pwm_channels(void)
{
	DDRB |= (1 << DDB1)|(1 << DDB2);
 8d2:	84 b1       	in	r24, 0x04	; 4
 8d4:	86 60       	ori	r24, 0x06	; 6
 8d6:	84 b9       	out	0x04, r24	; 4
	// PB1 and PB2 as output of 16bits Timer1
	
	 ICR1 = 2485;
 8d8:	85 eb       	ldi	r24, 0xB5	; 181
 8da:	99 e0       	ldi	r25, 0x09	; 9
 8dc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 8e0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	 // set TOP to count 20ms
	 // TOP calculated by the formula: F_PWM = F_CPU/(PRESCALER*(1 + TOP))
	 // Atmel-42735-8-bit-AVR-Microcontroller-ATmega328-328P_Datasheet, page 164

	 OCR1A = 00;
 8e4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 8e8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	 // set PWM for 0% duty cycle

	 OCR1B = 00;
 8ec:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 8f0:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	 // set PWM for 0% duty cycle

	 TCCR1A &= ~((1 << COM1A1)|(1 << COM1B1));
 8f4:	a0 e8       	ldi	r26, 0x80	; 128
 8f6:	b0 e0       	ldi	r27, 0x00	; 0
 8f8:	8c 91       	ld	r24, X
 8fa:	8f 75       	andi	r24, 0x5F	; 95
 8fc:	8c 93       	st	X, r24
	 // make sure PWM signal is off

	TCCR1B |= (1 << CS11);
 8fe:	e1 e8       	ldi	r30, 0x81	; 129
 900:	f0 e0       	ldi	r31, 0x00	; 0
 902:	80 81       	ld	r24, Z
 904:	82 60       	ori	r24, 0x02	; 2
 906:	80 83       	st	Z, r24
	// START the timer with 8 prescaler

	 TCCR1A |= (1 << WGM11);
 908:	8c 91       	ld	r24, X
 90a:	82 60       	ori	r24, 0x02	; 2
 90c:	8c 93       	st	X, r24
	 TCCR1B |= (1 << WGM12)|(1 << WGM13);
 90e:	80 81       	ld	r24, Z
 910:	88 61       	ori	r24, 0x18	; 24
 912:	80 83       	st	Z, r24
 914:	08 95       	ret

00000916 <turn_on_pwm_channels>:
	 // set Fast PWM mode using ICR1 as TOP
}

void turn_on_pwm_channels(void)
{
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1);
 916:	e0 e8       	ldi	r30, 0x80	; 128
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	80 81       	ld	r24, Z
 91c:	80 6a       	ori	r24, 0xA0	; 160
 91e:	80 83       	st	Z, r24
 920:	08 95       	ret

00000922 <idle_state_setup>:
 922:	8f e4       	ldi	r24, 0x4F	; 79
 924:	93 ec       	ldi	r25, 0xC3	; 195
 926:	01 97       	sbiw	r24, 0x01	; 1
 928:	f1 f7       	brne	.-4      	; 0x926 <idle_state_setup+0x4>
 92a:	00 c0       	rjmp	.+0      	; 0x92c <idle_state_setup+0xa>
 92c:	00 00       	nop
}

void idle_state_setup(void)
{
	_delay_ms(200);
	hx_clear_screen();
 92e:	0e 94 2c 03 	call	0x658	; 0x658 <hx_clear_screen>
	display_title();
 932:	0e 94 6f 00 	call	0xde	; 0xde <display_title>
	display_idle_state_message();
 936:	0e 94 74 01 	call	0x2e8	; 0x2e8 <display_idle_state_message>
 93a:	08 95       	ret

0000093c <manual_state_setup>:
 93c:	8f e4       	ldi	r24, 0x4F	; 79
 93e:	93 ec       	ldi	r25, 0xC3	; 195
 940:	01 97       	sbiw	r24, 0x01	; 1
 942:	f1 f7       	brne	.-4      	; 0x940 <manual_state_setup+0x4>
 944:	00 c0       	rjmp	.+0      	; 0x946 <manual_state_setup+0xa>
 946:	00 00       	nop
}

void manual_state_setup(void)
{
	_delay_ms(200);
	hx_clear_screen();
 948:	0e 94 2c 03 	call	0x658	; 0x658 <hx_clear_screen>
	display_title();
 94c:	0e 94 6f 00 	call	0xde	; 0xde <display_title>
	display_manual_state_message();
 950:	0e 94 8d 01 	call	0x31a	; 0x31a <display_manual_state_message>
 954:	08 95       	ret

00000956 <tracking_state_setup>:
 956:	8f e4       	ldi	r24, 0x4F	; 79
 958:	93 ec       	ldi	r25, 0xC3	; 195
 95a:	01 97       	sbiw	r24, 0x01	; 1
 95c:	f1 f7       	brne	.-4      	; 0x95a <tracking_state_setup+0x4>
 95e:	00 c0       	rjmp	.+0      	; 0x960 <tracking_state_setup+0xa>
 960:	00 00       	nop
}

void tracking_state_setup(void)
{
	_delay_ms(200);
	hx_clear_screen();
 962:	0e 94 2c 03 	call	0x658	; 0x658 <hx_clear_screen>
	display_title();
 966:	0e 94 6f 00 	call	0xde	; 0xde <display_title>
	display_data_menu();
 96a:	0e 94 80 00 	call	0x100	; 0x100 <display_data_menu>
 96e:	9f e9       	ldi	r25, 0x9F	; 159
 970:	26 e8       	ldi	r18, 0x86	; 134
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	91 50       	subi	r25, 0x01	; 1
 976:	20 40       	sbci	r18, 0x00	; 0
 978:	80 40       	sbci	r24, 0x00	; 0
 97a:	e1 f7       	brne	.-8      	; 0x974 <tracking_state_setup+0x1e>
 97c:	00 c0       	rjmp	.+0      	; 0x97e <tracking_state_setup+0x28>
 97e:	00 00       	nop
 980:	08 95       	ret

00000982 <go_to_state>:
#include "graphics.h"
#include "state_handler.h"
#include "hx1230.h"

void go_to_state(unsigned char state)
{
 982:	cf 93       	push	r28
 984:	c8 2f       	mov	r28, r24
	hx_clear_screen();
 986:	0e 94 2c 03 	call	0x658	; 0x658 <hx_clear_screen>
	switch(state)
 98a:	c2 30       	cpi	r28, 0x02	; 2
 98c:	51 f0       	breq	.+20     	; 0x9a2 <go_to_state+0x20>
 98e:	c3 30       	cpi	r28, 0x03	; 3
 990:	71 f0       	breq	.+28     	; 0x9ae <go_to_state+0x2c>
 992:	c1 30       	cpi	r28, 0x01	; 1
 994:	89 f4       	brne	.+34     	; 0x9b8 <go_to_state+0x36>
	{
		case STATE_IDLE:
		{
			STATE = STATE_IDLE; // update global state
 996:	81 e0       	ldi	r24, 0x01	; 1
 998:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <STATE>
			idle_state_setup();
 99c:	0e 94 91 04 	call	0x922	; 0x922 <idle_state_setup>
			break;
 9a0:	0b c0       	rjmp	.+22     	; 0x9b8 <go_to_state+0x36>
		}
		case STATE_MANUAL:
		{
			STATE = STATE_MANUAL; // update global state
 9a2:	82 e0       	ldi	r24, 0x02	; 2
 9a4:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <STATE>
			manual_state_setup();
 9a8:	0e 94 9e 04 	call	0x93c	; 0x93c <manual_state_setup>
			break;
 9ac:	05 c0       	rjmp	.+10     	; 0x9b8 <go_to_state+0x36>
		}
		case STATE_TRACKING:
		{
			STATE = STATE_TRACKING; // update global state
 9ae:	83 e0       	ldi	r24, 0x03	; 3
 9b0:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <STATE>
			tracking_state_setup();
 9b4:	0e 94 ab 04 	call	0x956	; 0x956 <tracking_state_setup>
			break;
		}
	}
}
 9b8:	cf 91       	pop	r28
 9ba:	08 95       	ret

000009bc <track>:

int up_down_movement_gradient_request;
int left_right_movement_gradient_request;

void track(void)
{
 9bc:	cf 93       	push	r28
 9be:	df 93       	push	r29
	light_up_left = get_filtered_light_intensity(LS_UP_LEFT);
 9c0:	80 e0       	ldi	r24, 0x00	; 0
 9c2:	0e 94 a5 03 	call	0x74a	; 0x74a <get_filtered_light_intensity>
 9c6:	90 93 8d 07 	sts	0x078D, r25	; 0x80078d <light_up_left+0x1>
 9ca:	80 93 8c 07 	sts	0x078C, r24	; 0x80078c <light_up_left>
	light_up_right = get_filtered_light_intensity(LS_UP_RIGHT);
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	0e 94 a5 03 	call	0x74a	; 0x74a <get_filtered_light_intensity>
 9d4:	90 93 7f 07 	sts	0x077F, r25	; 0x80077f <light_up_right+0x1>
 9d8:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <light_up_right>
	light_down_left = get_filtered_light_intensity(LS_DOWN_LEFT);
 9dc:	82 e0       	ldi	r24, 0x02	; 2
 9de:	0e 94 a5 03 	call	0x74a	; 0x74a <get_filtered_light_intensity>
 9e2:	90 93 89 07 	sts	0x0789, r25	; 0x800789 <light_down_left+0x1>
 9e6:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <light_down_left>
	light_down_right = get_filtered_light_intensity(LS_DOWN_RIGHT);
 9ea:	83 e0       	ldi	r24, 0x03	; 3
 9ec:	0e 94 a5 03 	call	0x74a	; 0x74a <get_filtered_light_intensity>
 9f0:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <light_down_right+0x1>
 9f4:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <light_down_right>
	
	display_light_sensor_data(LS_UP_LEFT, light_up_left);
 9f8:	60 91 8c 07 	lds	r22, 0x078C	; 0x80078c <light_up_left>
 9fc:	70 91 8d 07 	lds	r23, 0x078D	; 0x80078d <light_up_left+0x1>
 a00:	80 e0       	ldi	r24, 0x00	; 0
 a02:	0e 94 99 00 	call	0x132	; 0x132 <display_light_sensor_data>
	display_light_sensor_data(LS_UP_RIGHT, light_up_right);
 a06:	60 91 7e 07 	lds	r22, 0x077E	; 0x80077e <light_up_right>
 a0a:	70 91 7f 07 	lds	r23, 0x077F	; 0x80077f <light_up_right+0x1>
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	0e 94 99 00 	call	0x132	; 0x132 <display_light_sensor_data>
	display_light_sensor_data(LS_DOWN_LEFT, light_down_left);
 a14:	60 91 88 07 	lds	r22, 0x0788	; 0x800788 <light_down_left>
 a18:	70 91 89 07 	lds	r23, 0x0789	; 0x800789 <light_down_left+0x1>
 a1c:	82 e0       	ldi	r24, 0x02	; 2
 a1e:	0e 94 99 00 	call	0x132	; 0x132 <display_light_sensor_data>
	display_light_sensor_data(LS_DOWN_RIGHT, light_down_right);
 a22:	60 91 80 07 	lds	r22, 0x0780	; 0x800780 <light_down_right>
 a26:	70 91 81 07 	lds	r23, 0x0781	; 0x800781 <light_down_right+0x1>
 a2a:	83 e0       	ldi	r24, 0x03	; 3
 a2c:	0e 94 99 00 	call	0x132	; 0x132 <display_light_sensor_data>
	
	up_intensity_average = light_up_left + light_up_right;
 a30:	e0 91 8c 07 	lds	r30, 0x078C	; 0x80078c <light_up_left>
 a34:	f0 91 8d 07 	lds	r31, 0x078D	; 0x80078d <light_up_left+0x1>
 a38:	60 91 7e 07 	lds	r22, 0x077E	; 0x80077e <light_up_right>
 a3c:	70 91 7f 07 	lds	r23, 0x077F	; 0x80077f <light_up_right+0x1>
	up_intensity_average >>= 1;
 a40:	af 01       	movw	r20, r30
 a42:	46 0f       	add	r20, r22
 a44:	57 1f       	adc	r21, r23
 a46:	55 95       	asr	r21
 a48:	47 95       	ror	r20
 a4a:	50 93 8b 07 	sts	0x078B, r21	; 0x80078b <up_intensity_average+0x1>
 a4e:	40 93 8a 07 	sts	0x078A, r20	; 0x80078a <up_intensity_average>
	
	down_intensity_average = light_down_left + light_down_right;
 a52:	20 91 88 07 	lds	r18, 0x0788	; 0x800788 <light_down_left>
 a56:	30 91 89 07 	lds	r19, 0x0789	; 0x800789 <light_down_left+0x1>
 a5a:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <light_down_right>
 a5e:	90 91 81 07 	lds	r25, 0x0781	; 0x800781 <light_down_right+0x1>
	down_intensity_average >>= 1;
 a62:	a9 01       	movw	r20, r18
 a64:	48 0f       	add	r20, r24
 a66:	59 1f       	adc	r21, r25
 a68:	55 95       	asr	r21
 a6a:	47 95       	ror	r20
 a6c:	50 93 7b 07 	sts	0x077B, r21	; 0x80077b <down_intensity_average+0x1>
 a70:	40 93 7a 07 	sts	0x077A, r20	; 0x80077a <down_intensity_average>
	
	left_intensity_average = light_up_left + light_down_left;
	left_intensity_average >>= 1;
 a74:	2e 0f       	add	r18, r30
 a76:	3f 1f       	adc	r19, r31
 a78:	35 95       	asr	r19
 a7a:	27 95       	ror	r18
 a7c:	30 93 7d 07 	sts	0x077D, r19	; 0x80077d <left_intensity_average+0x1>
 a80:	20 93 7c 07 	sts	0x077C, r18	; 0x80077c <left_intensity_average>
	
	right_intensity_average = light_up_right + light_down_right;
	right_intensity_average >>= 1;
 a84:	86 0f       	add	r24, r22
 a86:	97 1f       	adc	r25, r23
 a88:	95 95       	asr	r25
 a8a:	87 95       	ror	r24
 a8c:	90 93 87 07 	sts	0x0787, r25	; 0x800787 <right_intensity_average+0x1>
 a90:	80 93 86 07 	sts	0x0786, r24	; 0x800786 <right_intensity_average>
	
	hx_set_coordinates(42, 2);
 a94:	62 e0       	ldi	r22, 0x02	; 2
 a96:	8a e2       	ldi	r24, 0x2A	; 42
 a98:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_char('0' + (up_intensity_average / 10) % 10);
 a9c:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <up_intensity_average>
 aa0:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <up_intensity_average+0x1>
 aa4:	ca e0       	ldi	r28, 0x0A	; 10
 aa6:	d0 e0       	ldi	r29, 0x00	; 0
 aa8:	be 01       	movw	r22, r28
 aaa:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
 aae:	cb 01       	movw	r24, r22
 ab0:	be 01       	movw	r22, r28
 ab2:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
 ab6:	80 5d       	subi	r24, 0xD0	; 208
 ab8:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + up_intensity_average % 10);
 abc:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <up_intensity_average>
 ac0:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <up_intensity_average+0x1>
 ac4:	be 01       	movw	r22, r28
 ac6:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
 aca:	80 5d       	subi	r24, 0xD0	; 208
 acc:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	
	hx_set_coordinates(42, 6);
 ad0:	66 e0       	ldi	r22, 0x06	; 6
 ad2:	8a e2       	ldi	r24, 0x2A	; 42
 ad4:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_char('0' + (down_intensity_average / 10) % 10);
 ad8:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <down_intensity_average>
 adc:	90 91 7b 07 	lds	r25, 0x077B	; 0x80077b <down_intensity_average+0x1>
 ae0:	be 01       	movw	r22, r28
 ae2:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
 ae6:	cb 01       	movw	r24, r22
 ae8:	be 01       	movw	r22, r28
 aea:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
 aee:	80 5d       	subi	r24, 0xD0	; 208
 af0:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + down_intensity_average % 10);
 af4:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <down_intensity_average>
 af8:	90 91 7b 07 	lds	r25, 0x077B	; 0x80077b <down_intensity_average+0x1>
 afc:	be 01       	movw	r22, r28
 afe:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
 b02:	80 5d       	subi	r24, 0xD0	; 208
 b04:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	
	hx_set_coordinates(6, 4);
 b08:	64 e0       	ldi	r22, 0x04	; 4
 b0a:	86 e0       	ldi	r24, 0x06	; 6
 b0c:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_char('0' + (left_intensity_average / 10) % 10);
 b10:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <left_intensity_average>
 b14:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <left_intensity_average+0x1>
 b18:	be 01       	movw	r22, r28
 b1a:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
 b1e:	cb 01       	movw	r24, r22
 b20:	be 01       	movw	r22, r28
 b22:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
 b26:	80 5d       	subi	r24, 0xD0	; 208
 b28:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + left_intensity_average % 10);
 b2c:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <left_intensity_average>
 b30:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <left_intensity_average+0x1>
 b34:	be 01       	movw	r22, r28
 b36:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
 b3a:	80 5d       	subi	r24, 0xD0	; 208
 b3c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	
	hx_set_coordinates(78, 4);
 b40:	64 e0       	ldi	r22, 0x04	; 4
 b42:	8e e4       	ldi	r24, 0x4E	; 78
 b44:	0e 94 19 03 	call	0x632	; 0x632 <hx_set_coordinates>
	hx_write_char('0' + (right_intensity_average / 10) % 10);
 b48:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <right_intensity_average>
 b4c:	90 91 87 07 	lds	r25, 0x0787	; 0x800787 <right_intensity_average+0x1>
 b50:	be 01       	movw	r22, r28
 b52:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
 b56:	cb 01       	movw	r24, r22
 b58:	be 01       	movw	r22, r28
 b5a:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
 b5e:	80 5d       	subi	r24, 0xD0	; 208
 b60:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	hx_write_char('0' + right_intensity_average % 10);
 b64:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <right_intensity_average>
 b68:	90 91 87 07 	lds	r25, 0x0787	; 0x800787 <right_intensity_average+0x1>
 b6c:	be 01       	movw	r22, r28
 b6e:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
 b72:	80 5d       	subi	r24, 0xD0	; 208
 b74:	0e 94 54 03 	call	0x6a8	; 0x6a8 <hx_write_char>
	
	up_down_movement_gradient_request = up_intensity_average - down_intensity_average;
 b78:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <up_intensity_average>
 b7c:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <up_intensity_average+0x1>
 b80:	20 91 7a 07 	lds	r18, 0x077A	; 0x80077a <down_intensity_average>
 b84:	30 91 7b 07 	lds	r19, 0x077B	; 0x80077b <down_intensity_average+0x1>
 b88:	82 1b       	sub	r24, r18
 b8a:	93 0b       	sbc	r25, r19
 b8c:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <up_down_movement_gradient_request+0x1>
 b90:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <up_down_movement_gradient_request>
	left_right_movement_gradient_request = left_intensity_average - right_intensity_average;
 b94:	20 91 7c 07 	lds	r18, 0x077C	; 0x80077c <left_intensity_average>
 b98:	30 91 7d 07 	lds	r19, 0x077D	; 0x80077d <left_intensity_average+0x1>
 b9c:	40 91 86 07 	lds	r20, 0x0786	; 0x800786 <right_intensity_average>
 ba0:	50 91 87 07 	lds	r21, 0x0787	; 0x800787 <right_intensity_average+0x1>
 ba4:	24 1b       	sub	r18, r20
 ba6:	35 0b       	sbc	r19, r21
 ba8:	30 93 85 07 	sts	0x0785, r19	; 0x800785 <left_right_movement_gradient_request+0x1>
 bac:	20 93 84 07 	sts	0x0784, r18	; 0x800784 <left_right_movement_gradient_request>
	
	if(abs(up_down_movement_gradient_request) > TRACKING_TOLERANCE)
 bb0:	9c 01       	movw	r18, r24
 bb2:	99 23       	and	r25, r25
 bb4:	24 f4       	brge	.+8      	; 0xbbe <track+0x202>
 bb6:	22 27       	eor	r18, r18
 bb8:	33 27       	eor	r19, r19
 bba:	28 1b       	sub	r18, r24
 bbc:	39 0b       	sbc	r19, r25
 bbe:	23 30       	cpi	r18, 0x03	; 3
 bc0:	31 05       	cpc	r19, r1
 bc2:	64 f0       	brlt	.+24     	; 0xbdc <track+0x220>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER -= up_down_movement_gradient_request / 10;
 bc4:	e8 e8       	ldi	r30, 0x88	; 136
 bc6:	f0 e0       	ldi	r31, 0x00	; 0
 bc8:	20 81       	ld	r18, Z
 bca:	31 81       	ldd	r19, Z+1	; 0x01
 bcc:	6a e0       	ldi	r22, 0x0A	; 10
 bce:	70 e0       	ldi	r23, 0x00	; 0
 bd0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
 bd4:	26 1b       	sub	r18, r22
 bd6:	37 0b       	sbc	r19, r23
 bd8:	31 83       	std	Z+1, r19	; 0x01
 bda:	20 83       	st	Z, r18
	}
	
	if(abs(left_right_movement_gradient_request) > TRACKING_TOLERANCE)
 bdc:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <left_right_movement_gradient_request>
 be0:	90 91 85 07 	lds	r25, 0x0785	; 0x800785 <left_right_movement_gradient_request+0x1>
 be4:	9c 01       	movw	r18, r24
 be6:	99 23       	and	r25, r25
 be8:	24 f4       	brge	.+8      	; 0xbf2 <track+0x236>
 bea:	22 27       	eor	r18, r18
 bec:	33 27       	eor	r19, r19
 bee:	28 1b       	sub	r18, r24
 bf0:	39 0b       	sbc	r19, r25
 bf2:	23 30       	cpi	r18, 0x03	; 3
 bf4:	31 05       	cpc	r19, r1
 bf6:	64 f0       	brlt	.+24     	; 0xc10 <track+0x254>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER -= left_right_movement_gradient_request / 10;
 bf8:	ea e8       	ldi	r30, 0x8A	; 138
 bfa:	f0 e0       	ldi	r31, 0x00	; 0
 bfc:	20 81       	ld	r18, Z
 bfe:	31 81       	ldd	r19, Z+1	; 0x01
 c00:	6a e0       	ldi	r22, 0x0A	; 10
 c02:	70 e0       	ldi	r23, 0x00	; 0
 c04:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
 c08:	26 1b       	sub	r18, r22
 c0a:	37 0b       	sbc	r19, r23
 c0c:	31 83       	std	Z+1, r19	; 0x01
 c0e:	20 83       	st	Z, r18
	}
	if(SG90_INCLINE_DUTY_CYCLE_REGISTER > SG90_INCLINE_POS_180)
 c10:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 c14:	50 91 89 00 	lds	r21, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 c18:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 c1c:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 c20:	ad ec       	ldi	r26, 0xCD	; 205
 c22:	bc ec       	ldi	r27, 0xCC	; 204
 c24:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 c28:	96 95       	lsr	r25
 c2a:	87 95       	ror	r24
 c2c:	96 95       	lsr	r25
 c2e:	87 95       	ror	r24
 c30:	96 95       	lsr	r25
 c32:	87 95       	ror	r24
 c34:	0f 96       	adiw	r24, 0x0f	; 15
 c36:	84 17       	cp	r24, r20
 c38:	95 07       	cpc	r25, r21
 c3a:	88 f4       	brcc	.+34     	; 0xc5e <track+0x2a2>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_INCLINE_POS_180;
 c3c:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 c40:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 c44:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 c48:	96 95       	lsr	r25
 c4a:	87 95       	ror	r24
 c4c:	96 95       	lsr	r25
 c4e:	87 95       	ror	r24
 c50:	96 95       	lsr	r25
 c52:	87 95       	ror	r24
 c54:	0f 96       	adiw	r24, 0x0f	; 15
 c56:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 c5a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	}
	if(SG90_INCLINE_DUTY_CYCLE_REGISTER < SG90_INCLINE_POS_0)
 c5e:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 c62:	50 91 89 00 	lds	r21, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 c66:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 c6a:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 c6e:	ad ec       	ldi	r26, 0xCD	; 205
 c70:	bc ec       	ldi	r27, 0xCC	; 204
 c72:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 c76:	92 95       	swap	r25
 c78:	82 95       	swap	r24
 c7a:	8f 70       	andi	r24, 0x0F	; 15
 c7c:	89 27       	eor	r24, r25
 c7e:	9f 70       	andi	r25, 0x0F	; 15
 c80:	89 27       	eor	r24, r25
 c82:	82 54       	subi	r24, 0x42	; 66
 c84:	91 09       	sbc	r25, r1
 c86:	48 17       	cp	r20, r24
 c88:	59 07       	cpc	r21, r25
 c8a:	90 f4       	brcc	.+36     	; 0xcb0 <track+0x2f4>
	{
		SG90_INCLINE_DUTY_CYCLE_REGISTER = SG90_INCLINE_POS_0;
 c8c:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 c90:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 c94:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 c98:	92 95       	swap	r25
 c9a:	82 95       	swap	r24
 c9c:	8f 70       	andi	r24, 0x0F	; 15
 c9e:	89 27       	eor	r24, r25
 ca0:	9f 70       	andi	r25, 0x0F	; 15
 ca2:	89 27       	eor	r24, r25
 ca4:	82 54       	subi	r24, 0x42	; 66
 ca6:	91 09       	sbc	r25, r1
 ca8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 cac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	}
	if(SG90_ROTATE_DUTY_CYCLE_REGISTER > SG90_ROTATE_POS_180)
 cb0:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 cb4:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 cb8:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 cbc:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 cc0:	ad ec       	ldi	r26, 0xCD	; 205
 cc2:	bc ec       	ldi	r27, 0xCC	; 204
 cc4:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 cc8:	96 95       	lsr	r25
 cca:	87 95       	ror	r24
 ccc:	96 95       	lsr	r25
 cce:	87 95       	ror	r24
 cd0:	96 95       	lsr	r25
 cd2:	87 95       	ror	r24
 cd4:	05 96       	adiw	r24, 0x05	; 5
 cd6:	84 17       	cp	r24, r20
 cd8:	95 07       	cpc	r25, r21
 cda:	88 f4       	brcc	.+34     	; 0xcfe <track+0x342>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_POS_180;
 cdc:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 ce0:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 ce4:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 ce8:	96 95       	lsr	r25
 cea:	87 95       	ror	r24
 cec:	96 95       	lsr	r25
 cee:	87 95       	ror	r24
 cf0:	96 95       	lsr	r25
 cf2:	87 95       	ror	r24
 cf4:	05 96       	adiw	r24, 0x05	; 5
 cf6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 cfa:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	}
	if(SG90_ROTATE_DUTY_CYCLE_REGISTER < SG90_ROTATE_POS_0)
 cfe:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 d02:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 d06:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 d0a:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 d0e:	ad ec       	ldi	r26, 0xCD	; 205
 d10:	bc ec       	ldi	r27, 0xCC	; 204
 d12:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 d16:	92 95       	swap	r25
 d18:	82 95       	swap	r24
 d1a:	8f 70       	andi	r24, 0x0F	; 15
 d1c:	89 27       	eor	r24, r25
 d1e:	9f 70       	andi	r25, 0x0F	; 15
 d20:	89 27       	eor	r24, r25
 d22:	82 54       	subi	r24, 0x42	; 66
 d24:	91 09       	sbc	r25, r1
 d26:	48 17       	cp	r20, r24
 d28:	59 07       	cpc	r21, r25
 d2a:	90 f4       	brcc	.+36     	; 0xd50 <track+0x394>
	{
		SG90_ROTATE_DUTY_CYCLE_REGISTER = SG90_ROTATE_POS_0;
 d2c:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 d30:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 d34:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>
 d38:	92 95       	swap	r25
 d3a:	82 95       	swap	r24
 d3c:	8f 70       	andi	r24, 0x0F	; 15
 d3e:	89 27       	eor	r24, r25
 d40:	9f 70       	andi	r25, 0x0F	; 15
 d42:	89 27       	eor	r24, r25
 d44:	82 54       	subi	r24, 0x42	; 66
 d46:	91 09       	sbc	r25, r1
 d48:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 d4c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 d50:	83 ed       	ldi	r24, 0xD3	; 211
 d52:	90 e3       	ldi	r25, 0x30	; 48
 d54:	01 97       	sbiw	r24, 0x01	; 1
 d56:	f1 f7       	brne	.-4      	; 0xd54 <track+0x398>
 d58:	00 c0       	rjmp	.+0      	; 0xd5a <track+0x39e>
 d5a:	00 00       	nop
	}
	_delay_ms(50);
 d5c:	df 91       	pop	r29
 d5e:	cf 91       	pop	r28
 d60:	08 95       	ret

00000d62 <init_next_state_button>:
}


void init_next_state_button(void)
{
	BUTTON_1_DRR &= ~(1 << BUTTON_1_PIN); // PD2 is input
 d62:	52 98       	cbi	0x0a, 2	; 10

	BUTTON_1_PORT |= (1 << BUTTON_1_PIN);    // turn on the pull-up resistor
 d64:	5a 9a       	sbi	0x0b, 2	; 11
	// PD2 is now an input with pull-up enabled



	EICRA &= ~(1 << ISC00 | 1 << ISC01);    // low level of INT0 generates an interrupt request: when BUTTON_1 is pressed
 d66:	e9 e6       	ldi	r30, 0x69	; 105
 d68:	f0 e0       	ldi	r31, 0x00	; 0
 d6a:	80 81       	ld	r24, Z
 d6c:	8c 7f       	andi	r24, 0xFC	; 252
 d6e:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);     // turns on INT0
 d70:	e8 9a       	sbi	0x1d, 0	; 29
 d72:	08 95       	ret

00000d74 <init_user_interface>:



void init_user_interface(void)
{
	init_next_state_button();
 d74:	0e 94 b1 06 	call	0xd62	; 0xd62 <init_next_state_button>
 d78:	08 95       	ret

00000d7a <__vector_1>:
	EICRA &= ~(1 << ISC00 | 1 << ISC01);    // low level of INT0 generates an interrupt request: when BUTTON_1 is pressed
	EIMSK |= (1 << INT0);     // turns on INT0
}

ISR (INT0_vect)
{
 d7a:	1f 92       	push	r1
 d7c:	0f 92       	push	r0
 d7e:	0f b6       	in	r0, 0x3f	; 63
 d80:	0f 92       	push	r0
 d82:	11 24       	eor	r1, r1
 d84:	8f 93       	push	r24
	cli(); // temporarily disable interrupts
 d86:	f8 94       	cli
	switch(STATE)
 d88:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <STATE>
 d8c:	82 30       	cpi	r24, 0x02	; 2
 d8e:	41 f0       	breq	.+16     	; 0xda0 <__vector_1+0x26>
 d90:	83 30       	cpi	r24, 0x03	; 3
 d92:	51 f0       	breq	.+20     	; 0xda8 <__vector_1+0x2e>
 d94:	81 30       	cpi	r24, 0x01	; 1
 d96:	61 f4       	brne	.+24     	; 0xdb0 <__vector_1+0x36>
	{
		case STATE_IDLE:
		{
			STATE = STATE_MANUAL;
 d98:	82 e0       	ldi	r24, 0x02	; 2
 d9a:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <STATE>
			break;
 d9e:	0b c0       	rjmp	.+22     	; 0xdb6 <__vector_1+0x3c>
		}
		case STATE_MANUAL:
		{
			STATE = STATE_TRACKING;
 da0:	83 e0       	ldi	r24, 0x03	; 3
 da2:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <STATE>
			break;
 da6:	07 c0       	rjmp	.+14     	; 0xdb6 <__vector_1+0x3c>
		}
		case STATE_TRACKING:
		{
			STATE = STATE_IDLE;
 da8:	81 e0       	ldi	r24, 0x01	; 1
 daa:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <STATE>
			break;
 dae:	03 c0       	rjmp	.+6      	; 0xdb6 <__vector_1+0x3c>
		}
		default:
		{
			STATE = STATE_IDLE;
 db0:	81 e0       	ldi	r24, 0x01	; 1
 db2:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <STATE>
			break;
		}
	}
 db6:	8f 91       	pop	r24
 db8:	0f 90       	pop	r0
 dba:	0f be       	out	0x3f, r0	; 63
 dbc:	0f 90       	pop	r0
 dbe:	1f 90       	pop	r1
 dc0:	18 95       	reti

00000dc2 <__divmodhi4>:
 dc2:	97 fb       	bst	r25, 7
 dc4:	07 2e       	mov	r0, r23
 dc6:	16 f4       	brtc	.+4      	; 0xdcc <__divmodhi4+0xa>
 dc8:	00 94       	com	r0
 dca:	07 d0       	rcall	.+14     	; 0xdda <__divmodhi4_neg1>
 dcc:	77 fd       	sbrc	r23, 7
 dce:	09 d0       	rcall	.+18     	; 0xde2 <__divmodhi4_neg2>
 dd0:	0e 94 2a 07 	call	0xe54	; 0xe54 <__udivmodhi4>
 dd4:	07 fc       	sbrc	r0, 7
 dd6:	05 d0       	rcall	.+10     	; 0xde2 <__divmodhi4_neg2>
 dd8:	3e f4       	brtc	.+14     	; 0xde8 <__divmodhi4_exit>

00000dda <__divmodhi4_neg1>:
 dda:	90 95       	com	r25
 ddc:	81 95       	neg	r24
 dde:	9f 4f       	sbci	r25, 0xFF	; 255
 de0:	08 95       	ret

00000de2 <__divmodhi4_neg2>:
 de2:	70 95       	com	r23
 de4:	61 95       	neg	r22
 de6:	7f 4f       	sbci	r23, 0xFF	; 255

00000de8 <__divmodhi4_exit>:
 de8:	08 95       	ret

00000dea <__divmodsi4>:
 dea:	05 2e       	mov	r0, r21
 dec:	97 fb       	bst	r25, 7
 dee:	1e f4       	brtc	.+6      	; 0xdf6 <__divmodsi4+0xc>
 df0:	00 94       	com	r0
 df2:	0e 94 0c 07 	call	0xe18	; 0xe18 <__negsi2>
 df6:	57 fd       	sbrc	r21, 7
 df8:	07 d0       	rcall	.+14     	; 0xe08 <__divmodsi4_neg2>
 dfa:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__udivmodsi4>
 dfe:	07 fc       	sbrc	r0, 7
 e00:	03 d0       	rcall	.+6      	; 0xe08 <__divmodsi4_neg2>
 e02:	4e f4       	brtc	.+18     	; 0xe16 <__divmodsi4_exit>
 e04:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__negsi2>

00000e08 <__divmodsi4_neg2>:
 e08:	50 95       	com	r21
 e0a:	40 95       	com	r20
 e0c:	30 95       	com	r19
 e0e:	21 95       	neg	r18
 e10:	3f 4f       	sbci	r19, 0xFF	; 255
 e12:	4f 4f       	sbci	r20, 0xFF	; 255
 e14:	5f 4f       	sbci	r21, 0xFF	; 255

00000e16 <__divmodsi4_exit>:
 e16:	08 95       	ret

00000e18 <__negsi2>:
 e18:	90 95       	com	r25
 e1a:	80 95       	com	r24
 e1c:	70 95       	com	r23
 e1e:	61 95       	neg	r22
 e20:	7f 4f       	sbci	r23, 0xFF	; 255
 e22:	8f 4f       	sbci	r24, 0xFF	; 255
 e24:	9f 4f       	sbci	r25, 0xFF	; 255
 e26:	08 95       	ret

00000e28 <__umulhisi3>:
 e28:	a2 9f       	mul	r26, r18
 e2a:	b0 01       	movw	r22, r0
 e2c:	b3 9f       	mul	r27, r19
 e2e:	c0 01       	movw	r24, r0
 e30:	a3 9f       	mul	r26, r19
 e32:	70 0d       	add	r23, r0
 e34:	81 1d       	adc	r24, r1
 e36:	11 24       	eor	r1, r1
 e38:	91 1d       	adc	r25, r1
 e3a:	b2 9f       	mul	r27, r18
 e3c:	70 0d       	add	r23, r0
 e3e:	81 1d       	adc	r24, r1
 e40:	11 24       	eor	r1, r1
 e42:	91 1d       	adc	r25, r1
 e44:	08 95       	ret

00000e46 <__usmulhisi3>:
 e46:	0e 94 14 07 	call	0xe28	; 0xe28 <__umulhisi3>

00000e4a <__usmulhisi3_tail>:
 e4a:	b7 ff       	sbrs	r27, 7
 e4c:	08 95       	ret
 e4e:	82 1b       	sub	r24, r18
 e50:	93 0b       	sbc	r25, r19
 e52:	08 95       	ret

00000e54 <__udivmodhi4>:
 e54:	aa 1b       	sub	r26, r26
 e56:	bb 1b       	sub	r27, r27
 e58:	51 e1       	ldi	r21, 0x11	; 17
 e5a:	07 c0       	rjmp	.+14     	; 0xe6a <__udivmodhi4_ep>

00000e5c <__udivmodhi4_loop>:
 e5c:	aa 1f       	adc	r26, r26
 e5e:	bb 1f       	adc	r27, r27
 e60:	a6 17       	cp	r26, r22
 e62:	b7 07       	cpc	r27, r23
 e64:	10 f0       	brcs	.+4      	; 0xe6a <__udivmodhi4_ep>
 e66:	a6 1b       	sub	r26, r22
 e68:	b7 0b       	sbc	r27, r23

00000e6a <__udivmodhi4_ep>:
 e6a:	88 1f       	adc	r24, r24
 e6c:	99 1f       	adc	r25, r25
 e6e:	5a 95       	dec	r21
 e70:	a9 f7       	brne	.-22     	; 0xe5c <__udivmodhi4_loop>
 e72:	80 95       	com	r24
 e74:	90 95       	com	r25
 e76:	bc 01       	movw	r22, r24
 e78:	cd 01       	movw	r24, r26
 e7a:	08 95       	ret

00000e7c <__udivmodsi4>:
 e7c:	a1 e2       	ldi	r26, 0x21	; 33
 e7e:	1a 2e       	mov	r1, r26
 e80:	aa 1b       	sub	r26, r26
 e82:	bb 1b       	sub	r27, r27
 e84:	fd 01       	movw	r30, r26
 e86:	0d c0       	rjmp	.+26     	; 0xea2 <__udivmodsi4_ep>

00000e88 <__udivmodsi4_loop>:
 e88:	aa 1f       	adc	r26, r26
 e8a:	bb 1f       	adc	r27, r27
 e8c:	ee 1f       	adc	r30, r30
 e8e:	ff 1f       	adc	r31, r31
 e90:	a2 17       	cp	r26, r18
 e92:	b3 07       	cpc	r27, r19
 e94:	e4 07       	cpc	r30, r20
 e96:	f5 07       	cpc	r31, r21
 e98:	20 f0       	brcs	.+8      	; 0xea2 <__udivmodsi4_ep>
 e9a:	a2 1b       	sub	r26, r18
 e9c:	b3 0b       	sbc	r27, r19
 e9e:	e4 0b       	sbc	r30, r20
 ea0:	f5 0b       	sbc	r31, r21

00000ea2 <__udivmodsi4_ep>:
 ea2:	66 1f       	adc	r22, r22
 ea4:	77 1f       	adc	r23, r23
 ea6:	88 1f       	adc	r24, r24
 ea8:	99 1f       	adc	r25, r25
 eaa:	1a 94       	dec	r1
 eac:	69 f7       	brne	.-38     	; 0xe88 <__udivmodsi4_loop>
 eae:	60 95       	com	r22
 eb0:	70 95       	com	r23
 eb2:	80 95       	com	r24
 eb4:	90 95       	com	r25
 eb6:	9b 01       	movw	r18, r22
 eb8:	ac 01       	movw	r20, r24
 eba:	bd 01       	movw	r22, r26
 ebc:	cf 01       	movw	r24, r30
 ebe:	08 95       	ret

00000ec0 <_exit>:
 ec0:	f8 94       	cli

00000ec2 <__stop_program>:
 ec2:	ff cf       	rjmp	.-2      	; 0xec2 <__stop_program>
